<p><time><q>『仙逆纪元0014年01月01日 - 09时00分 - 下界-四圣星域-朱雀星-赵国-藤家城 - 晨雾』</q></time></p>\n<p>赵国，藤家城。</p>\n<p>凛冽的寒风裹挟着清晨的薄雾，将这座古老的城池笼罩在一片朦胧之中。你——李白，赵国曾经显赫一时的落魄贵族后裔，站在藤家城略显破败的东城门前，紧了紧身上单薄的布衣。</p>\n<p>往日里象征着家族荣耀的精美玉佩，如今静静地躺在你的怀中。玉质温润，触手生凉，仿佛在无声地提醒着你，李家早已不复往昔。</p>\n<p>你的父亲，一个终日沉迷于家族古籍，梦想着重振李家辉煌的书呆子。临终前，他将这枚玉佩交给你，用略带疯狂的语气恳求你，一定要踏上仙途，重现李家往日的荣光。</p>\n<p>这既是遗愿，也是诅咒。</p>\n<p>你，并不喜欢修仙。比起那些虚无缥缈的仙术，你更喜欢研读那些古老的典籍，在文字的世界里寻找慰藉。但你无法拒绝父亲的遗愿，也无法摆脱家族的诅咒。</p>\n<p>深吸一口气，你迈开脚步，踏入了这座既熟悉又陌生的城池。</p>\n<p>藤家城，赵国屈指可数的几大修真家族之一——藤家的封地。作为赵国少有的元婴期修士，藤家老祖滕化元的一举一动，都足以影响整个赵国的局势。而你此行的目的，便是想尽一切办法，通过藤家的关系，获得一个进入修仙门派的机会。</p>\n<p>尽管希望渺茫。</p>\n<p>走在青石铺就的街道上，你默默地观察着周围的一切。街道两旁，商铺林立，贩夫走卒的叫卖声不绝于耳，空气中弥漫着各种食物的香气。然而，你却无心欣赏这些市井风情，你的心里，充满了焦虑和不安。</p>\n<p>落魄贵族的后裔，在这个以实力为尊的世界里，没有任何优势可言。你唯一的依仗，就是怀中那枚或许还有些价值的玉佩，以及你那还算清秀的相貌。</p>\n<p>你穿过熙熙攘攘的人群，来到位于城中心的一座略显陈旧的府邸前。高大的门楼，略显斑驳的红漆，无不显示着这座府邸曾经的辉煌。</p>\n<p>李府。</p>\n<p>这里，曾经是你的家。</p>\n<p>但现在，却只剩下无尽的凄凉。</p>\n<p>你上前，轻轻叩响了门环。</p>\n<p><q>“谁啊？”</q>一个略带不耐烦的声音从门内传来。</p>\n<p>吱呀一声，大门缓缓打开，一个穿着灰色布衣的家丁探出头来，用充满审视的目光打量着你。</p>\n<p><q>“你是何人？来李府有何贵干？”</q>家丁语气冷淡，显然并没有将你这个落魄贵族的后裔放在眼里。</p>\n<p>你深吸一口气，努力挤出一个笑容，轻声说道：<q>“这位大哥，在下李白，乃是李穆之子，特来拜访。”</q></p>\n<p><q>“李穆？”</q>家丁闻言一愣，随即脸上露出一丝不屑的笑容，<q>“原来是那个只会读书的书呆子的儿子啊。他不是早就死了吗？你来这里做什么？我们李府可没有什么亲戚。”</q></p>\n<p>家丁的话语，如同锋利的刀子，狠狠地刺痛了你的内心。你强忍住心中的怒火，尽量平静地说道：<q>“这位大哥，在下并非前来攀亲戚，只是想将先父遗物送还李府，以了却先父遗愿。”</q></p>\n<p><q>“遗物？”</q>家丁闻言，眼中闪过一丝贪婪的光芒，语气也稍微缓和了一些，<q>“什么遗物？拿来我看。”</q></p>\n<p>你犹豫了一下，还是从怀中掏出了那枚玉佩，递给家丁。</p>\n<p>家丁接过玉佩，放在手中仔细端详起来。片刻之后，他的脸上露出一丝惊讶的神色，随即又被贪婪所取代。</p>\n<p><q>“这好像是族长大人当年赏赐给老太爷的玉佩？”</q>家丁喃喃自语道，随即抬起头，用一种充满审视的目光看着你，<q>“这东西你是从哪里得到的？”</q></p>\n<p><q>“这是先父临终前交给我的，说是李家的传家宝，要我务必归还李府。”</q>你平静地说道，努力掩饰着内心的不安。</p>\n<p><q>“传家宝？”</q>家丁闻言，眼中贪婪之色更甚，他嘿嘿一笑，说道：<q>“既然是传家宝，那就更应该归还李府了。这样吧，你在这里等着，我这就去禀报管家，让他来处理。”</q></p>\n<p>说完，家丁便转身走进了府内，只留下你一个人站在寒风中，默默地等待着。</p>\n<p>时间一分一秒地流逝，你的心里越来越不安。你隐隐感到，事情似乎并没有想象中那么简单。</p>\n<p>就在你焦躁不安的时候，一阵脚步声从府内传来。你抬眼望去，只见一个穿着华丽，挺着啤酒肚的中年男子，在家丁的簇拥下，缓缓地走了出来。</p>\n<p>中年男子面色红润，双眼细长，脸上挂着一丝玩味的笑容。他的目光在你身上扫视了一圈，最终落在了你手中的玉佩上。</p>\n<p><q>“你就是李穆的儿子？李白？”</q>中年男子用一种高高在上的语气问道。</p>\n<p>你深吸一口气，强压下心中的不适，恭敬地行了一礼，说道：<q>“晚辈正是李白，见过这位这位大人。”</q></p>\n<p><q>“呵呵，不必多礼。”</q>中年男子摆了摆手，随即用一种充满玩味的目光看着你，<q>“这枚玉佩，你是从哪里得到的？”</q></p>\n<p><q>“这是先父临终前交给我的，说是李家的传家宝，要我务必归还李府。”</q>你再次重复了之前说过的话，希望能打消对方的疑虑。</p>\n<p><q>“传家宝？”</q>中年男子闻言，哈哈大笑起来，笑声中充满了嘲讽，<q>“李穆那个书呆子，也配拥有传家宝？这枚玉佩，明明是当年族长赏赐给老太爷的，怎么会成了你们家的东西？”</q></p>\n<p><q>“这”</q>你一时语塞，不知道该如何辩解。</p>\n<p><q>“好了，我也不跟你废话了。”</q>中年男子摆了摆手，用一种不容置疑的语气说道：<q>“这枚玉佩，是李府的，现在，我要把它收回来。”</q></p>\n<p><q>“可是”</q>你还想说些什么，却被中年男子粗暴地打断了。</p>\n<p><q>“没有什么可是。”</q>中年男子冷笑一声，说道：<q>“念在你父亲曾经也是李府的一份子，我可以给你一个机会。只要你答应为我做一件事，这枚玉佩，我就赏给你了。”</q></p>\n<p>你心中一动，连忙问道：<q>“什么事？”</q></p>\n<p>中年男子凑到你耳边，低声说了一句话。</p>\n<p>听完他的话，你顿时脸色大变。</p>\n<p><q>“这绝对不行！”</q>你断然拒绝道。</p>\n<p><q>“呵呵，看来你是不想要这枚玉佩了。”</q>中年男子耸了耸肩，说道：<q>“既然如此，那就请回吧。李府，不欢迎你。”</q></p>\n<p>说完，中年男子便转身欲走。</p>\n<p>你看着他手中的玉佩，心中充满了挣扎。</p>\n<p>这枚玉佩，是父亲留给你唯一的遗物，也是你重振李家希望的象征。但中年男子提出的要求，却让你无法接受。</p>\n<p><q>“等等！”</q>你咬了咬牙，终于做出了决定，<q>“我答应你！”</q><br>\n</p>\n<div class=\"custom-character-status-wrapper\">\n  \n  <style>/* 主容器样式 */\n\n.mes_text .custom-character-status-wrapper {\n  background-color: rgba(235, 225, 210, 0.95);\n  /* 浅米色背景 */\n  border: 1px solid rgba(165, 145, 120, 0.5);\n  border-radius: 6px;\n  max-width: 861px;\n  margin: 5px auto;\n  padding: 0 5px 5px 5px;\n  box-sizing: border-box;\n  overflow: hidden;\n  /* 颜色变量 */\n  --char-text-color: #4b3f34;\n  /* 深灰褐色文本 */\n  --char-content-border: rgba(165, 145, 120, 0.3);\n  --char-button-bg: rgba(218, 198, 171, 0.95);\n  --char-button-border: rgba(165, 145, 120, 0.8);\n  --char-button-highlight: rgba(228, 208, 181, 0.95);\n  --char-button-shadow: rgba(175, 155, 130, 0.85);\n  --char-button-outer-shadow: rgba(150, 130, 105, 0.3);\n  --char-icon-color: #5b99c9;\n  /* 蓝色图标 */\n  --char-content-bg: rgba(225, 215, 200, 0.95);\n  /* 内容区背景 */\n  --char-button-hover: rgba(225, 205, 178, 0.95);\n  /* 悬停颜色 */\n  --char-button-active: rgba(210, 190, 163, 0.95);\n  /* 点击时颜色 */\n}\n\n/* 定义标准字体栈 */\n\n.mes_text .custom-character-status-wrapper {\n  font-family: 'Segoe UI', Roboto, 'Helvetica Neue', 'Microsoft YaHei', 'Noto Sans SC', Arial, sans-serif;\n  color: var(--char-text-color);\n  /* 应用默认文本颜色 */\n}\n\n/* 全局禁用文本阴影 */\n\n.mes_text .custom-character-status-wrapper,\n.mes_text .custom-character-status-wrapper *,\n.mes_text .custom-details-character-status,\n.mes_text .custom-details-character-status *,\n.mes_text .custom-details-character-status > summary,\n.mes_text .custom-details-character-status > summary::before,\n.mes_text .custom-details-character-status > div {\n  text-shadow: none !important;\n}\n\n/* 详情按钮样式 (使用新类名) */\n\n.mes_text .custom-details-character-status {\n  border: none;\n  margin: 0;\n  padding: 0;\n  color: inherit;\n  /* 继承 wrapper 的颜色 */\n}\n\n/* 基础摘要样式 (使用新类名) */\n\n.mes_text .custom-details-character-status > summary {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  cursor: pointer;\n  list-style: none;\n  outline: none;\n  image-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  transition: all 0.1s ease-in-out;\n  position: relative;\n  top: 0;\n  left: 0;\n  box-sizing: border-box;\n  font-weight: 600;\n  /* 使用半粗体 (Semi-bold) 作为标题 */\n  color: var(--char-text-color);\n}\n\n/* 移除默认标记 (使用新类名) */\n\n.mes_text .custom-details-character-status > summary::-webkit-details-marker,\n.mes_text .custom-details-character-status > summary::marker {\n  display: none;\n  content: '';\n}\n\n/* 基础图标样式 (使用新类名) */\n\n.mes_text .custom-details-character-status > summary::before {\n  content: '👤';\n  /* <<< 角色状态图标 */\n  display: inline-block;\n  line-height: 1;\n  font-size: 1.1em;\n  color: var(--char-icon-color);\n  margin-right: 6px;\n}\n\n/* 关闭时状态 (使用新类名) */\n\n.mes_text .custom-details-character-status:not([open]) > summary {\n  padding: 4px 8px 5px 8px;\n  font-size: 16px;\n  line-height: 1.2;\n  margin-bottom: 0;\n  background-color: var(--char-button-bg);\n  border: 1px solid var(--char-button-border) !important;\n  border-radius: 5px;\n  box-shadow: 1px 1px 2px var(--char-button-outer-shadow) !important;\n  filter: none;\n  justify-content: flex-start;\n}\n\n/* 鼠标悬停效果 (使用新类名) */\n\n.mes_text .custom-details-character-status:not([open]) > summary:hover {\n  background-color: var(--char-button-hover);\n}\n\n/* 打开时状态 (使用新类名) */\n\n.mes_text .custom-details-character-status[open] > summary {\n  padding: 10px 8px;\n  font-size: 18px;\n  line-height: initial;\n  margin-bottom: 5px;\n  border: 1px solid var(--char-button-border);\n  border-radius: 5px;\n  background-color: var(--char-button-active);\n  justify-content: flex-start;\n  box-shadow: inset 1px 1px 0px 1px var(--char-button-highlight), inset -1px -1px 0px 1px var(--char-button-shadow);\n  filter: drop-shadow(1px 1px 0px var(--char-button-outer-shadow));\n  font-weight: 600;\n  /* 保持半粗体 */\n}\n\n/* 打开时图标样式 (使用新类名) */\n\n.mes_text .custom-details-character-status[open] > summary::before {\n  margin-right: 8px;\n}\n\n/* 点击时反馈 (使用新类名) */\n\n.mes_text .custom-details-character-status > summary:active {\n  padding: 10px 8px;\n  font-size: 18px;\n  line-height: initial;\n  background-color: var(--char-button-active);\n  box-shadow: inset 1px 1px 0px 1px var(--char-button-highlight), inset -1px -1px 0px 1px var(--char-button-shadow);\n  filter: drop-shadow(1px 1px 0px var(--char-button-outer-shadow));\n  top: 1px;\n  left: 1px;\n  border: 1px solid var(--char-button-border);\n  border-radius: 5px;\n  justify-content: flex-start;\n  margin-bottom: 5px;\n  font-weight: 600;\n  /* 保持半粗体 */\n}\n\n/* 点击时图标样式 (使用新类名) */\n\n.mes_text .custom-details-character-status > summary:active::before {\n  margin-right: 8px;\n}\n\n/* 打开时显示的内容 (使用新类名) */\n\n.mes_text .custom-details-character-status > div {\n  padding: 10px;\n  margin: 0;\n  font-size: 15px;\n  line-height: 1.5;\n  background-color: var(--char-content-bg);\n  color: var(--char-text-color);\n  border: 1px solid var(--char-content-border);\n  border-radius: 4px;\n  font-weight: normal;\n  /* 内容使用普通字重 */\n  white-space: pre-wrap;\n  word-break: break-word;\n}</style>\n\n  <details class=\"custom-details-character-status\">\n    \n    <summary>角色状态栏</summary>\n    \n    <div>\n      \n      【李白的基本信息】\n• 道号:   | 李白\n• 身份: 赵国 - 落魄贵族\n<details>\n<summary>【法宝栏】</summary>\n本命法宝:  (灵性:0)\n🩸+0 💪+0🏃+0 ✨+0 🔋 +0 🧠+0\n副法宝:  (灵性:0)\n🩸+0 💪+0🏃+0 ✨+0 🔋 +0 🧠+0\n法衣:  (灵性:0)\n🩸+0 💪+0🏃+0 ✨+0 🔋 +0 🧠+0\n饰品:  (灵性:0)\n🩸+0 💪+0🏃+0 ✨+0 🔋 +0 🧠+0\n最终总计:\n🩸0 💪15 🏃10✨15🔋15 🧠15\n</details>\n<details>\n<summary>【李白的修为与根基】</summary>\n【李白的境界】\n• 当前境界: 凡人 - 未入门\n• 当前境界进度: 0.0%\n• 突破所需:\n• 年龄:  | 寿元: 100\n【李白的根基】\n灵根: 未测试\n 💪根骨: 15\n 🏃身法 : 10\n 🔋淬体 : 15\n ✨神识 : 15\n🧠 悟性: 15\n</details>\n<details>\n<summary>【李白的功法与神通】</summary>\n• 【主修功法】\n-\n• 功法层次:\n• 下一层次:\n- 【已掌握神通】\n•\n• 【辅修功法】\n-\n• 【特殊能力】\n-\n</details>\n<details>\n<summary>【李白的好感度列表】</summary>\n</details>\n<details>\n<summary>【李白的任务列表】</summary>\n•\n</details>\n<details>\n<summary>【李白的储物袋】</summary>\n• 灵石 : 下品灵石0|中品灵石0|上品灵石0\n•\n</details>\n    </div>\n  </details>\n</div>\n<div class=\"custom-npc-status-wrapper\">\n  \n  <style>/* 主容器样式 - 蓝色主题 */\n\n.mes_text .custom-npc-status-wrapper {\n  background-color: rgba(230, 240, 255, 0.95) !important;\n  /* 柔和的天蓝色背景 */\n  border: 1px solid rgba(135, 175, 225, 0.5) !important;\n  /* 蓝色系边框 */\n  border-radius: 6px !important;\n  max-width: 861px !important;\n  margin: 5px auto !important;\n  padding: 0 5px 5px 5px !important;\n  box-sizing: border-box !important;\n  overflow: hidden !important;\n  font-family: 'Segoe UI', Roboto, 'Helvetica Neue', 'Microsoft YaHei', 'Noto Sans SC', Arial, sans-serif !important;\n  color: #3a5a78 !important;\n  /* 深蓝色文本 */\n}\n\n/* 全局禁用文本阴影 */\n\n.mes_text .custom-npc-status-wrapper,\n.mes_text .custom-npc-status-wrapper *,\n.mes_text .custom-details-npc-status,\n.mes_text .custom-details-npc-status *,\n.mes_text .custom-details-npc-status > summary,\n.mes_text .custom-details-npc-status > summary::before,\n.mes_text .custom-details-npc-status > div {\n  text-shadow: none !important;\n}\n\n/* 详情按钮样式 */\n\n.mes_text .custom-details-npc-status {\n  border: none !important;\n  margin: 0 !important;\n  padding: 0 !important;\n  color: inherit !important;\n}\n\n/* 基础摘要样式 */\n\n.mes_text .custom-details-npc-status > summary {\n  display: flex !important;\n  align-items: center !important;\n  width: 100% !important;\n  cursor: pointer !important;\n  list-style: none !important;\n  outline: none !important;\n  image-rendering: auto !important;\n  -webkit-font-smoothing: antialiased !important;\n  -moz-osx-font-smoothing: grayscale !important;\n  transition: all 0.1s ease-in-out !important;\n  position: relative !important;\n  top: 0 !important;\n  left: 0 !important;\n  box-sizing: border-box !important;\n  font-weight: 600 !important;\n  color: #3a5a78 !important;\n}\n\n/* 移除默认标记 */\n\n.mes_text .custom-details-npc-status > summary::-webkit-details-marker,\n.mes_text .custom-details-npc-status > summary::marker {\n  display: none !important;\n  content: '' !important;\n}\n\n/* 基础图标样式 */\n\n.mes_text .custom-details-npc-status > summary::before {\n  content: '🗣️' !important;\n  /* <<< NPC专属图标：说话的头像 */\n  display: inline-block !important;\n  line-height: 1 !important;\n  font-size: 1.1em !important;\n  color: #5a95d0 !important;\n  /* 鲜明的蓝色图标 */\n  margin-right: 6px !important;\n}\n\n/* 关闭时状态 */\n\n.mes_text .custom-details-npc-status:not([open]) > summary {\n  padding: 4px 8px 5px 8px !important;\n  font-size: 16px !important;\n  line-height: 1.2 !important;\n  margin-bottom: 0 !important;\n  background-color: rgba(210, 228, 255, 0.95) !important;\n  border: 1px solid rgba(135, 175, 225, 0.8) !important;\n  border-radius: 5px !important;\n  box-shadow: 1px 1px 2px rgba(125, 165, 215, 0.3) !important;\n  filter: none !important;\n  justify-content: flex-start !important;\n}\n\n/* 鼠标悬停效果 */\n\n.mes_text .custom-details-npc-status:not([open]) > summary:hover {\n  background-color: rgba(220, 235, 255, 0.95) !important;\n}\n\n/* 打开时状态 */\n\n.mes_text .custom-details-npc-status[open] > summary {\n  padding: 10px 8px !important;\n  font-size: 18px !important;\n  line-height: initial !important;\n  margin-bottom: 5px !important;\n  border: 1px solid rgba(135, 175, 225, 0.8) !important;\n  border-radius: 5px !important;\n  background-color: rgba(200, 218, 245, 0.95) !important;\n  justify-content: flex-start !important;\n  box-shadow: inset 1px 1px 0px 1px rgba(225, 240, 255, 0.95), inset -1px -1px 0px 1px rgba(180, 200, 230, 0.85) !important;\n  filter: drop-shadow(1px 1px 0px rgba(125, 165, 215, 0.3)) !important;\n  font-weight: 600 !important;\n}\n\n/* 打开时图标样式 */\n\n.mes_text .custom-details-npc-status[open] > summary::before {\n  margin-right: 8px !important;\n}\n\n/* 点击时反馈 */\n\n.mes_text .custom-details-npc-status > summary:active {\n  top: 1px !important;\n  left: 1px !important;\n}\n\n/* 打开时显示的内容 */\n\n.mes_text .custom-details-npc-status > div {\n  padding: 10px !important;\n  margin: 0 !important;\n  font-size: 15px !important;\n  line-height: 1.5 !important;\n  background-color: rgba(240, 248, 255, 0.95) !important;\n  /* 更浅的蓝色内容区 */\n  color: #3a5a78 !important;\n  border: 1px solid rgba(135, 175, 225, 0.3) !important;\n  border-radius: 4px !important;\n  font-weight: normal !important;\n  white-space: pre-wrap !important;\n  word-break: break-word !important;\n}</style>\n\n  <details class=\"custom-details-npc-status\">\n    \n    <summary>NPC 状态栏</summary>\n    \n    <div>\n      \n      <details>\n<summary>⚔️ 李府管家 -  | ❤️血量: 0/0 | **阵营:** 敌人</summary>\n<details>\n<summary>📊【根基属性】</summary>\n**📊 核心根基**<br>\n• 境界 (Realm)： 具体的境界描述<br>\n• 💪 根骨: 0<br>\n• 🏃 身法: 0<br>\n• ✨ 神识: 0<br>\n• 🔋 淬体: 0<br>\n• 🧠 悟性: 0<br>\n</details>\n<details>\n<summary>⚔️ 神通与战法</summary><br>\n**【核心神通】:**<br>\n威能: | 灵力消耗:<br>\n</details>\n🤝 交互档案<br>\n• **身份:** 我根据描述推断的身份(敌人)<br>\n• 性格特质:** 我根据描述推断的1-2个特质<br>\n</details>\n    </div>\n  </details>\n</div>\n<pre><code class=\"custom-text custom-language-text\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"zh\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;修仙战斗系统&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" /&gt;\n  &lt;/head&gt;\n&lt;/html&gt;\n\n  &lt;body&gt;\n    &lt;div id=\"status-data-source\" style=\"display: none\"&gt;[ENN:李府管家][ENHP:0/0][ENSTR:0][ENAGI:0][ENINT:0][ENVIT:0][ENS:][ATK:0][Hit%:0][Crit%:0][APT:0][TPA:0][PN5A:普攻,普攻,普攻,普攻,普攻]&lt;/div&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;details id=\"preparation-details\" class=\"preparation-details\"&gt;\n        &lt;summary class=\"preparation-summary\"&gt;战前准备&lt;/summary&gt;\n        &lt;div id=\"preparation-screen\" class=\"status-bar\" style=\"overflow: hidden; max-height: 0\"&gt;\n          &lt;div class=\"status-header\"&gt;\n            &lt;h2 id=\"status-title\"&gt;战斗准备&lt;/h2&gt;\n          &lt;/div&gt;\n          &lt;div id=\"player-status\" class=\"player-status\"&gt;&lt;/div&gt;\n          &lt;div id=\"pilots-container\" class=\"pilots-container\"&gt;&lt;/div&gt;\n          &lt;div id=\"combat-controls\" style=\"margin-top: 10px; text-align: center\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/details&gt;\n    &lt;/div&gt;\n    &lt;div id=\"combat-interface\" class=\"container\"&gt;\n      &lt;h3 id=\"combat-title\"&gt;战斗中&lt;/h3&gt;\n\n      &lt;div id=\"action-order-container\" class=\"action-order-container\"&gt;\n        &lt;div class=\"action-order-title\"&gt;&lt;i class=\"fas fa-list-ol\"&gt;&lt;/i&gt; 行动顺序&lt;/div&gt;\n        &lt;div id=\"action-order-display\" class=\"action-order-display\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div id=\"combat-display\"&gt;\n        &lt;div id=\"combat-player-panel\"&gt;&lt;/div&gt;\n        &lt;div id=\"combat-enemy-panel\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div id=\"combat-player-actions\"&gt;\n        &lt;div class=\"weapons-title\"&gt;&lt;i class=\"fas fa-tasks\"&gt;&lt;/i&gt; 选择行动&lt;/div&gt;\n        &lt;div class=\"weapon-category-toggle\"&gt;\n          &lt;div id=\"melee-toggle\" class=\"category-button active\"&gt;&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 神通&lt;/div&gt;\n          &lt;div id=\"items-toggle\" class=\"category-button\"&gt;&lt;i class=\"fas fa-pills\"&gt;&lt;/i&gt; 丹药&lt;/div&gt;\n          &lt;div id=\"stats-toggle\" class=\"category-button\"&gt;&lt;i class=\"fas fa-chart-bar\"&gt;&lt;/i&gt; 详细属性&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"melee-panel\" class=\"weapon-panel active\"&gt;\n          &lt;div id=\"melee-weapon-list\" class=\"weapon-buttons\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"items-panel\" class=\"weapon-panel\"&gt;\n          &lt;div id=\"items-list\" class=\"item-buttons\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"stats-panel\" class=\"weapon-panel\"&gt;\n          &lt;div id=\"detailed-stats-display\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"attack-controls\"&gt;\n          &lt;button id=\"attack-btn\" class=\"attack-button\" disabled&gt;&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 施展神通&lt;/button&gt;\n          &lt;button id=\"next-round-btn\" class=\"next-round-button\"&gt;\n            &lt;i class=\"fas fa-arrow-right-to-bracket\"&gt;&lt;/i&gt; 跳过当前行动\n          &lt;/button&gt;\n          &lt;button id=\"mid-action-btn\" class=\"mid-action-button\"&gt;&lt;i class=\"fas fa-pause\"&gt;&lt;/i&gt; 中途行动&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div id=\"combat-log-container\"&gt;\n        &lt;div class=\"weapons-title\"&gt;&lt;i class=\"fas fa-scroll\"&gt;&lt;/i&gt; 战斗记录&lt;/div&gt;\n        &lt;div id=\"combat-log\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"result-modal\" class=\"result-modal\"&gt;\n      &lt;div class=\"result-content\"&gt;\n        &lt;h2 class=\"result-title\"&gt;&lt;i class=\"fas fa-flag-checkered\"&gt;&lt;/i&gt; 战斗结果&lt;/h2&gt;\n        &lt;div id=\"result-summary\" class=\"result-summary\"&gt;&lt;/div&gt;\n\n        &lt;div class=\"result-extra-text\"&gt;\n          &lt;textarea id=\"extra-result-text\" placeholder=\"在此输入额外文字，将与战斗结果一起发送\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n        &lt;button id=\"send-result\" class=\"btn\" style=\"background-color: var(--success-color)\"&gt;\n          &lt;i class=\"fas fa-paper-plane\"&gt;&lt;/i&gt; 发送结果\n        &lt;/button&gt;\n        &lt;button id=\"close-result\" class=\"btn\" style=\"margin-left: 10px\"&gt;&lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; 取消&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;style&gt;\n\n      :root {\n        --bg-color: #1a1a2e;\n        --bg-secondary: #16213e;\n        --bg-tertiary: #0f172a;\n        --card-bg: rgba(30, 41, 59, 0.8);\n        --card-bg-solid: #1e293b;\n        --card-border: #334155;\n        --primary-color: #8b5cf6;\n        --primary-light: #a78bfa;\n        --primary-dark: #7c3aed;\n        --secondary-color: #ef4444;\n        --accent-color: #06b6d4;\n        --text-color: #e2e8f0;\n        --text-light: #94a3b8;\n        --text-muted: #64748b;\n        --border-color: #374151;\n        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.3);\n        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.4);\n        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.5);\n        --shadow-glow: 0 0 20px rgba(139, 92, 246, 0.3);\n        --font-rpg: system-ui, -apple-system, sans-serif;\n        --health-color: #ef4444;\n        --health-bg: rgba(239, 68, 68, 0.2);\n        --mana-color: #3b82f6;\n        --mana-bg: rgba(59, 130, 246, 0.2);\n        --success-color: #10b981;\n        --heal-color: #10b981;\n        --fire-color: #f97316;\n        --ice-color: #0ea5e9;\n        --lightning-color: #a855f7;\n        --gradient-primary: linear-gradient(135deg, #8b5cf6 0%, #06b6d4 100%);\n        --gradient-secondary: linear-gradient(135deg, #ef4444 0%, #f97316 100%);\n      }\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  background: transparent;\n  color: var(--text-color);\n  font-family: var(--font-rpg);\n  padding: 5px;\n  font-size: 14px;\n  margin: 0;\n}\n.container {\n  width: 100%;\n  max-width: 800px;\n  border-radius: 15px;\n  overflow: hidden;\n  box-shadow: var(--shadow-lg);\n  background: rgba(30, 41, 59, 0.95);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(51, 65, 85, 0.8);\n  margin: 0 auto 5px;\n}\n.status-bar {\n  width: 100%;\n  background: rgba(30, 41, 59, 0.9);\n  border-radius: 15px;\n  padding: 10px;\n  border: 1px solid rgba(51, 65, 85, 0.6);\n  backdrop-filter: blur(10px);\n}\n.status-header {\n  text-align: center;\n  margin-bottom: 5px;\n  padding-bottom: 4px;\n  border-bottom: 1px solid var(--border-color);\n}\n.status-header h2 {\n  font-size: 18px;\n  color: var(--primary-color);\n  text-shadow: 0 0 10px rgba(139, 92, 246, 0.5);\n  font-weight: 600;\n}\n.player-status,\n.pilots-container,\n.teammates-status {\n  margin-bottom: 5px;\n  padding: 8px;\n  background: rgba(22, 33, 62, 0.8);\n  border-radius: 10px;\n  box-shadow: var(--shadow-md);\n  border: 1px solid rgba(51, 65, 85, 0.5);\n  backdrop-filter: blur(8px);\n}\n.teammates-list {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 8px;\n  max-height: 110px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding-right: 0;\n}\n.teammate-item {\n  padding: 6px;\n  background: rgba(30, 41, 59, 0.7);\n  border-radius: 6px;\n  box-shadow: var(--shadow-sm);\n  border: 1px solid var(--primary-color);\n  transition: all 0.3s ease;\n  backdrop-filter: blur(5px);\n}\n.teammate-item:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-glow);\n  border-color: var(--primary-light);\n}\n.teammate-item.selectable {\n  cursor: pointer;\n}\n.teammate-item:not(.selected) {\n  opacity: 0.6;\n  filter: grayscale(30%);\n}\n.teammate-item.selected {\n  opacity: 1;\n  filter: none;\n}\n.teammate-name {\n  font-size: 13px;\n  font-weight: bold;\n  margin-bottom: 4px;\n  color: var(--primary-light);\n  text-shadow: 0 0 5px rgba(167, 139, 250, 0.3);\n}\n.teammate-hp,\n.teammate-mp,\n.teammate-ap {\n  display: flex;\n  align-items: center;\n  margin-bottom: 4px; \n}\n.teammate-agility,\n.teammate-speed,\n.teammate-stats {\n  font-size: 11px;\n  color: var(--text-light);\n  margin-top: 5px;\n  display: inline-block;\n  padding: 3px 6px;\n  background: var(--bg-color);\n  border-radius: 10px;\n  box-shadow: var(--shadow-sm);\n  cursor: help;\n  margin-right: 5px;\n}\n.teammate-weapons h4 {\n  font-size: 11px;\n  margin: 4px 0;\n  color: #6366f1;\n}\n\n.teammate-item .weapons-list {\n  max-height: 120px;\n  overflow-y: auto;\n  padding-right: 3px;\n  margin-bottom: 5px;\n}\n.teammate-item .weapon-item {\n  padding: 4px;\n  margin-bottom: 3px;\n}\n.teammate-item .weapon-name {\n  font-size: 10px;\n  margin-bottom: 2px;\n}\n.teammate-item .weapon-stats {\n  font-size: 8px;\n}\n.teammate-item .weapon-effect-codes {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 3px;\n  margin-top: 3px;\n}\n.teammate-item .weapon-effect-code {\n  font-size: 8px;\n  padding: 1px 3px;\n  border-radius: 3px;\n  background-color: rgba(99, 102, 241, 0.1);\n  border: 1px solid #6366f1;\n  position: relative;\n  cursor: help;\n}\n.player-info {\n  margin-bottom: 10px;\n}\n.player-name {\n  font-size: 15px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: var(--primary-color);\n}\n.player-hp,\n.player-mp,\n.player-ap {\n  display: flex;\n  align-items: center;\n  margin-bottom: 6px;\n}\n.hp-label,\n.mp-label {\n  width: 25px;\n  font-weight: bold;\n  font-size: 11px;\n}\n.hp-bar,\n.mp-bar,\n.ap-bar {\n  flex-grow: 1;\n  height: 18px;\n  background: var(--bg-tertiary);\n  border-radius: 10px;\n  overflow: hidden;\n  margin: 0 8px;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);\n  position: relative;\n  border: 1px solid var(--border-color);\n}\n.hp-fill {\n  height: 100%;\n  background: var(--gradient-secondary);\n  border-radius: 10px;\n  transition: width 0.5s ease;\n  box-shadow: 0 0 10px rgba(239, 68, 68, 0.3);\n}\n.mp-fill {\n  height: 100%;\n  background: var(--gradient-primary);\n  border-radius: 10px;\n  transition: width 0.5s ease;\n  box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);\n}\n.ap-fill {\n  height: 100%;\n  background: linear-gradient(135deg, #fbbf24, #f59e0b);\n  border-radius: 10px;\n  transition: width 0.5s ease;\n  box-shadow: 0 0 10px rgba(251, 191, 36, 0.3);\n}\n.hp-text,\n.mp-text,\n.ap-text {\n  min-width: 120px;\n  text-align: right;\n  font-weight: bold;\n  font-size: 11px;\n  color: var(--text-color);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.player-agility,\n.player-stats,\n.teammate-agility,\n.teammate-speed,\n.teammate-stats {\n  font-size: 11px;\n  color: var(--text-light);\n  margin-top: 5px;\n  display: inline-block;\n  padding: 3px 6px;\n  background: var(--bg-tertiary);\n  border-radius: 10px;\n  box-shadow: var(--shadow-sm);\n  cursor: help;\n  margin-right: 8px;\n  border: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n}\n.player-agility:hover,\n.player-stats:hover,\n.teammate-agility:hover,\n.teammate-speed:hover,\n.teammate-stats:hover {\n  background: var(--primary-color);\n  color: white;\n  transform: translateY(-1px);\n}\n.tooltip {\n  position: relative;\n  display: inline-block;\n}\n.tooltip .tooltip-text {\n  visibility: hidden;\n  width: 180px;\n  background: rgba(0, 0, 0, 0.9);\n  color: #ffffff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 6px;\n  position: absolute;\n  z-index: 999;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -90px;\n  opacity: 0;\n  transition: opacity 0.3s;\n  font-size: 11px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\n  border: 1px solid var(--primary-color);\n  pointer-events: none;\n  backdrop-filter: blur(10px);\n}\n.tooltip .tooltip-text::after {\n  content: '';\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: rgba(0, 0, 0, 0.9) transparent transparent transparent;\n}\n.tooltip:hover .tooltip-text {\n  visibility: visible;\n  opacity: 1;\n}\n.fa,\n.fas,\n.far,\n.fal,\n.fad,\n.fab,\n.fa-solid {\n  margin-right: 5px;\n  vertical-align: middle;\n}\n.player-weapons h3,\n.player-items h3 {\n  font-size: 14px;\n  margin-bottom: 8px;\n  color: var(--primary-light);\n}\n.weapons-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  gap: 8px;\n  max-height: 140px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding-right: 5px;\n}\n.weapon-item {\n  padding: 8px;\n  background: rgba(30, 41, 59, 0.7);\n  border-radius: 6px;\n  box-shadow: var(--shadow-sm);\n  transition: all 0.3s ease;\n  border: 1px solid var(--border-color);\n  position: relative;\n  backdrop-filter: blur(5px);\n}\n.weapon-item:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-glow);\n  border-color: var(--primary-color);\n}\n.weapon-name {\n  font-weight: bold;\n  margin-bottom: 4px;\n  color: var(--primary-light);\n  font-size: 12px;\n}\n.weapon-type {\n  font-size: 10px;\n  margin-bottom: 4px;\n  color: var(--text-muted);\n  display: inline-block;\n  padding: 2px 5px;\n  background: var(--bg-tertiary);\n  border-radius: 8px;\n  border: 1px solid var(--border-color);\n}\n.weapon-stats {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n  font-size: 9px;\n  margin-top: 5px;\n}\n.weapon-stat {\n  padding: 2px 6px;\n  background: var(--bg-tertiary);\n  border-radius: 6px;\n  color: var(--text-light);\n  position: relative;\n  border: 1px solid var(--border-color);\n  font-size: 9px;\n}\n.pilots-container h3 {\n  font-size: 14px;\n  margin-bottom: 8px;\n  color: var(--secondary-color);\n}\n.enemies-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  gap: 8px;\n  max-height: 140px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding-right: 5px;\n}\n.enemy-item {\n  padding: 8px;\n  background: rgba(30, 41, 59, 0.7);\n  border-radius: 6px;\n  box-shadow: var(--shadow-sm);\n  border: 1px solid var(--border-color);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  backdrop-filter: blur(5px);\n}\n.enemy-item:not(.selected) {\n  opacity: 0.6;\n  border-color: var(--text-muted);\n}\n.enemy-item.selected {\n  border-color: var(--secondary-color);\n  box-shadow: 0 0 15px rgba(239, 68, 68, 0.3);\n  opacity: 1;\n}\n.enemy-item:hover {\n  transform: translateY(-2px);\n  opacity: 1;\n}\n.enemy-name {\n  font-weight: bold;\n  margin-bottom: 4px;\n  color: var(--secondary-color);\n  font-size: 12px;\n}\n.enemy-hp {\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n}\n.enemy-agility {\n  font-size: 10px;\n  margin-bottom: 4px;\n  color: var(--text-muted);\n  display: inline-block;\n  padding: 2px 5px;\n  background: var(--bg-tertiary);\n  border-radius: 8px;\n  cursor: help;\n  border: 1px solid var(--border-color);\n}\n.enemy-skills {\n  font-size: 10px;\n  color: var(--text-light);\n  margin-top: 4px;\n  padding: 4px;\n  background: var(--bg-tertiary);\n  border-radius: 4px;\n  border: 1px solid var(--border-color);\n}\n.battle-button {\n  display: block;\n  margin: 0 auto;\n  padding: 7px 14px;\n  background: var(--gradient-primary);\n  color: white;\n  border: none;\n  border-radius: 16px;\n  font-family: var(--font-rpg);\n  font-size: 13px;\n  font-weight: bold;\n  cursor: pointer;\n  box-shadow: var(--shadow-md);\n  transition: all 0.3s ease;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n}\n.battle-button:hover {\n  transform: translateY(-3px);\n  box-shadow: var(--shadow-glow);\n  background: var(--gradient-secondary);\n}\n.battle-button:active {\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-sm);\n}\n#combat-interface {\n  width: 100%;\n  max-width: 800px;\n  display: none;\n  border-radius: 15px;\n  overflow: hidden;\n  background: rgba(30, 41, 59, 0.95);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(51, 65, 85, 0.8);\n}\n#combat-display {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  gap: 8px;\n  margin-bottom: 8px;\n  padding: 0 8px;\n}\n#combat-player-panel {\n  max-height: 180px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding-right: 5px;\n}\n.combat-entity {\n  padding: 8px;\n  background: var(--bg-secondary);\n  border-radius: 10px;\n  box-shadow: var(--shadow-sm);\n  margin-bottom: 6px;\n  position: relative;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  border: 2px solid transparent;\n}\n.combat-entity.player {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 15px rgba(139, 92, 246, 0.2);\n}\n.combat-entity.teammate {\n  border-color: var(--accent-color);\n  padding: 6px;\n  margin-bottom: 4px;\n}\n.combat-entity.teammate.current-teammate {\n  box-shadow: 0 0 20px rgba(6, 182, 212, 0.4);\n  transform: translateY(-2px);\n}\n.combat-entity.enemy {\n  border-color: var(--secondary-color);\n  box-shadow: 0 0 15px rgba(239, 68, 68, 0.2);\n}\n.combat-entity.selected {\n  border-color: #fbbf24;\n  background: rgba(251, 191, 36, 0.1);\n  transform: translateY(-2px);\n  box-shadow: 0 0 20px rgba(251, 191, 36, 0.3);\n}\n.combat-entity.current-actor {\n  box-shadow: 0 0 25px rgba(251, 191, 36, 0.5);\n  animation: pulse-gold 2s infinite;\n}\n\n      @keyframes pulse-gold {\n        0% {\n          box-shadow: 0 0 25px rgba(251, 191, 36, 0.5);\n        }\n        50% {\n          box-shadow: 0 0 35px rgba(251, 191, 36, 0.8);\n        }\n        100% {\n          box-shadow: 0 0 25px rgba(251, 191, 36, 0.5);\n        }\n      }\n      .entity-header {\n        margin-bottom: 6px;\n        padding-bottom: 4px;\n        border-bottom: 1px solid var(--border-color);\n      }\n      .entity-name {\n        font-size: 13px;\n        font-weight: bold;\n        color: var(--primary-light);\n      }\n      .combat-entity.enemy .entity-name {\n        color: var(--secondary-color);\n      }\n      .entity-stats {\n        margin-bottom: 6px;\n      }\n      .hp-bar-container,\n      .mp-bar-container,\n      .ap-bar-container,\n      .shield-bar-container {\n        display: flex;\n        align-items: center;\n        margin-bottom: 4px;\n      }\n      .hp-bar-label,\n      .mp-bar-label,\n      .ap-bar-label,\n      .shield-bar-label {\n        font-weight: bold;\n        width: 25px;\n        margin-right: 8px;\n        font-size: 11px;\n        color: var(--text-light);\n      }\n      .hp-bar-combat,\n      .mp-bar-combat,\n      .ap-bar-combat,\n      .shield-bar-combat {\n        flex-grow: 1;\n        height: 14px;\n        background: var(--bg-tertiary);\n        border-radius: 7px;\n        overflow: visible;\n        position: relative;\n        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);\n        border: 1px solid var(--border-color);\n        min-width: 150px;\n      }\n      .hp-fill-combat {\n        height: 100%;\n        background: var(--gradient-secondary);\n        border-radius: 7px;\n        transition: width 0.5s ease;\n        box-shadow: 0 0 8px rgba(239, 68, 68, 0.3);\n      }\n      .mp-fill-combat {\n        height: 100%;\n        background: var(--gradient-primary);\n        border-radius: 7px;\n        transition: width 0.5s ease;\n        box-shadow: 0 0 8px rgba(59, 130, 246, 0.3);\n      }\n      .ap-fill-combat {\n        height: 100%;\n        background: linear-gradient(135deg, #fbbf24, #f59e0b);\n        border-radius: 7px;\n        transition: width 0.5s ease;\n        box-shadow: 0 0 8px rgba(251, 191, 36, 0.3);\n      }\n      .shield-bar-combat {\n        background: rgba(6, 182, 212, 0.15);\n        border: 1px solid rgba(6, 182, 212, 0.4);\n        border-radius: 7px;\n        overflow: visible;\n        position: relative;\n      }\n      .hp-text-combat,\n      .mp-text-combat,\n      .ap-text-combat,\n      .shield-text-combat {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: var(--text-color);\n        font-weight: bold;\n        font-size: 9px;\n        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);\n        white-space: nowrap;\n        width: max-content;\n        max-width: 200px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .shield-text-combat {\n        color: #06b6d4;\n      }\n      .stat-grid {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 6px;\n        margin-top: 6px;\n      }\n      .stat-box {\n        padding: 5px;\n        background-color: var(--card-bg);\n        border-radius: 5px;\n        box-shadow: var(--shadow-sm);\n        text-align: center;\n        cursor: help;\n      }\n\n      .stat-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 1px 4px;\n        margin: 1px 0;\n        font-size: 10px;\n        line-height: 1.2;\n        border-radius: 3px;\n        transition: background-color 0.2s ease;\n      }\n      .stat-row:hover {\n        background-color: rgba(255, 255, 255, 0.1);\n      }\n      .stat-row-label {\n        display: flex;\n        align-items: center;\n        gap: 3px;\n        font-size: 9px;\n        opacity: 0.9;\n      }\n      .stat-row-label i {\n        font-size: 8px;\n        width: 12px;\n        text-align: center;\n      }\n      .stat-row-value {\n        font-size: 10px;\n        font-weight: 500;\n        text-align: right;\n      }\n\n      #detailed-stats-display .stat-row {\n        padding: 3px 6px;\n        margin: 2px 0;\n        font-size: 12px;\n        line-height: 1.4;\n      }\n      #detailed-stats-display .stat-row-label {\n        gap: 4px;\n        font-size: 11px;\n      }\n      #detailed-stats-display .stat-row-label i {\n        font-size: 10px;\n        width: 14px;\n      }\n      #detailed-stats-display .stat-row-value {\n        font-size: 12px;\n        font-weight: 600;\n      }\n\n      #detailed-stats-display .category-title {\n        font-size: 12px;\n      }\n      #detailed-stats-display .stat-badge {\n        font-size: 12px;\n        padding: 8px 10px;\n      }\n      #detailed-stats-display .stat-badge i {\n        font-size: 13px;\n      }\n\n      .stat-row.str-based {\n        border-left: 2px solid #ff6b6b;\n      }\n      .stat-row.agi-based {\n        border-left: 2px solid #4ecdc4;\n      }\n      .stat-row.int-based {\n        border-left: 2px solid #45b7d1;\n      }\n      .stat-row.vit-based {\n        border-left: 2px solid #96ceb4;\n      }\n      .stat-row.resistance {\n        border-left: 2px solid #feca57;\n      }\n      .stat-row.recovery {\n        border-left: 2px solid #ec4899;\n      }\n\n      .stat-badge {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 4px;\n        padding: 6px 8px;\n        background: rgba(139, 92, 246, 0.15);\n        border: 1px solid rgba(139, 92, 246, 0.3);\n        border-radius: 8px;\n        font-size: 10px;\n        font-weight: 600;\n        color: var(--text-color);\n        transition: all 0.3s ease;\n        text-align: center;\n      }\n      .stat-badge:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(139, 92, 246, 0.3);\n      }\n      .stat-badge.str-based {\n        background: rgba(239, 68, 68, 0.15);\n        border-color: rgba(239, 68, 68, 0.4);\n        color: #fca5a5;\n      }\n      .stat-badge.agi-based {\n        background: rgba(16, 185, 129, 0.15);\n        border-color: rgba(16, 185, 129, 0.4);\n        color: #6ee7b7;\n      }\n      .stat-badge.int-based {\n        background: rgba(139, 92, 246, 0.15);\n        border-color: rgba(139, 92, 246, 0.4);\n        color: #c4b5fd;\n      }\n      .stat-badge.vit-based {\n        background: rgba(245, 158, 11, 0.15);\n        border-color: rgba(245, 158, 11, 0.4);\n        color: #fcd34d;\n      }\n      .stat-badge i {\n        font-size: 11px;\n      }\n\n      .character-selector {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 6px;\n        padding: 8px;\n        background: var(--bg-tertiary);\n        border-radius: 10px;\n        margin-bottom: 10px;\n        border: 1px solid var(--border-color);\n      }\n      .char-select-btn {\n        flex: 1;\n        min-width: 80px;\n        padding: 8px 12px;\n        background: rgba(139, 92, 246, 0.1);\n        border: 1px solid rgba(139, 92, 246, 0.3);\n        border-radius: 8px;\n        color: var(--text-light);\n        font-size: 11px;\n        font-weight: 500;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 4px;\n      }\n      .char-select-btn:hover {\n        background: rgba(139, 92, 246, 0.2);\n        border-color: rgba(139, 92, 246, 0.5);\n        color: var(--text-color);\n        transform: translateY(-1px);\n      }\n      .char-select-btn.active {\n        background: var(--gradient-primary);\n        border-color: var(--primary-light);\n        color: white;\n        box-shadow: var(--shadow-glow);\n        font-weight: 600;\n      }\n      .char-select-btn.enemy {\n        background: rgba(239, 68, 68, 0.1);\n        border-color: rgba(239, 68, 68, 0.3);\n      }\n      .char-select-btn.enemy:hover {\n        background: rgba(239, 68, 68, 0.2);\n        border-color: rgba(239, 68, 68, 0.5);\n      }\n      .char-select-btn.enemy.active {\n        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\n        border-color: #f87171;\n      }\n      .char-select-btn i {\n        font-size: 12px;\n      }\n\n      .stats-compact {\n        max-height: 180px;\n        overflow-y: auto;\n        padding: 3px;\n      }\n      .stats-compact::-webkit-scrollbar {\n        width: 4px;\n      }\n      .stats-compact::-webkit-scrollbar-track {\n        background: rgba(255, 255, 255, 0.1);\n        border-radius: 2px;\n      }\n      .stats-compact::-webkit-scrollbar-thumb {\n        background: rgba(255, 255, 255, 0.3);\n        border-radius: 2px;\n      }\n      .stats-compact::-webkit-scrollbar-thumb:hover {\n        background: rgba(255, 255, 255, 0.5);\n      }\n      .stat-label {\n        font-size: 9px;\n        color: var(--text-light);\n        margin-bottom: 2px;\n      }\n      .stat-value {\n        font-size: 11px;\n        font-weight: bold;\n        color: var(--text-color);\n      }\n\n      .stat-category {\n        grid-column: 1 / -1;\n        margin-bottom: 8px;\n      }\n      .category-title {\n        font-size: 12px;\n        font-weight: bold;\n        color: var(--primary-color);\n        margin-bottom: 4px;\n        text-align: center;\n        border-bottom: 1px solid var(--border-color);\n        padding-bottom: 2px;\n      }\n      .stat-row {\n        display: flex;\n        justify-content: space-around;\n        font-size: 10px;\n        color: var(--text-color);\n      }\n      .stat-name {\n        font-weight: bold;\n      }\n\n      .str-based {\n        border-left: 3px solid #ff6b6b; \n      }\n      .agi-based {\n        border-left: 3px solid #4ecdc4; \n      }\n      .int-based {\n        border-left: 3px solid #45b7d1; \n      }\n      .vit-based {\n        border-left: 3px solid #96ceb4; \n      }\n      .resistance {\n        border-left: 3px solid #feca57; \n      }\n      .entity-next-attack {\n        margin-bottom: 8px;\n        padding: 6px;\n        background-color: var(--card-bg);\n        border-radius: 5px;\n        box-shadow: var(--shadow-sm);\n      }\n      .next-attack-title,\n      .weapons-title {\n        font-size: 11px;\n        font-weight: bold;\n        margin-bottom: 5px;\n        color: var(--text-light);\n      }\n      .next-attack-name {\n        font-size: 12px;\n        font-weight: bold;\n        color: var(--secondary-color);\n      }\n\n      .skill-stats-grid {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 4px;\n        margin-top: 6px;\n      }\n      .skill-stat-item {\n        padding: 4px 6px;\n        border-radius: 4px;\n        font-size: 10px;\n        font-weight: 500;\n        text-align: center;\n        transition: all 0.2s ease;\n        position: relative;\n        border: 1px solid transparent;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 3px;\n      }\n      .skill-stat-item i {\n        font-size: 9px;\n        width: 12px;\n        text-align: center;\n      }\n\n      .skill-attack {\n        background: linear-gradient(135deg, #ff6b6b20, #ff6b6b10);\n        color: #d63031;\n        border-color: #ff6b6b40;\n      }\n      .skill-accuracy {\n        background: linear-gradient(135deg, #4dabf720, #4dabf710);\n        color: #0984e3;\n        border-color: #4dabf740;\n      }\n      .skill-targets {\n        background: linear-gradient(135deg, #00b89420, #00b89410);\n        color: #00a085;\n        border-color: #00b89440;\n      }\n      .skill-times {\n        background: linear-gradient(135deg, #a29bfe20, #a29bfe10);\n        color: #6c5ce7;\n        border-color: #a29bfe40;\n      }\n\n      .skill-stat-item:hover {\n        transform: translateY(-1px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        border-color: var(--secondary-color);\n      }\n      .skill-attack:hover {\n        background: linear-gradient(135deg, #ff6b6b30, #ff6b6b20);\n        border-color: #ff6b6b;\n      }\n      .skill-accuracy:hover {\n        background: linear-gradient(135deg, #4dabf730, #4dabf720);\n        border-color: #4dabf7;\n      }\n      .skill-targets:hover {\n        background: linear-gradient(135deg, #00b89430, #00b89420);\n        border-color: #00b894;\n      }\n      .skill-times:hover {\n        background: linear-gradient(135deg, #a29bfe30, #a29bfe20);\n        border-color: #a29bfe;\n      }\n\n      .stats-toggle-btn {\n        background: rgba(139, 92, 246, 0.2);\n        border: 1px solid var(--primary-color);\n        color: var(--primary-light);\n        padding: 4px 8px;\n        border-radius: 6px;\n        font-size: 10px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        margin-bottom: 6px;\n        width: 100%;\n        text-align: center;\n      }\n      .stats-toggle-btn:hover {\n        background: rgba(139, 92, 246, 0.3);\n        transform: translateY(-1px);\n      }\n      .stats-collapsible {\n        overflow: hidden;\n        transition: max-height 0.3s ease;\n        max-height: 0;\n      }\n      .stats-collapsible.expanded {\n        max-height: 200px;\n      }\n      .stats-toggle-btn .toggle-icon {\n        transition: transform 0.3s ease;\n        display: inline-block;\n        margin-left: 4px;\n      }\n      .stats-toggle-btn.expanded .toggle-icon {\n        transform: rotate(180deg);\n      }\n      .entity-buffs {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n        margin-top: 6px;\n      }\n\n      .entity-hate-list {\n        margin-top: 6px;\n        padding: 6px;\n        background: var(--bg-tertiary);\n        border-radius: 8px;\n        border: 1px solid var(--border-color);\n      }\n      .hate-list-title {\n        font-size: 11px;\n        font-weight: bold;\n        color: var(--secondary-color);\n        margin-bottom: 4px;\n        display: flex;\n        align-items: center;\n        gap: 4px;\n      }\n      .hate-list-content {\n        max-height: 80px;\n        overflow-y: auto;\n      }\n      .hate-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 3px 6px;\n        margin-bottom: 2px;\n        background: var(--card-bg);\n        border-radius: 6px;\n        font-size: 10px;\n        border: 1px solid var(--border-color);\n        transition: all 0.2s ease;\n      }\n      .hate-item.current-target {\n        background: rgba(239, 68, 68, 0.2);\n        border-color: var(--secondary-color);\n        box-shadow: 0 0 8px rgba(239, 68, 68, 0.3);\n      }\n      .hate-item.no-target {\n        text-align: center;\n        color: var(--text-light);\n        font-style: italic;\n        background: transparent;\n        border: 1px dashed var(--border-color);\n      }\n      .hate-target-name {\n        font-weight: bold;\n        color: var(--text-color);\n      }\n      .hate-value {\n        background: var(--secondary-color);\n        color: white;\n        padding: 1px 4px;\n        border-radius: 4px;\n        font-size: 9px;\n        font-weight: bold;\n        min-width: 20px;\n        text-align: center;\n      }\n      .buff {\n        padding: 3px 6px;\n        border-radius: 10px;\n        font-size: 10px;\n        display: flex;\n        align-items: center;\n        cursor: help;\n      }\n      .buff.positive {\n        background-color: var(--mana-bg);\n        color: var(--mana-color);\n      }\n      .buff.negative {\n        background-color: var(--health-bg);\n        color: var(--health-color);\n      }\n      .buff.fire {\n        background-color: #ffedd5;\n        color: var(--fire-color);\n      }\n      .buff.ice {\n        background-color: #e0f2fe;\n        color: var(--ice-color);\n      }\n      .buff.lightning {\n        background-color: #f3e8ff;\n        color: var(--lightning-color);\n      }\n      .buff-name {\n        margin-right: 4px;\n        font-weight: bold;\n      }\n      .buff-duration {\n        font-size: 8px;\n        background-color: rgba(255, 255, 255, 0.5);\n        padding: 1px 3px;\n        border-radius: 5px;\n      }\n\n      .weapon-category-toggle {\n        display: flex;\n        justify-content: space-around;\n        margin-bottom: 8px;\n        background: var(--bg-tertiary);\n        border-radius: 12px;\n        padding: 3px;\n        border: 1px solid var(--border-color);\n      }\n      .category-button {\n        padding: 6px 12px;\n        background: transparent;\n        border: none;\n        border-radius: 10px;\n        font-family: var(--font-rpg);\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n        flex: 1;\n        margin: 0 2px;\n        text-align: center;\n        color: var(--text-light);\n        font-size: 12px;\n      }\n      .category-button.active {\n        background: var(--gradient-primary);\n        color: white;\n        box-shadow: var(--shadow-md);\n        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n      }\n      .category-button:hover:not(.active) {\n        background: var(--card-bg);\n        color: var(--text-color);\n      }\n\n      .weapon-panel {\n        display: none;\n        padding: 8px;\n        background: var(--bg-secondary);\n        border-radius: 10px;\n        margin-bottom: 8px;\n        border: 1px solid var(--border-color);\n      }\n      .weapon-panel.active {\n        display: block;\n      }\n      .weapon-buttons,\n      .item-buttons {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));\n        gap: 6px;\n        margin-bottom: 6px;\n        max-height: 120px;\n        overflow-y: auto;\n        padding-right: 5px;\n      }\n      .weapon-button,\n      .item-button {\n        padding: 6px;\n        background: var(--card-bg);\n        border: 1px solid var(--border-color);\n        border-radius: 8px;\n        font-family: var(--font-rpg);\n        cursor: pointer;\n        text-align: left;\n        box-shadow: var(--shadow-sm);\n        font-size: 10px;\n        position: relative;\n        transition: all 0.3s ease;\n        color: var(--text-color);\n      }\n      .weapon-button:hover:not(.used),\n      .item-button:hover:not(.used) {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-glow);\n        border-color: var(--primary-color);\n      }\n      .weapon-button.selected,\n      .item-button.selected {\n        background: var(--gradient-primary);\n        color: white;\n        box-shadow: var(--shadow-glow);\n        border-color: var(--primary-light);\n      }\n      .weapon-button.used,\n      .item-button.used {\n        opacity: 0.4;\n        cursor: not-allowed;\n        background: var(--bg-tertiary);\n        filter: brightness(0.6);\n        border-color: var(--text-muted);\n      }\n      .weapon-button-name {\n        font-weight: bold;\n        margin-bottom: 4px;\n        font-size: 11px;\n      }\n      .weapon-button-stats {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 3px;\n        font-size: 9px;\n        margin-bottom: 3px; \n      }\n      .weapon-effect-codes {\n        margin-top: 3px;\n        font-size: 8px;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 2px;\n      }\n      .weapon-effect-code {\n        padding: 1px 2px;\n        background-color: rgba(0, 0, 0, 0.05);\n        border-radius: 2px;\n        position: relative;\n      }\n      .weapon-button.selected .weapon-effect-code {\n        background-color: rgba(255, 255, 255, 0.2);\n      }\n      .item-button {\n        padding: 6px;\n        background-color: var(--card-bg);\n        border: 1px solid var(--border-color);\n        border-radius: 6px;\n        font-family: var(--font-rpg);\n        cursor: pointer;\n        text-align: left;\n        box-shadow: var(--shadow-sm);\n        font-size: 10px;\n        position: relative;\n        transition: all 0.2s ease;\n      }\n      .item-button:hover:not(.used) {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-md);\n      }\n      .item-button.selected {\n        background-color: var(--primary-color);\n        color: white;\n        box-shadow: var(--shadow-md);\n        border-color: var(--primary-color);\n      }\n      .item-button.used {\n        opacity: 0.5;\n        cursor: not-allowed;\n        background-color: #2a2a2a;\n        color: #666;\n      }\n      .item-button-name {\n        font-weight: bold;\n        margin-bottom: 4px;\n        font-size: 11px;\n      }\n      .item-button-count {\n        display: inline-block;\n        background-color: rgba(0, 0, 0, 0.1);\n        padding: 1px 4px;\n        border-radius: 10px;\n        font-size: 9px;\n        margin-left: 4px;\n      }\n      .item-button-effect {\n        font-size: 9px;\n        color: var(--text-light);\n        margin-top: 4px;\n      }\n      .item-button.selected .item-button-effect {\n        color: rgba(255, 255, 255, 0.8);\n      }\n      .attack-controls {\n        display: flex;\n        justify-content: center;\n        gap: 10px;\n        margin-top: 8px;\n      }\n      .attack-button,\n      .next-round-button,\n      .mid-action-button {\n        padding: 6px 12px;\n        border: none;\n        border-radius: 14px;\n        font-family: var(--font-rpg);\n        font-size: 12px;\n        font-weight: bold;\n        cursor: pointer;\n        box-shadow: var(--shadow-md);\n        transition: all 0.3s ease;\n        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n      }\n      .attack-button {\n        background: var(--gradient-secondary);\n        color: white;\n      }\n      .attack-button:hover:not(:disabled) {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-glow);\n      }\n      .attack-button:disabled {\n        background: var(--text-muted);\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n      .next-round-button {\n        background: var(--gradient-primary);\n        color: white;\n      }\n      .next-round-button:hover:not(:disabled) {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-glow);\n      }\n      .mid-action-button {\n        background: linear-gradient(135deg, #f59e0b, #d97706);\n        color: white;\n      }\n      .mid-action-button:hover:not(:disabled) {\n        transform: translateY(-2px);\n        box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);\n      }\n      #combat-log-container {\n        margin: 8px;\n        padding: 8px;\n        background: var(--bg-secondary);\n        border-radius: 10px;\n        box-shadow: var(--shadow-sm);\n        border: 1px solid var(--border-color);\n      }\n      #combat-log {\n        height: 150px;\n        overflow-y: auto;\n        background: var(--bg-tertiary);\n        border-radius: 8px;\n        padding: 6px;\n        font-size: 11px;\n        color: var(--text-color);\n        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);\n        margin-top: 5px;\n        border: 1px solid var(--border-color);\n      }\n      .log-entry {\n        margin-bottom: 4px;\n        padding-bottom: 4px;\n        border-bottom: 1px solid var(--border-color);\n      }\n      .result-modal {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        backdrop-filter: blur(5px);\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n      }\n      .result-content {\n        width: 90%;\n        max-width: 400px;\n        background: rgba(30, 41, 59, 0.95);\n        border-radius: 20px;\n        padding: 25px;\n        box-shadow: var(--shadow-lg);\n        text-align: center;\n        border: 1px solid rgba(51, 65, 85, 0.8);\n        backdrop-filter: blur(15px);\n      }\n      .result-title {\n        font-size: 18px;\n        margin-bottom: 15px;\n        color: var(--primary-light);\n      }\n      .victory {\n        color: var(--success-color);\n      }\n      .defeat {\n        color: var(--secondary-color);\n      }\n      .result-summary {\n        margin-bottom: 20px;\n        font-size: 13px;\n        line-height: 1.5;\n        color: var(--text-light);\n      }\n      .btn {\n        padding: 10px 20px;\n        background: var(--gradient-primary);\n        color: white;\n        border: none;\n        border-radius: 18px;\n        font-family: var(--font-rpg);\n        font-size: 13px;\n        font-weight: bold;\n        cursor: pointer;\n        box-shadow: var(--shadow-md);\n        transition: all 0.3s ease;\n        margin: 0 5px;\n      }\n      .btn:hover {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-glow);\n      }\n\n      ::-webkit-scrollbar {\n        width: 6px;\n      }\n      ::-webkit-scrollbar-track {\n        background: var(--bg-tertiary);\n        border-radius: 6px;\n      }\n      ::-webkit-scrollbar-thumb {\n        background: var(--primary-color);\n        border-radius: 6px;\n      }\n      ::-webkit-scrollbar-thumb:hover {\n        background: var(--primary-light);\n      }\n\n      .action-order-container {\n        margin: 10px;\n        padding: 8px;\n        background-color: var(--bg-color);\n        border-radius: 8px;\n        box-shadow: var(--shadow-sm);\n      }\n      .action-order-title {\n        font-size: 14px;\n        font-weight: bold;\n        margin-bottom: 8px;\n        color: var(--primary-color);\n      }\n      .action-order-display {\n        display: flex;\n        overflow-x: auto;\n        padding: 5px 0;\n        margin-bottom: 5px;\n      }\n      .action-order-item {\n        flex: 0 0 auto;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin: 0 5px;\n        padding: 5px;\n        border-radius: 5px;\n        min-width: 60px;\n        position: relative;\n      }\n      .action-order-item.player,\n      .action-order-item.teammate {\n        background-color: rgba(99, 102, 241, 0.1);\n        border: 1px solid var(--primary-color);\n      }\n      .action-order-item.enemy {\n        background-color: rgba(244, 63, 94, 0.1);\n        border: 1px solid var(--secondary-color);\n      }\n      .action-order-item.current {\n        transform: translateY(-5px);\n        box-shadow: var(--shadow-md);\n      }\n      .action-order-item.player.current,\n      .action-order-item.teammate.current {\n        background-color: rgba(99, 102, 241, 0.2);\n      }\n      .action-order-item.enemy.current {\n        background-color: rgba(244, 63, 94, 0.2);\n      }\n      .action-order-name {\n        font-size: 11px;\n        font-weight: bold;\n        margin-bottom: 3px;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        max-width: 80px;\n      }\n      .action-order-item.player .action-order-name,\n      .action-order-item.teammate .action-order-name {\n        color: var(--primary-color);\n      }\n      .action-order-item.enemy .action-order-name {\n        color: var(--secondary-color);\n      }\n      .action-order-speed {\n        font-size: 9px;\n        color: var(--text-light);\n      }\n      .action-order-number {\n        position: absolute;\n        top: -8px;\n        right: -8px;\n        background-color: var(--card-bg);\n        border-radius: 50%;\n        width: 16px;\n        height: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 9px;\n        font-weight: bold;\n        box-shadow: var(--shadow-sm);\n      }\n      .action-order-item.player .action-order-number,\n      .action-order-item.teammate .action-order-number {\n        color: var(--primary-color);\n        border: 1px solid var(--primary-color);\n      }\n      .action-order-item.enemy .action-order-number {\n        color: var(--secondary-color);\n        border: 1px solid var(--secondary-color);\n      }\n      .action-order-arrow {\n        margin: 0 -2px;\n        color: var(--text-light);\n        align-self: center;\n        font-size: 12px;\n      }\n\n      .preparation-details {\n        border: none;\n        width: 100%;\n        margin: 0;\n        padding: 0;\n        color: var(--text-color);\n        font-family: var(--font-rpg);\n      }\n      .preparation-summary {\n        display: flex;\n        align-items: center;\n        width: 100%;\n        cursor: pointer;\n        font-weight: bold;\n        list-style: none;\n        outline: none;\n        transition: all 0.3s ease;\n        position: relative;\n        box-sizing: border-box;\n      }\n\n      .preparation-summary::-webkit-details-marker,\n      .preparation-summary::marker {\n        display: none;\n        content: '';\n      }\n\n      .preparation-summary::before {\n        content: '';\n        display: inline-block;\n        line-height: 1;\n        font-size: 1.1em;\n        margin-right: 6px;\n      }\n\n      .preparation-details:not([open]) &gt; .preparation-summary {\n        padding: 4px 8px 5px 8px;\n        font-size: 16px;\n        line-height: 1.2;\n        margin-bottom: 0;\n        background: var(--gradient-primary);\n        color: white;\n        border-radius: 8px;\n        border: none !important;\n        box-shadow: var(--shadow-md);\n        justify-content: flex-start;\n        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n      }\n\n      .preparation-details:not([open]) &gt; .preparation-summary:hover {\n        background: var(--gradient-secondary);\n        transform: translateY(-1px);\n        box-shadow: var(--shadow-glow);\n      }\n\n      .preparation-details[open] &gt; .preparation-summary {\n        padding: 10px 8px;\n        font-size: 18px;\n        line-height: initial;\n        margin-bottom: 5px;\n        border: 2px solid var(--primary-light);\n        border-radius: 5px;\n        background: var(--gradient-primary);\n        color: white;\n        justify-content: flex-start;\n        box-shadow: var(--shadow-glow);\n        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n        left: 1px;\n      }\n\n      .preparation-details &gt; .preparation-summary:active {\n        padding: 10px 8px;\n        font-size: 18px;\n        line-height: initial;\n        background-color: var(--primary-dark);\n        color: white;\n        box-shadow: inset 1px 1px 0px 1px rgba(255, 255, 255, 0.2), inset -1px -1px 0px 1px rgba(0, 0, 0, 0.2);\n        filter: drop-shadow(1px 1px 0px rgba(0, 0, 0, 0.3));\n        top: 1px;\n        left: 1px;\n        border: 2px solid var(--primary-dark);\n        border-radius: 5px;\n        justify-content: flex-start;\n        margin-bottom: 5px;\n      }\n\n      .preparation-details &gt; div {\n        overflow: hidden;\n        transition: max-height 0.3s ease-out;\n      }\n\n      .preparation-details[open] &gt; .preparation-summary::before,\n      .preparation-details &gt; .preparation-summary:active::before {\n        margin-right: 8px;\n      }\n      #combat-enemy-panel {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr); \n        gap: 8px;\n        max-height: 180px; \n        overflow-y: auto;\n        overflow-x: hidden;\n      }\n      #combat-title {\n        text-align: center;\n        color: var(--primary-light);\n        font-family: var(--font-rpg);\n        margin: 20px 0;\n        font-size: 18px;\n        text-shadow: 0 0 10px rgba(167, 139, 250, 0.5);\n      }\n      .status-effect {\n        cursor: help;\n        position: relative;\n      }\n      .status-effect .effect-tooltip {\n        visibility: hidden;\n        width: 180px;\n        background: rgba(0, 0, 0, 0.9);\n        color: #ffffff;\n        text-align: center;\n        border-radius: 6px;\n        padding: 6px;\n        position: absolute;\n        z-index: 999;\n        bottom: 125%;\n        left: 50%;\n        margin-left: -90px;\n        opacity: 0;\n        transition: opacity 0.3s;\n        font-size: 10px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\n        border: 1px solid var(--primary-color);\n        pointer-events: none;\n        white-space: normal;\n        word-wrap: break-word;\n        backdrop-filter: blur(10px);\n      }\n      .status-effect .effect-tooltip::after {\n        content: '';\n        position: absolute;\n        top: 100%;\n        left: 50%;\n        margin-left: -5px;\n        border-width: 5px;\n        border-style: solid;\n        border-color: rgba(0, 0, 0, 0.9) transparent transparent transparent;\n      }\n      .status-effect:hover .effect-tooltip {\n        visibility: visible;\n        opacity: 1;\n      }\n      #combat-player-actions {\n        margin: 8px;\n        padding: 8px;\n        background-color: var(--bg-color);\n        border-radius: 8px;\n        box-shadow: var(--shadow-sm);\n      }\n      .self-target-indicator {\n        position: absolute;\n        top: 5px;\n        right: 5px;\n        background-color: var(--heal-color);\n        color: white;\n        border-radius: 50%;\n        width: 18px;\n        height: 18px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 10px;\n        font-weight: bold;\n        box-shadow: var(--shadow-sm);\n        opacity: 0;\n        transition: opacity 0.3s ease;\n      }\n      .combat-entity.player.selectable .self-target-indicator {\n        opacity: 1;\n      }\n      @keyframes attack-forward {\n        0% {\n          transform: translateX(0);\n        }\n        50% {\n          transform: translateX(30px);\n        }\n        100% {\n          transform: translateX(0);\n        }\n      }\n      @keyframes attack-backward {\n        0% {\n          transform: translateX(0);\n        }\n        50% {\n          transform: translateX(-30px);\n        }\n        100% {\n          transform: translateX(0);\n        }\n      }\n      .attack-animation-forward {\n        animation: attack-forward 0.8s ease;\n      }\n      .attack-animation-backward {\n        animation: attack-backward 0.8s ease;\n      }\n      @keyframes shake {\n        0% {\n          transform: translateX(0);\n        }\n        25% {\n          transform: translateX(-12px);\n        }\n        50% {\n          transform: translateX(12px);\n        }\n        75% {\n          transform: translateX(-8px);\n        }\n        100% {\n          transform: translateX(0);\n        }\n      }\n      .shake-animation {\n        animation: shake 0.8s ease;\n      }\n      @keyframes damage-number {\n        0% {\n          opacity: 0;\n          transform: translateY(0);\n        }\n        10% {\n          opacity: 1;\n          transform: translateY(-5px);\n        }\n        80% {\n          opacity: 1;\n          transform: translateY(-25px);\n        }\n        100% {\n          opacity: 0;\n          transform: translateY(-40px);\n        }\n      }\n      .damage-number {\n        position: absolute;\n        color: var(--secondary-color);\n        font-weight: bold;\n        font-size: 16px;\n        z-index: 10;\n        pointer-events: none;\n        animation: damage-number 1.2s forwards;\n        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n      }\n      .damage-number.critical {\n        color: var(--health-color);\n        font-size: 18px;\n        text-shadow: 0 0 8px rgba(239, 68, 68, 0.6);\n      }\n      .heal-number {\n        position: absolute;\n        color: var(--heal-color);\n        font-weight: bold;\n        font-size: 16px;\n        z-index: 10;\n        pointer-events: none;\n        animation: damage-number 1.2s forwards;\n        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n      }\n      @keyframes hp-change {\n        0% {\n          opacity: 0.3;\n        }\n        50% {\n          opacity: 1;\n          background-color: #ffb3b3;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n      .hp-change-animation {\n        animation: hp-change 0.8s ease;\n      }\n      @keyframes heal-pulse {\n        0% {\n          box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);\n        }\n        70% {\n          box-shadow: 0 0 0 15px rgba(16, 185, 129, 0);\n        }\n        100% {\n          box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);\n        }\n      }\n      .heal-pulse-animation {\n        animation: heal-pulse 0.8s ease;\n      }\n      @keyframes death-flash {\n        0% {\n          opacity: 0;\n        }\n        50% {\n          opacity: 1;\n        }\n        100% {\n          opacity: 0;\n        }\n      }\n      .death-flash {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: radial-gradient(circle, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0) 70%);\n        opacity: 0;\n        animation: death-flash 1s forwards;\n        pointer-events: none;\n        z-index: 5;\n      }\n      @keyframes particle-fade {\n        0% {\n          opacity: 1;\n          transform: translateY(0) scale(1);\n        }\n        100% {\n          opacity: 0;\n          transform: translateY(-50px) scale(0);\n        }\n      }\n      .death-particle {\n        position: absolute;\n        background: rgba(255, 255, 255, 0.8);\n        border-radius: 50%;\n        pointer-events: none;\n        z-index: 6;\n        animation: particle-fade 1.5s ease-out forwards;\n      }\n      .result-extra-text {\n        margin-top: 10px;\n        margin-bottom: 10px;\n        width: 100%;\n      }\n      .result-extra-text textarea {\n        width: 100%;\n        padding: 12px;\n        border: 1px solid var(--border-color);\n        border-radius: 12px;\n        font-family: var(--font-rpg);\n        font-size: 13px;\n        resize: vertical;\n        min-height: 70px;\n        background: var(--bg-tertiary);\n        color: var(--text-color);\n        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n      .result-extra-text textarea:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.2);\n      }\n\n      /* ========================================\n         🔹 手机端响应式样式 (Mobile Responsive Styles)\n         ======================================== */\n      @media (max-width: 768px) {\n        body {\n          padding: 2px;\n          font-size: 12px;\n        }\n        .container {\n          max-width: 100%;\n          margin: 0 auto 3px;\n          border-radius: 10px;\n        }\n        .status-bar {\n          padding: 6px;\n          border-radius: 10px;\n        }\n        .status-header h2 {\n          font-size: 14px;\n        }\n        .player-status,\n        .pilots-container,\n        .teammates-status {\n          margin-bottom: 3px;\n          padding: 6px;\n          border-radius: 8px;\n        }\n        .teammates-list {\n          grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n          gap: 4px;\n          max-height: 80px;\n        }\n        .teammate-item {\n          padding: 4px;\n          border-radius: 4px;\n        }\n        .teammate-name {\n          font-size: 11px;\n          margin-bottom: 2px;\n        }\n        .hp-bar,\n        .mp-bar {\n          height: 14px;\n          margin: 0 4px;\n        }\n        .hp-text,\n        .mp-text {\n          min-width: 80px;\n          font-size: 9px;\n        }\n        .weapons-list,\n        .enemies-list {\n          grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n          gap: 4px;\n          max-height: 100px;\n        }\n        .weapon-item,\n        .enemy-item {\n          padding: 4px;\n          border-radius: 4px;\n        }\n        .weapon-name,\n        .enemy-name {\n          font-size: 10px;\n          margin-bottom: 2px;\n        }\n        .weapon-type {\n          font-size: 8px;\n          margin-bottom: 2px;\n        }\n        .weapon-stats {\n          font-size: 8px;\n          margin-top: 2px;\n        }\n        .enemy-agility,\n        .enemy-skills {\n          font-size: 8px;\n          margin-bottom: 2px;\n          padding: 6px 12px;\n        }\n        #combat-interface {\n          max-width: 100%;\n          border-radius: 10px;\n        }\n        #combat-display {\n          grid-template-columns: 1fr;\n          gap: 6px;\n          padding: 0 4px;\n        }\n        #combat-player-panel {\n          max-height: 120px;\n          order: 1;\n        }\n        #combat-enemy-panel {\n          order: 2;\n          max-height: 300px;\n          overflow-x: hidden !important;\n          overflow-y: auto !important;\n          display: grid !important;\n          grid-template-columns: 1fr !important;\n          gap: 6px;\n          padding: 4px;\n          padding-right: 8px;\n        }\n        #combat-enemy-panel .combat-entity {\n          width: 100% !important;\n          min-height: auto !important;\n          display: block !important;\n          margin-bottom: 8px !important;\n          white-space: normal;\n        }\n        .combat-entity {\n          padding: 4px;\n          margin-bottom: 3px;\n          border-radius: 6px;\n        }\n        .combat-entity.teammate {\n          padding: 3px;\n          margin-bottom: 2px;\n        }\n        .entity-name {\n          font-size: 11px;\n        }\n        .entity-header {\n          margin-bottom: 3px;\n          padding-bottom: 2px;\n        }\n        .entity-stats {\n          margin-bottom: 3px;\n        }\n        .hp-bar-container,\n        .mp-bar-container {\n          margin-bottom: 2px;\n        }\n        .hp-bar-label,\n        .mp-bar-label {\n          width: 20px;\n          margin-right: 4px;\n          font-size: 9px;\n        }\n        .hp-bar-combat,\n        .mp-bar-combat {\n          height: 12px;\n          min-width: 100px;\n        }\n        .hp-text-combat,\n        .mp-text-combat {\n          font-size: 8px;\n        }\n        /* 手机端按钮优化 */\n        .battle-button {\n          padding: 8px 16px;\n          font-size: 12px;\n          margin: 4px;\n        }\n        .attack-button,\n        .next-round-button,\n        .mid-action-button {\n          padding: 8px 12px;\n          font-size: 11px;\n          margin: 2px;\n        }\n        .weapon-button,\n        .item-button {\n          padding: 6px 8px;\n          font-size: 10px;\n          margin: 1px;\n        }\n        /* 手机端武器和丹药面板优化 */\n        .weapon-buttons,\n        .item-buttons {\n          grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n          gap: 4px;\n        }\n        /* 手机端战斗日志优化 */\n        #combat-log {\n          max-height: 150px;\n          font-size: 10px;\n        }\n        /* 手机端行动顺序优化 */\n        .action-order-display {\n          font-size: 10px;\n          padding: 4px;\n        }\n        /* 手机端结果弹窗优化 */\n        .result-modal .result-content {\n          width: 95%;\n          max-width: 350px;\n          margin: 10px;\n          padding: 15px;\n        }\n        .result-title {\n          font-size: 16px;\n        }\n        .result-summary {\n          font-size: 11px;\n        }\n        #extra-result-text {\n          font-size: 12px;\n          min-height: 60px;\n        }\n        /* 手机端折叠按钮优化 */\n        .derived-stats-section .stats-toggle-btn {\n          padding: 6px 10px;\n          font-size: 11px;\n        }\n        .stats-toggle-btn .toggle-icon {\n          font-size: 10px;\n        }\n      }\n      /* ========================================\n         🔹 手机端响应式样式结束 (Mobile Responsive Styles End)\n         ======================================== */\n    &lt;/style&gt;\n\n    &lt;script&gt;\n\n      function calculateDerivedStats(str, agi, int, vit) {\n\n        str = str || 0;\n        agi = agi || 0;\n        int = int || 0;\n        vit = vit || 0;\n        return {\n\n          hpRegen: 10 + vit + Math.floor((vit * vit) / 100),\n          mpRegen: 5 + Math.floor(int / 4),\n          actionPoints: 2 + Math.floor(vit / 20),\n\n          speed: 50 + agi * 2,\n          evasionRate: agi * 0.005,\n          damageBonus: str * 0.01,\n          physicalReduction: str * 1,\n          damageTakenRate: 50 / (50 + vit),\n          extraHitRate: agi * 0.01,\n          extraCritRate: int * 0.01,\n          baseCritMultiplier: 1.5 + int * 0.01,\n          critRateResistance: agi * 0.005 + int * 0.005,\n          critDamageResistance: str * 0.005 + int * 0.005,\n        };\n      }\n\n      function calculateFinalHitRate(weaponHitRate, attackerStats, targetStats) {\n\n        const baseHitRate = weaponHitRate / 100;\n\n        const extraHitRate = attackerStats.extraHitRate;\n\n        const targetEvasionRate = targetStats.evasionRate;\n\n        const finalHitRate = baseHitRate + extraHitRate - targetEvasionRate;\n\n        return Math.max(0, finalHitRate);\n      }\n\n      function calculateFinalCritRate(weaponCritRate, attackerStats, targetStats, finalHitRate) {\n\n        const baseCritRate = weaponCritRate / 100;\n\n        const extraCritRate = attackerStats.extraCritRate;\n\n        const overHitCritBonus = Math.max(0, finalHitRate - 1.0) * 0.5;\n\n        const targetCritResistance = targetStats.critRateResistance;\n\n        const finalCritRate = baseCritRate + extraCritRate + overHitCritBonus - targetCritResistance;\n\n        return Math.max(0, finalCritRate);\n      }\n\n      function calculateFinalCritMultiplier(attackerStats, targetStats, finalCritRate) {\n\n        const baseCritMultiplier = attackerStats.baseCritMultiplier;\n\n        const overCritDamageBonus = Math.max(0, finalCritRate - 1.0) * 0.5;\n\n        const targetCritDamageResistance = targetStats.critDamageResistance;\n\n        const finalCritMultiplier = baseCritMultiplier + overCritDamageBonus - targetCritDamageResistance;\n\n        return Math.max(1.0, finalCritMultiplier);\n      }\n\n      function calculateFinalDamage(weaponDamage, attackerStats, targetStats, isCrit = false, critMultiplier = 1.0) {\n\n        const damageBonus = attackerStats.damageBonus;\n\n        const targetDamageTakenRate = targetStats.damageTakenRate;\n\n        const targetPhysicalReduction = targetStats.physicalReduction;\n\n        let finalDamage = weaponDamage * (1 + damageBonus) * targetDamageTakenRate;\n\n        if (isCrit) {\n          finalDamage *= critMultiplier;\n        }\n\n        finalDamage -= targetPhysicalReduction;\n\n        return Math.max(0, Math.floor(finalDamage));\n      }\n\n      // 经验值系统已禁用\n      // function calculateExperienceForCharacter(characterLevel, teammateCount, defeatedEnemies) {\n      //   let totalExp = 0;\n      //   let expDetails = [];\n      //   defeatedEnemies.forEach(enemy =&gt; {\n      //     \n      //     const baseExp = (enemy.grade || 1) * 8;\n      //     \n      //     const levelDiff = (enemy.grade || 1) - characterLevel;\n      //     const levelMultiplier = Math.pow(1.2, levelDiff);\n      //     \n      //     const teamModifier = 1 / (1 + teammateCount * 0.1);\n      //     \n      //     const enemyExp = Math.floor(baseExp * levelMultiplier * teamModifier);\n      //     totalExp += enemyExp;\n      //     expDetails.push({\n      //       enemyName: enemy.name,\n      //       enemyLevel: enemy.grade || 1,\n      //       baseExp: baseExp,\n      //       levelDiff: levelDiff,\n      //       levelMultiplier: levelMultiplier.toFixed(2),\n      //       teamModifier: teamModifier.toFixed(2),\n      //       finalExp: enemyExp,\n      //     });\n      //   });\n      //   return {\n      //     totalExp: totalExp,\n      //     details: expDetails,\n      //   };\n      // }\n\n      // 经验值系统已禁用\n      // function calculateTeamExperience(player, teammates, defeatedEnemies) {\n      //   const teammateCount = teammates ? teammates.length : 0;\n      //   \n      //   const playerResult = calculateExperienceForCharacter(player.grade || 1, teammateCount, defeatedEnemies);\n      //   \n      //   const teammateResults = [];\n      //   if (teammates &amp;&amp; teammates.length &gt; 0) {\n      //     teammates.forEach(teammate =&gt; {\n      //       const teammateResult = calculateExperienceForCharacter(teammate.grade || 1, teammateCount, defeatedEnemies);\n      //       teammateResults.push({\n      //         name: teammate.name,\n      //         level: teammate.grade || 1,\n      //         exp: teammateResult.totalExp,\n      //         details: teammateResult.details,\n      //       });\n      //     });\n      //   }\n      //   return {\n      //     playerExp: playerResult.totalExp,\n      //     playerDetails: playerResult.details,\n      //     teammateResults: teammateResults,\n      //   };\n      // }\n\n      function collectBattleStatistics() {\n\n        const stats = {\n          weaponStats: [],\n          itemUsage: [],\n          killedEnemies: [],\n        };\n\n        if (battleState.weaponUsage) {\n\n          Object.entries(battleState.weaponUsage).forEach(([name, data]) =&gt; {\n            stats.weaponStats.push({\n              name: name,\n              damage: data.damage || 0,\n              kills: data.kills || 0,\n            });\n          });\n\n          stats.weaponStats.sort((a, b) =&gt; b.damage - a.damage);\n        }\n\n        if (battleState.itemUsageStats) {\n          Object.entries(battleState.itemUsageStats).forEach(([itemName, count]) =&gt; {\n            stats.itemUsage.push({\n              name: itemName,\n              count: count,\n            });\n          });\n        }\n\n        if (battleState.killedEnemies) {\n          stats.killedEnemies = [...battleState.killedEnemies];\n        }\n        return stats;\n      }\n\n      const statusDataSource = document.getElementById('status-data-source');\n      const preparationScreen = document.getElementById('preparation-screen');\n      const playerStatus = document.getElementById('player-status');\n      const pilotsContainer = document.getElementById('pilots-container');\n      const combatControls = document.getElementById('combat-controls');\n      const combatInterface = document.getElementById('combat-interface');\n      const combatPlayerPanel = document.getElementById('combat-player-panel');\n      const combatEnemyPanel = document.getElementById('combat-enemy-panel');\n      const meleeWeaponList = document.getElementById('melee-weapon-list');\n      const combatLog = document.getElementById('combat-log');\n      const resultModal = document.getElementById('result-modal');\n      const resultSummary = document.getElementById('result-summary');\n      const extraResultText = document.getElementById('extra-result-text');\n      const closeResultBtn = document.getElementById('close-result');\n      const sendResultBtn = document.getElementById('send-result');\n\n      const weaponSpecialEffects = {\n        A1: () =&gt; `伤害输出模板：攻击敌人`,\n        A2: () =&gt; `生命恢复模板：恢复HP，可选自己或队友`,\n        A3: () =&gt; `灵力恢复模板：恢复MP，可选自己或队友`,\n        A4: () =&gt; `牺牲增益模板：消耗HP获得强力增益，只能对自己使用`,\n      };\n\n      const enchantmentEffects = {\n        B1: percent =&gt; `生命窃取：攻击造成伤害的${percent}%转化为生命值`,\n        B2: (duration, value) =&gt; `减益-命中：攻击命中时，目标在接下来${duration}个回合内命中率降低${value}%`,\n        B3: (duration, value) =&gt; `增益-暴击：暴击后，你在接下来${duration}个回合内暴击率提高${value}%`,\n        B4: duration =&gt; `触发-晕眩：暴击时晕眩敌人${duration}回合`,\n        B5: (duration, damage) =&gt; `伤害-DOT：${duration}回合内每回合造成${damage}点持续伤害`,\n        B6: (chance, duration) =&gt; `几率-晕眩：${chance}%几率晕眩目标${duration}回合`,\n        B7: (chance, bonus) =&gt; `几率-额外伤害：${chance}%几率造成+${bonus}%额外伤害`,\n        B8: (duration, bonus) =&gt; `增益-受伤加深：${duration}回合内目标受到伤害+${bonus.toString().replace('%', '')}%`,\n        B9: mp =&gt; `恢复-灵力：命中后恢复${mp}点MP`,\n        B10: (duration, heal) =&gt; `恢复-生命(持续)：${duration}回合内每回合恢复${heal}点HP`,\n        B11: (str, duration) =&gt; `增益-根骨：攻击后根骨+${str}，持续${duration}回合`,\n        B12: (agi, duration) =&gt; `增益-身法：攻击后身法+${agi}，持续${duration}回合`,\n        B13: (int, duration) =&gt; `增益-神识：攻击后神识+${int}，持续${duration}回合`,\n        B14: (end, duration) =&gt; `增益-淬体：攻击后淬体+${end}，持续${duration}回合`,\n        B15: bonus =&gt; `标记-易伤：命中后施加易伤标记，下次攻击+${bonus}%额外伤害`,\n        B16: bonus =&gt; `标记-破绽：命中后施加破绽标记，下次攻击暴击率+${bonus}%`,\n        B17: bonus =&gt; `标记-死点：命中后施加死点标记，下次攻击暴击伤害+${bonus}%`,\n        B18: (stacks, damage) =&gt; `叠加-创伤：命中后施加${stacks}层创伤，每层每回合造成${damage}点伤害`,\n        B19: (stacks, bonus) =&gt; `叠加-腐蚀：命中后施加${stacks}层腐蚀，每层使受到伤害+${bonus}%`,\n        B20: shield =&gt; `护盾-固化：命中后获得${shield}点永久护盾，再次触发恢复至最大值`,\n        B21: shield =&gt; `护盾-瞬发叠加：命中后获得${shield}点临时护盾（1回合），可叠加`,\n        B22: (duration, shield) =&gt; `护盾-持续叠加：命中后${duration}回合内每回合获得${shield}点护盾，可叠加`,\n      };\nfunction parseStatusData(data) {\n  const battleData = {\n    player: {\n      name: '',\n      grade: 0, \n      hp: 0,\n      maxHp: 0,\n      hpRegen: 0, \n      mp: 0,\n      maxMp: 0,\n      mpRegen: 0,\n      agility: 0,\n      speed: 0, \n      ap: 0, \n      maxAp: 0, \n\n      weapons: [],\n      items: [],\n    },\n    teammates: [], \n    enemies: [],\n  };\n\n  const playerMatch = data.match(/\\[PR:([^\\]]+)\\]/);\n  if (playerMatch) battleData.player.name = playerMatch[1];\n\n  const gradeMatch = data.match(/\\[GR:(\\d+)\\]/);\n  if (gradeMatch) battleData.player.grade = parseInt(gradeMatch[1]);\n  const hpMatch = data.match(/\\[HP:(\\d+(?:\\.\\d+)?)\\/(\\d+(?:\\.\\d+)?)\\]/);\n  if (hpMatch) {\n    battleData.player.hp = parseFloat(hpMatch[1]);\n    battleData.player.maxHp = parseFloat(hpMatch[2]);\n  }\n  const mpMatch = data.match(/\\[MP:(\\d+(?:\\.\\d+)?)\\/(\\d+(?:\\.\\d+)?)\\]/);\n  if (mpMatch) {\n    battleData.player.mp = parseFloat(mpMatch[1]);\n    battleData.player.maxMp = parseFloat(mpMatch[2]);\n  }\n\n  const hpRegenMatch = data.match(/\\[HPRE:(\\d+(?:\\.\\d+)?)\\]/);\n  if (hpRegenMatch) battleData.player.hpRegen = parseFloat(hpRegenMatch[1]);\n  const mpRegenMatch = data.match(/\\[MPRE:(\\d+(?:\\.\\d+)?)\\]/);\n  if (mpRegenMatch) battleData.player.mpRegen = parseFloat(mpRegenMatch[1]);\n\n  const speedMatch = data.match(/\\[SD:(\\d+(?:\\.\\d+)?)\\]/);\n  if (speedMatch) battleData.player.speed = parseFloat(speedMatch[1]);\n\n  const apMatch = data.match(/\\[AP:(\\d+(?:\\.\\d+)?)\\]/);\n  if (apMatch) {\n    battleData.player.ap = parseFloat(apMatch[1]);\n    battleData.player.maxAp = parseFloat(apMatch[1]);\n  }\n\n  const strMatch = data.match(/\\[STR:(\\d+)\\]/);\n  const agiMatch = data.match(/\\[AGI:(\\d+)\\]/);\n  const intMatch = data.match(/\\[INT:(\\d+)\\]/);\n  const vitMatch = data.match(/\\[VIT:(\\d+)\\]/);\n  if (strMatch) battleData.player.str = parseInt(strMatch[1]);\n  if (agiMatch) battleData.player.agi = parseInt(agiMatch[1]);\n  if (intMatch) battleData.player.int = parseInt(intMatch[1]);\n  if (vitMatch) battleData.player.vit = parseInt(vitMatch[1]);\n\n  const str = battleData.player.str || 0;\n  const agi = battleData.player.agi || 0;\n  const int = battleData.player.int || 0;\n  const vit = battleData.player.vit || 0;\n\n  const derivedStats = calculateDerivedStats(str, agi, int, vit);\n\n  Object.assign(battleData.player, derivedStats);\n\n  battleData.player.ap = derivedStats.actionPoints;\n  battleData.player.maxAp = derivedStats.actionPoints;\n\n  const itemRegex = /\\[IT:([^,]+),(\\d+)\\]\\[P(\\d+),(\\d+(?:\\.\\d+)?)(?:,(\\d+))?\\]/g;\n  let itemMatch;\n  while ((itemMatch = itemRegex.exec(data)) !== null) {\n    const item = {\n      name: itemMatch[1],\n      count: parseInt(itemMatch[2]),\n      type: parseInt(itemMatch[3]), \n      value: parseFloat(itemMatch[4]), \n      duration: itemMatch[5] ? parseInt(itemMatch[5]) : null, \n      used: false,\n    };\n    battleData.player.items.push(item);\n  }\n\n  const weaponRegex =\n    /\\[WE:(.*?)\\]\\[ATK:(\\d+(?:\\.\\d+)?)\\]\\[Hit%:(\\d+(?:\\.\\d+)?)(?:%)?]\\[Crit%:(\\d+(?:\\.\\d+)?)(?:%)?]\\[APT:(\\d+)\\]\\[TPA:(\\d+)\\]\\[MPCost:(-?\\d+(?:\\.\\d+)?)\\](?:\\[CD:(\\d+)\\])?((?:\\[(?:EN|WN):[^\\]]+\\])*)/g;\n  let weaponMatch;\n  while ((weaponMatch = weaponRegex.exec(data)) !== null) {\n    const weapon = {\n      name: weaponMatch[1],\n      attack: parseFloat(weaponMatch[2]),\n      hitRate: parseFloat(weaponMatch[3]),\n      critRate: parseFloat(weaponMatch[4]),\n\n      attacksPerTurn: parseInt(weaponMatch[5]),\n      targetsPerAttack: parseInt(weaponMatch[6]),\n      mpCost: Math.max(0, parseFloat(weaponMatch[7])), \n      cooldown: weaponMatch[8] ? parseInt(weaponMatch[8]) : 0, \n      currentCooldown: 0, \n      codes: [],\n      used: false,\n      isHealing: false,\n    };\n\n    if (weapon.name.includes('治疗')) {\n      weapon.isHealing = true;\n    }\n\n    const codesStr = weaponMatch[9]; \n    const codeRegex = /\\[(EN|WN):([^\\]]+)\\]/g;\n    let codeMatch;\n    while ((codeMatch = codeRegex.exec(codesStr)) !== null) {\n      weapon.codes.push(`${codeMatch[1]}:${codeMatch[2]}`);\n    }\n    battleData.player.weapons.push(weapon);\n  }\n\n  const teammateRegex =\n    /\\[FRN:(.*?)\\](?:\\[FRGR:(\\d+)\\])?\\[FRHP:(\\d+(?:\\.\\d+)?)\\/(\\d+(?:\\.\\d+)?)\\]\\[FRMP:(\\d+(?:\\.\\d+)?)\\/(\\d+(?:\\.\\d+)?)\\](?:\\[FRSTR:(\\d+)\\])?(?:\\[FRAGI:(\\d+)\\])?(?:\\[FRINT:(\\d+)\\])?(?:\\[FRVIT:(\\d+)\\])?/g;\n  let teammateMatch;\n  let teammateIndex = 0;\n  while ((teammateMatch = teammateRegex.exec(data)) !== null) {\n\n    const teammate = {\n      id: teammateIndex++,\n      name: teammateMatch[1],\n      grade: teammateMatch[2] ? parseInt(teammateMatch[2]) : 1, \n      hp: parseFloat(teammateMatch[3]),\n      maxHp: parseFloat(teammateMatch[4]),\n      mp: parseFloat(teammateMatch[5]),\n      maxMp: parseFloat(teammateMatch[6]),\n\n      str: teammateMatch[7] ? parseInt(teammateMatch[7]) : 0,\n      agi: teammateMatch[8] ? parseInt(teammateMatch[8]) : 0,\n      int: teammateMatch[9] ? parseInt(teammateMatch[9]) : 0,\n      vit: teammateMatch[10] ? parseInt(teammateMatch[10]) : 0, \n      ap: 0, \n      maxAp: 0, \n      weapons: [],\n      buffs: [],\n      skillUsed: false, \n    };\n\n    const str = teammate.str || 0;\n    const agi = teammate.agi || 0;\n    const int = teammate.int || 0;\n    const vit = teammate.vit || 0;\n\n    const derivedStats = calculateDerivedStats(str, agi, int, vit);\n\n    Object.assign(teammate, derivedStats);\n\n    teammate.ap = derivedStats.actionPoints;\n    teammate.maxAp = derivedStats.actionPoints;\n\n    const startIndex = teammateMatch.index;\n    let endIndex = data.indexOf('[FRN:', startIndex + 1);\n    if (endIndex === -1) endIndex = data.length;\n    const teammateData = data.substring(startIndex, endIndex);\n\n    const weaponRegex =\n      /\\[FRWE:([^\\]]+)\\]\\[ATK:(\\d+(?:\\.\\d+)?)\\]\\[Hit%:(\\d+(?:\\.\\d+)?)(?:%)?]\\[Crit%:(\\d+(?:\\.\\d+)?)(?:%)?]\\[APT:(\\d+)\\]\\[TPA:(\\d+)\\]\\[MPCost:(-?\\d+(?:\\.\\d+)?)\\](?:\\[CD:(\\d+)\\])?((?:\\[(?:WN|EN):[^\\]]+\\])*)/g;\n    let weaponMatch;\n    while ((weaponMatch = weaponRegex.exec(teammateData)) !== null) {\n      const weapon = {\n        name: weaponMatch[1],\n        type: '神通', \n        attack: parseFloat(weaponMatch[2]),\n        hitRate: parseFloat(weaponMatch[3]),\n        critRate: parseFloat(weaponMatch[4]),\n\n        attacksPerTurn: parseInt(weaponMatch[5]),\n        targetsPerAttack: parseInt(weaponMatch[6]),\n        mpCost: Math.max(0, parseFloat(weaponMatch[7])),\n        cooldown: weaponMatch[8] ? parseInt(weaponMatch[8]) : 0, \n        currentCooldown: 0, \n        codes: [],\n        used: false,\n        isHealing: false,\n      };\n\n      if (weapon.name.includes('治疗')) {\n        weapon.isHealing = true;\n      }\n\n      const codesStr = weaponMatch[9]; \n      const codeRegex = /\\[(WN|EN):([^\\]]+)\\]/g;\n      let codeMatch;\n      while ((codeMatch = codeRegex.exec(codesStr)) !== null) {\n        weapon.codes.push(`${codeMatch[1]}:${codeMatch[2]}`);\n      }\n      teammate.weapons.push(weapon);\n    }\n    battleData.teammates.push(teammate);\n  }\n\n  const enemyBlocks = data.match(/\\[ENN:.*?\\[PN5A:[^\\]]+\\]/g);\n  if (enemyBlocks) {\n    let enemyIndex = 0;\n    enemyBlocks.forEach(block =&gt; {\n\n      const nameMatch = block.match(/\\[ENN:(.*?)\\]/);\n      const gradeMatch = block.match(/\\[ENGR:(\\d+)\\]/);\n      const hpMatch = block.match(/\\[ENHP:(\\d+(?:\\.\\d+)?)\\/(\\d+(?:\\.\\d+)?)\\]/);\n\n      const strMatch = block.match(/\\[ENSTR:(\\d+)\\]/);\n      const agiMatch = block.match(/\\[ENAGI:(\\d+)\\]/);\n      const intMatch = block.match(/\\[ENINT:(\\d+)\\]/);\n      const vitMatch = block.match(/\\[ENVIT:(\\d+)\\]/);\n      const patternMatch = block.match(/\\[PN5A:([^\\]]+)\\]/);\n      if (nameMatch &amp;&amp; hpMatch &amp;&amp; (strMatch || agiMatch || intMatch || vitMatch)) {\n        const enemy = {\n          id: enemyIndex++,\n          name: nameMatch[1],\n          grade: gradeMatch ? parseInt(gradeMatch[1]) : 1, \n          hp: parseFloat(hpMatch[1]),\n          maxHp: parseFloat(hpMatch[2]),\n          skills: [],\n          attackPattern: [],\n          nextAttackIndex: 0,\n          buffs: [],\n\n          str: strMatch ? parseInt(strMatch[1]) : 0,\n          agi: agiMatch ? parseInt(agiMatch[1]) : 0,\n          int: intMatch ? parseInt(intMatch[1]) : 0,\n          vit: vitMatch ? parseInt(vitMatch[1]) : 0,\n        };\n\n        const str = enemy.str || 0;\n        const agi = enemy.agi || 0;\n        const int = enemy.int || 0;\n        const vit = enemy.vit || 0;\n\n        const derivedStats = calculateDerivedStats(str, agi, int, vit);\n\n        Object.assign(enemy, {\n          speed: derivedStats.speed,\n          evasionRate: derivedStats.evasionRate,\n          damageBonus: derivedStats.damageBonus,\n          physicalReduction: derivedStats.physicalReduction,\n          damageTakenRate: derivedStats.damageTakenRate,\n          extraHitRate: derivedStats.extraHitRate,\n          extraCritRate: derivedStats.extraCritRate,\n          baseCritMultiplier: derivedStats.baseCritMultiplier,\n          critRateResistance: derivedStats.critRateResistance,\n          critDamageResistance: derivedStats.critDamageResistance,\n        });\n\n        const skillMatches = [\n          ...block.matchAll(\n            /\\[ENS:([^\\]]+)\\]\\[ATK:(\\d+(?:\\.\\d+)?)\\]\\[Hit%:(\\d+(?:\\.\\d+)?)(?:%)?]\\[Crit%:(\\d+(?:\\.\\d+)?)(?:%)?]\\[APT:(\\d+)\\](?:\\[TPA:(\\d+)\\])?/g,\n          ),\n        ];\n        skillMatches.forEach(match =&gt; {\n          enemy.skills.push({\n            name: match[1],\n            attack: parseFloat(match[2]),\n            hitRate: parseFloat(match[3]),\n            critRate: parseFloat(match[4]),\n            attacksPerTurn: parseInt(match[5]),\n            targetsPerAttack: match[6] ? parseInt(match[6]) : 1, \n          });\n        });\n\n        if (patternMatch) {\n          enemy.attackPattern = patternMatch[1].split(',');\n        } else if (enemy.skills.length &gt; 0) {\n\n          enemy.attackPattern = enemy.skills.map(skill =&gt; skill.name);\n        }\n        battleData.enemies.push(enemy);\n      }\n    });\n  }\n  return battleData;\n}\n\nlet battleState = {\n  isActive: false,\n  round: 1,\n  currentItemUsed: false, \n  playerBuffs: [],\n  player: null,\n  teammates: [], \n  currentTeammate: null, \n  selectedTeammates: [], \n  enemies: [],\n  selectedEnemies: [],\n  currentWeapon: null,\n  currentItem: null, \n  waitingForNextRound: false,\n  healTarget: null, \n  selfTargetMode: false, \n  lastKilledBy: null, \n  highestDamageWeapon: null, \n  currentAttackCount: 0, \n  maxAttackCount: 0, \n  attackInProgress: false, \n  itemUsageStats: {}, \n  initialEnemies: [],\n  fullCombatLog: [], \n\n  actionOrder: [], \n  currentActionIndex: 0, \n  actionsThisRound: {}, \n};\n\nconst hateSystem = {\n\n  enemyHateLists: {},\n\n  initializeEnemyHate: function (enemyId) {\n    if (!this.enemyHateLists[enemyId]) {\n      this.enemyHateLists[enemyId] = [];\n    }\n  },\n\n  addHateToEnemy: function (enemyId, targetId, targetName, hateValue) {\n    this.initializeEnemyHate(enemyId);\n\n    const existingHate = this.enemyHateLists[enemyId].find(hate =&gt; hate.targetId === targetId);\n    if (existingHate) {\n\n      existingHate.hateValue += hateValue;\n    } else {\n\n      this.enemyHateLists[enemyId].push({\n        targetId: targetId,\n        targetName: targetName,\n        hateValue: hateValue,\n      });\n    }\n\n    this.enemyHateLists[enemyId].sort((a, b) =&gt; b.hateValue - a.hateValue);\n\n  },\n\n  getEnemyTarget: function (enemyId) {\n    this.initializeEnemyHate(enemyId);\n    const hateList = this.enemyHateLists[enemyId];\n    if (!hateList || hateList.length === 0) {\n\n      return null;\n    }\n\n    return hateList[0];\n  },\n\n  getAllEnemyHateLists: function () {\n    return this.enemyHateLists;\n  },\n\n  clearEnemyHate: function (enemyId) {\n    delete this.enemyHateLists[enemyId];\n  },\n\n  clearTargetHate: function (targetId) {\n    Object.keys(this.enemyHateLists).forEach(enemyId =&gt; {\n      this.enemyHateLists[enemyId] = this.enemyHateLists[enemyId].filter(hate =&gt; hate.targetId !== targetId);\n    });\n  },\n};\n\nfunction addDamageHate(attackerId, attackerName, targetEnemyId, damage) {\n\n  const hateValue = damage;\n  hateSystem.addHateToEnemy(targetEnemyId, attackerId, attackerName, hateValue);\n}\nfunction addHealHate(healerId, healerName, healAmount) {\n\n  Object.keys(hateSystem.enemyHateLists).forEach(enemyId =&gt; {\n    hateSystem.addHateToEnemy(enemyId, healerId, healerName, healAmount);\n  });\n}\n\nfunction getEnemyTargetsByHate(enemyId, maxTargets) {\n  if (maxTargets &lt;= 0) return [];\n  const hateList = hateSystem.enemyHateLists[enemyId] || [];\n  const targets = [];\n\n  for (const hateEntry of hateList) {\n    if (targets.length &gt;= maxTargets) break;\n\n    if (hateEntry.targetId === 'player' &amp;&amp; battleState.player.hp &gt; 0) {\n      targets.push({\n        type: 'player',\n        entity: battleState.player,\n        name: battleState.player.name || 'User',\n        hateValue: hateEntry.hateValue,\n      });\n    } else {\n      const teammate = battleState.teammates.find(t =&gt; t.id === hateEntry.targetId &amp;&amp; t.hp &gt; 0);\n      if (teammate) {\n        targets.push({\n          type: 'teammate',\n          entity: teammate,\n          name: teammate.name,\n          hateValue: hateEntry.hateValue,\n        });\n      }\n    }\n  }\n\n  if (targets.length &lt; maxTargets) {\n\n    const allPossibleTargets = [];\n\n    if (battleState.player.hp &gt; 0) {\n      allPossibleTargets.push({\n        type: 'player',\n        entity: battleState.player,\n        name: battleState.player.name || 'User',\n        hateValue: 0,\n      });\n    }\n\n    battleState.teammates.forEach(teammate =&gt; {\n      if (teammate.hp &gt; 0) {\n        allPossibleTargets.push({\n          type: 'teammate',\n          entity: teammate,\n          name: teammate.name,\n          hateValue: 0,\n        });\n      }\n    });\n\n    const nonSelectedTargets = allPossibleTargets.filter(target =&gt; {\n      return !targets.some(selectedTarget =&gt; {\n        if (selectedTarget.type === 'player' &amp;&amp; target.type === 'player') {\n          return true;\n        }\n        if (selectedTarget.type === 'teammate' &amp;&amp; target.type === 'teammate') {\n          return selectedTarget.entity.id === target.entity.id;\n        }\n        return false;\n      });\n    });\n\n    const remainingSlots = maxTargets - targets.length;\n    targets.push(...nonSelectedTargets.slice(0, remainingSlots));\n  }\n  return targets;\n}\n\nlet battleData = null;\n\nasync function sendBattleResult(message) {\n  try {\n\n    if (typeof triggerSlash === 'function') {\n\n      try {\n        await triggerSlash(`/send ${message} || /trigger`);\n        return true;\n      } catch (e) {\n\n        if (window.parent &amp;&amp; typeof window.parent.sendMessageProxy === 'function') {\n          window.parent.sendMessageProxy(message.replace(/^&lt;request:|&gt;$/g, ''));\n          return true;\n        }\n      }\n    } else if (window.parent &amp;&amp; typeof window.parent.sendMessageProxy === 'function') {\n\n      window.parent.sendMessageProxy(message.replace(/^&lt;request:|&gt;$/g, ''));\n      return true;\n    } else {\n\n      const textToCopy = message.replace(/^&lt;request:|&gt;$/g, '');\n      if (navigator.clipboard &amp;&amp; window.isSecureContext) {\n\n        navigator.clipboard.writeText(textToCopy);\n      } else {\n\n        const tempInput = document.createElement('input');\n        tempInput.value = textToCopy;\n        document.body.appendChild(tempInput);\n        tempInput.select();\n        document.execCommand('copy');\n        document.body.removeChild(tempInput);\n      }\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction initializeInterface(battleData) {\n\n  if (!lazyRenderManager.shouldRenderPreparation()) {\n    return;\n  }\n  lazyRenderManager.safeUpdateInterface(() =&gt; {\n    updatePlayerStatus(battleData.player);\n    updateTeammatesStatus(battleData.teammates);\n    updateEnemiesDisplay(battleData.enemies);\n    createBattleButton();\n    combatInterface.style.display = 'none';\n    lazyRenderManager.isPreparationRendered = true;\n  }, 'preparation');\n}\n\nfunction updateTeammatesStatus(teammates) {\n  if (!teammates || teammates.length === 0) return;\n\n  if (!lazyRenderManager.shouldRenderPreparation()) {\n    return;\n  }\n\n  const teammatesDiv = document.createElement('div');\n  teammatesDiv.className = 'teammates-status';\n  teammatesDiv.innerHTML = `&lt;h3&gt;&lt;i class=\"fas fa-users\"&gt;&lt;/i&gt; 队友 (点击选择)&lt;/h3&gt;`;\n\n  const teammatesList = document.createElement('div');\n  teammatesList.className = 'teammates-list';\n\n  teammates.forEach((teammate, index) =&gt; {\n    const teammateItem = document.createElement('div');\n    teammateItem.className = 'teammate-item selectable selected'; \n    teammateItem.setAttribute('data-teammate-index', index);\n    let weaponsHtml = '';\n    if (teammate.weapons &amp;&amp; teammate.weapons.length &gt; 0) {\n      weaponsHtml = `&lt;div class=\"teammate-weapons\"&gt;\n                        &lt;h4&gt;神通&lt;/h4&gt;\n                        &lt;div class=\"weapons-list\"&gt;`;\n      teammate.weapons.forEach(weapon =&gt; {\n\n        const effectsHtml = TooltipGenerator.generateEffectCodeHtml(weapon.codes);\n        weaponsHtml += `\n                            &lt;div class=\"weapon-item\"&gt;\n                                &lt;div class=\"weapon-name\"&gt;${weapon.name}&lt;/div&gt;\n                                &lt;div class=\"weapon-stats\"&gt;\n                                    &lt;span class=\"weapon-stat\"&gt;${weapon.isHealing ? '治疗: ' : '攻击: '}${\n          weapon.attack\n        }&lt;/span&gt;\n                                    &lt;span class=\"weapon-stat\"&gt;命中: ${weapon.hitRate}%&lt;/span&gt;\n                                    &lt;span class=\"weapon-stat\"&gt;暴击: ${weapon.critRate}%&lt;/span&gt;\n                                    &lt;span class=\"weapon-stat\"&gt;次数: ${weapon.attacksPerTurn}&lt;/span&gt;\n                                    &lt;span class=\"weapon-stat\"&gt;目标: ${weapon.targetsPerAttack}&lt;/span&gt;\n                                    &lt;span class=\"weapon-stat\"&gt;MP: ${weapon.mpCost}&lt;/span&gt;\n                                    &lt;span class=\"weapon-stat\"&gt;冷却: ${weapon.cooldown || 0}回合&lt;/span&gt;\n                                &lt;/div&gt;\n                                ${effectsHtml ? `&lt;div class=\"weapon-effect-codes\"&gt;${effectsHtml}&lt;/div&gt;` : ''}\n                            &lt;/div&gt;`;\n      });\n      weaponsHtml += `&lt;/div&gt;&lt;/div&gt;`;\n    }\n    teammateItem.innerHTML = `\n                    &lt;div class=\"teammate-info\"&gt;\n                        &lt;div class=\"teammate-name\"&gt;${teammate.name}&lt;/div&gt;\n                        &lt;div class=\"teammate-hp\"&gt;\n                            &lt;div class=\"hp-label\"&gt;&lt;i class=\"fas fa-heart\" style=\"color: var(--health-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"hp-bar\"&gt;\n                                &lt;div class=\"hp-fill\" style=\"width: ${(teammate.hp / teammate.maxHp) * 100}%\"&gt;&lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"hp-text\"&gt;${teammate.hp}/${teammate.maxHp} (+${teammate.hpRegen || 0}/回合)&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"teammate-mp\"&gt;\n                            &lt;div class=\"mp-label\"&gt;&lt;i class=\"fas fa-flask\" style=\"color: var(--mana-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"mp-bar\"&gt;\n                                &lt;div class=\"mp-fill\" style=\"width: ${(teammate.mp / teammate.maxMp) * 100}%\"&gt;&lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"mp-text\"&gt;${teammate.mp}/${teammate.maxMp} (+${teammate.mpRegen}/回合)&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"teammate-ap\"&gt;\n                            &lt;div class=\"ap-label\"&gt;&lt;i class=\"fas fa-bolt\" style=\"color: var(--ap-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"ap-bar\"&gt;\n                                &lt;div class=\"ap-fill\" style=\"width: ${\n                                  teammate.maxAp &gt; 0 ? (teammate.ap / teammate.maxAp) * 100 : 0\n                                }%\"&gt;&lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"ap-text\"&gt;${teammate.ap || 0}/${teammate.maxAp || 0} 行动点&lt;/div&gt;\n                        &lt;/div&gt;\n\n                        &lt;div style=\"display: flex; gap: 3px; margin-bottom: 5px;\"&gt;\n                            &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"teammate-agility status-effect\"&gt;&lt;i class=\"fas fa-mountain\"&gt;&lt;/i&gt;${\n                                  teammate.str || 0\n                                }\n                                    &lt;span class=\"effect-tooltip\"&gt;物理伤害+生命恢复&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"teammate-agility status-effect\"&gt;&lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt;${\n                                  teammate.agi || 0\n                                }\n                                    &lt;span class=\"effect-tooltip\"&gt;速度+闪避+暴击&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"teammate-agility status-effect\"&gt;&lt;i class=\"fas fa-eye\"&gt;&lt;/i&gt;${\n                                  teammate.int || 0\n                                }\n                                    &lt;span class=\"effect-tooltip\"&gt;暴击+灵力恢复&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"teammate-agility status-effect\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt;${\n                                  teammate.vit || 0\n                                }\n                                    &lt;span class=\"effect-tooltip\"&gt;行动点+生命恢复&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    ${weaponsHtml}\n                `;\n    teammatesList.appendChild(teammateItem);\n  });\n  teammatesDiv.appendChild(teammatesList);\n\n  const playerStatus = document.getElementById('player-status');\n  if (playerStatus &amp;&amp; playerStatus.nextSibling) {\n    playerStatus.parentNode.insertBefore(teammatesDiv, playerStatus.nextSibling);\n  } else if (playerStatus) {\n    playerStatus.parentNode.appendChild(teammatesDiv);\n  }\n\n  addTeammateSelectionListeners(teammates);\n}\n\nfunction addTeammateSelectionListeners(teammates) {\n\n  battleState.selectedTeammates = [...teammates];\n\n  document.querySelectorAll('.teammate-item.selectable').forEach(teammateElement =&gt; {\n    teammateElement.addEventListener('click', function () {\n      const teammateIndex = parseInt(this.getAttribute('data-teammate-index'));\n      const teammate = teammates[teammateIndex];\n      if (!teammate) return;\n\n      const index = battleState.selectedTeammates.findIndex(t =&gt; t.id === teammate.id);\n      if (index === -1) {\n\n        battleState.selectedTeammates.push(teammate);\n        this.classList.add('selected');\n      } else {\n\n        battleState.selectedTeammates.splice(index, 1);\n        this.classList.remove('selected');\n      }\n\n      updateBattleButtonState();\n    });\n  });\n}\n\nfunction updateBattleButtonState() {\n  const startBattleBtn = document.getElementById('start-battle');\n  const quickBattleBtn = document.getElementById('quick-battle');\n\n  if (startBattleBtn &amp;&amp; quickBattleBtn) {\n\n    const selectedEnemies = document.querySelectorAll('#pilots-container .enemy-item.selected');\n    const hasSelectedEnemies = selectedEnemies.length &gt; 0;\n    const hasSelectedTeammates = battleState.selectedTeammates.length &gt; 0;\n\n    const isEnabled = hasSelectedEnemies;\n    startBattleBtn.disabled = !isEnabled;\n    quickBattleBtn.disabled = !isEnabled;\n\n    if (!hasSelectedEnemies) {\n      startBattleBtn.innerHTML = '&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 请选择敌人';\n      quickBattleBtn.innerHTML = '&lt;i class=\"fas fa-forward\"&gt;&lt;/i&gt; 请选择敌人';\n    } else if (!hasSelectedTeammates) {\n      startBattleBtn.innerHTML = '&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 单人战斗';\n      quickBattleBtn.innerHTML = '&lt;i class=\"fas fa-forward\"&gt;&lt;/i&gt; 单人快速战斗';\n    } else {\n      startBattleBtn.innerHTML = '&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 进入战斗';\n      quickBattleBtn.innerHTML = '&lt;i class=\"fas fa-forward\"&gt;&lt;/i&gt; 快速战斗';\n    }\n  }\n}\n\nfunction updatePlayerStatus(player) {\n\n  if (!lazyRenderManager.shouldRenderPreparation()) {\n    return;\n  }\n  let html = `\n                &lt;div class=\"player-info\"&gt;\n                    &lt;div class=\"player-name\"&gt;${player.name || 'User'}&lt;/div&gt;\n                    &lt;div class=\"player-hp\"&gt;\n                        &lt;div class=\"hp-label\"&gt;&lt;i class=\"fas fa-heart\" style=\"color: var(--health-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                        &lt;div class=\"hp-bar\"&gt;\n                            &lt;div class=\"hp-fill\" style=\"width: ${(player.hp / player.maxHp) * 100}%\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"hp-text\"&gt;${player.hp}/${player.maxHp} (+${player.hpRegen || 0}/回合)&lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"player-mp\"&gt;\n                        &lt;div class=\"mp-label\"&gt;&lt;i class=\"fas fa-flask\" style=\"color: var(--mana-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                        &lt;div class=\"mp-bar\"&gt;\n                            &lt;div class=\"mp-fill\" style=\"width: ${(player.mp / player.maxMp) * 100}%\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"mp-text\"&gt;${player.mp}/${player.maxMp} (+${player.mpRegen}/回合)&lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"player-ap\"&gt;\n                        &lt;div class=\"ap-label\"&gt;&lt;i class=\"fas fa-bolt\" style=\"color: var(--primary-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                        &lt;div class=\"ap-bar\"&gt;\n                            &lt;div class=\"ap-fill\" style=\"width: ${\n                              player.maxAp &gt; 0 ? (player.ap / player.maxAp) * 100 : 0\n                            }%\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"ap-text\"&gt;${player.ap || 0}/${player.maxAp || 0} 行动点&lt;/div&gt;\n                    &lt;/div&gt;\n\n                    &lt;div style=\"display: flex; gap: 8px; margin-bottom: 8px;\"&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-mountain\"&gt;&lt;/i&gt;根骨: ${\n                              player.str || 0\n                            }\n                                &lt;span class=\"effect-tooltip\"&gt;物理伤害+生命恢复&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt;身法: ${\n                              player.agi || 0\n                            }\n                                &lt;span class=\"effect-tooltip\"&gt;速度+闪避+暴击&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-eye\"&gt;&lt;/i&gt;神识: ${\n                              player.int || 0\n                            }\n                                &lt;span class=\"effect-tooltip\"&gt;暴击+灵力恢复&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt;淬体: ${\n                              player.vit || 0\n                            }\n                                &lt;span class=\"effect-tooltip\"&gt;行动点+生命恢复&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n\n                    &lt;div style=\"display: flex; gap: 8px; flex-wrap: wrap;\"&gt;\n                        ${(() =&gt; {\n\n                          const derivedStats = calculateDerivedStats(\n                            player.str || 0,\n                            player.agi || 0,\n                            player.int || 0,\n                            player.vit || 0,\n                          );\n                          return `\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-tachometer-alt\"&gt;&lt;/i&gt;速度: ${\n                              derivedStats.speed\n                            }\n                                &lt;span class=\"effect-tooltip\"&gt;行动速度&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-shoe-prints\"&gt;&lt;/i&gt;闪避率: ${(\n                              derivedStats.evasionRate * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;躲避攻击几率&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-stats status-effect\"&gt;&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt;伤害加成: +${(\n                              derivedStats.damageBonus * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;攻击伤害加成&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt;减伤值: ${\n                              derivedStats.physicalReduction\n                            }\n                                &lt;span class=\"effect-tooltip\"&gt;物理伤害减免&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-heart-broken\"&gt;&lt;/i&gt;承伤率: ${(\n                              derivedStats.damageTakenRate * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;受到伤害比例&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-crosshairs\"&gt;&lt;/i&gt;额外命中: +${(\n                              derivedStats.extraHitRate * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;额外命中率&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-stats status-effect\"&gt;&lt;i class=\"fas fa-star\"&gt;&lt;/i&gt;额外暴击: +${(\n                              derivedStats.extraCritRate * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;额外暴击率&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-stats status-effect\"&gt;&lt;i class=\"fas fa-fire\"&gt;&lt;/i&gt;暴击倍率: ${(\n                              derivedStats.baseCritMultiplier * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;暴击伤害倍率&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-shield\"&gt;&lt;/i&gt;暴击抗性: ${(\n                              derivedStats.critRateResistance * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;暴击率抵抗&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"tooltip\"&gt;\n                            &lt;div class=\"player-agility status-effect\"&gt;&lt;i class=\"fas fa-shield-virus\"&gt;&lt;/i&gt;暴伤抗性: ${(\n                              derivedStats.critDamageResistance * 100\n                            ).toFixed(1)}%\n                                &lt;span class=\"effect-tooltip\"&gt;暴击伤害抵抗&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                          `;\n                        })()}\n                    &lt;/div&gt;\n        &lt;/div&gt;`;\n\n  if (player.items &amp;&amp; player.items.length &gt; 0) {\n    html += `\n        &lt;div class=\"player-items\"&gt;\n            &lt;h3&gt;&lt;i class=\"fas fa-pills\"&gt;&lt;/i&gt; 丹药&lt;/h3&gt;\n            &lt;div class=\"weapons-list\"&gt;`;\n    player.items.forEach(item =&gt; {\n      let effectText = '';\n      switch (item.type) {\n        case 1: \n          effectText = `恢复 ${item.value} 点生命值`;\n          break;\n        case 2: \n          effectText = `恢复 ${item.value} 点灵力值`;\n          break;\n        case 3: \n          effectText = `根骨+${item.value}，持续${item.duration}回合`;\n          break;\n        case 4: \n          effectText = `身法+${item.value}，持续${item.duration}回合`;\n          break;\n        case 5: \n          effectText = `神识+${item.value}，持续${item.duration}回合`;\n          break;\n        case 6: \n          effectText = `淬体+${item.value}，持续${item.duration}回合`;\n          break;\n        default:\n          effectText = '未知效果';\n      }\n      html += `\n                &lt;div class=\"weapon-item\"&gt;\n                    &lt;div class=\"weapon-name\"&gt;${item.name} &lt;span style=\"float: right;\"&gt;x${item.count}&lt;/span&gt;&lt;/div&gt;\n                    &lt;div class=\"weapon-type\"&gt;${effectText}&lt;/div&gt;\n                &lt;/div&gt;`;\n    });\n    html += `&lt;/div&gt;&lt;/div&gt;`;\n  }\n  html += `\n                &lt;div class=\"player-weapons\"&gt;\n                    &lt;h3&gt;&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 神通&lt;/h3&gt;\n                    &lt;div class=\"weapons-list\"&gt;`;\n  player.weapons.forEach(weapon =&gt; {\n\n    const effectsHtml = TooltipGenerator.generateEffectCodeHtml(weapon.codes);\n    html += `\n                    &lt;div class=\"weapon-item\"&gt;\n                        &lt;div class=\"weapon-name\"&gt;${weapon.name}&lt;/div&gt;\n                        &lt;div class=\"weapon-type\"&gt;神通&lt;/div&gt;\n                        &lt;div class=\"weapon-stats\"&gt;\n                            &lt;span class=\"weapon-stat\"&gt;${weapon.isHealing ? '治疗: ' : '攻击: '}${weapon.attack}&lt;/span&gt;\n                            &lt;span class=\"weapon-stat\"&gt;命中: ${weapon.hitRate}%&lt;/span&gt;\n                            &lt;span class=\"weapon-stat\"&gt;暴击: ${weapon.critRate}%&lt;/span&gt;\n                            &lt;span class=\"weapon-stat\"&gt;次数: ${weapon.attacksPerTurn}&lt;/span&gt;\n                            &lt;span class=\"weapon-stat\"&gt;目标: ${weapon.targetsPerAttack}&lt;/span&gt;\n                            &lt;span class=\"weapon-stat\"&gt;MP: ${weapon.mpCost}&lt;/span&gt;\n                            &lt;span class=\"weapon-stat\"&gt;冷却: ${weapon.cooldown || 0}回合&lt;/span&gt;\n                            ${effectsHtml}\n                        &lt;/div&gt;\n                    &lt;/div&gt;`;\n  });\n  html += `&lt;/div&gt;&lt;/div&gt;`;\n  playerStatus.innerHTML = html;\n}\n\nfunction updateEnemiesDisplay(enemies) {\n\n  if (!lazyRenderManager.shouldRenderPreparation()) {\n    return;\n  }\n  let html = `&lt;h3&gt;&lt;i class=\"fas fa-skull-crossbones\"&gt;&lt;/i&gt; 敌人 (点击选择)&lt;/h3&gt;&lt;div class=\"enemies-list\"&gt;`;\n  enemies.forEach((enemy, index) =&gt; {\n    html += `\n                    &lt;div class=\"enemy-item selected\" data-enemy-index=\"${index}\"&gt;\n                        &lt;div class=\"enemy-name\"&gt;${enemy.name}&lt;/div&gt;\n                        &lt;div class=\"enemy-hp\"&gt;\n                            &lt;div class=\"hp-label\"&gt;&lt;i class=\"fas fa-heart\" style=\"color: var(--health-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"hp-bar\"&gt;\n                                &lt;div class=\"hp-fill\" style=\"width: ${(enemy.hp / enemy.maxHp) * 100}%\"&gt;&lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"hp-text\"&gt;${enemy.hp}/${enemy.maxHp}&lt;/div&gt;\n                        &lt;/div&gt;\n\n                        &lt;div style=\"display: flex; gap: 3px; margin-bottom: 5px;\"&gt;\n                            ${\n                              enemy.str !== undefined\n                                ? `\n                        &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"enemy-agility status-effect\"&gt;&lt;i class=\"fas fa-mountain\"&gt;&lt;/i&gt;${enemy.str}\n                                    &lt;span class=\"effect-tooltip\"&gt;根骨属性，影响攻击力&lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;/div&gt;\n                            `\n                                : ''\n                            }\n                            ${\n                              enemy.agi !== undefined\n                                ? `\n                            &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"enemy-agility status-effect\"&gt;&lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt;${enemy.agi}\n                                    &lt;span class=\"effect-tooltip\"&gt;身法属性，影响闪避率和暴击率&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            `\n                                : ''\n                            }\n                            ${\n                              enemy.int !== undefined\n                                ? `\n                            &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"enemy-agility status-effect\"&gt;&lt;i class=\"fas fa-eye\"&gt;&lt;/i&gt;${enemy.int}\n                                    &lt;span class=\"effect-tooltip\"&gt;神识属性，影响暴击率和暴击伤害&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            `\n                                : ''\n                            }\n                            ${\n                              enemy.vit !== undefined\n                                ? `\n                            &lt;div class=\"tooltip\"&gt;\n                                &lt;div class=\"enemy-agility status-effect\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt;${enemy.vit}\n                                    &lt;span class=\"effect-tooltip\"&gt;体力属性，影响生命值和行动点&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            `\n                                : ''\n                            }\n                        &lt;/div&gt;\n                        &lt;div class=\"enemy-skills status-effect\"&gt;\n                            &lt;i class=\"fas fa-bolt\"&gt;&lt;/i&gt;下次行动: ${enemy.attackPattern[enemy.nextAttackIndex] || '未知'}\n                            &lt;span class=\"effect-tooltip\"&gt;敌人下一回合的技能&lt;/span&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;`;\n  });\n  html += `&lt;/div&gt;`;\n  pilotsContainer.innerHTML = html;\n\n  document.querySelectorAll('#pilots-container .enemy-item').forEach(item =&gt; {\n    item.addEventListener('click', () =&gt; {\n      item.classList.toggle('selected');\n\n      updateBattleButtonState();\n    });\n  });\n}\n\nfunction createBattleButton() {\n\n  if (!lazyRenderManager.shouldRenderPreparation()) {\n    return;\n  }\n  combatControls.innerHTML = `\n                &lt;div style=\"display: flex; justify-content: center; gap: 10px;\"&gt;\n                    &lt;button id=\"start-battle\" class=\"battle-button\"&gt;&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 进入战斗&lt;/button&gt;\n                    &lt;button id=\"quick-battle\" class=\"battle-button\" style=\"background-color: var(--secondary-color);\"&gt;&lt;i class=\"fas fa-forward\"&gt;&lt;/i&gt; 快速战斗&lt;/button&gt;\n                &lt;/div&gt;`;\n  document.getElementById('start-battle').addEventListener('click', startBattle);\n  document.getElementById('quick-battle').addEventListener('click', startQuickBattle);\n\n  updateBattleButtonState();\n}\n\n      function startQuickBattle() {\n        const data = statusDataSource.textContent;\n        const fullBattleData = parseStatusData(data);\n\n        const selectedEnemyElements = document.querySelectorAll('#pilots-container .enemy-item.selected');\n        const selectedEnemyIndices = Array.from(selectedEnemyElements).map(el =&gt;\n          parseInt(el.getAttribute('data-enemy-index')),\n        );\n        const selectedEnemies = fullBattleData.enemies.filter((enemy, index) =&gt; selectedEnemyIndices.includes(index));\n        if (selectedEnemies.length === 0) {\n          alert('请至少选择一个敌人进行战斗！');\n          return;\n        }\n\n        const selectedTeammates = battleState.selectedTeammates || [];\n\n        battleState = {\n          round: 1,\n          player: JSON.parse(JSON.stringify(fullBattleData.player)),\n          teammates: JSON.parse(JSON.stringify(selectedTeammates)), \n          enemies: JSON.parse(JSON.stringify(selectedEnemies)),\n          playerBuffs: [],\n          weaponUsage: {}, \n          itemUsageStats: {}, \n          killedEnemies: [], \n          highestDamageWeapon: { name: '', damage: 0 },\n          lastKilledBy: null,\n          initialEnemies: JSON.parse(JSON.stringify(selectedEnemies)),\n        };\n\n        showQuickBattleResults(simulateQuickBattle());\n      }\n\n      function simulateQuickBattle() {\n        const MAX_ROUNDS = 30; \n        const result = {\n          isVictory: false,\n          rounds: 1,\n          finalPlayerHP: battleState.player.hp,\n          finalPlayerMP: battleState.player.mp,\n        };\n\n        while (battleState.player.hp &gt; 0 &amp;&amp; battleState.enemies.length &gt; 0 &amp;&amp; battleState.round &lt;= MAX_ROUNDS) {\n\n          simulatePlayerTurn();\n\n          if (StateValidator.areAllEnemiesDead()) {\n            result.isVictory = true;\n            break;\n          }\n          simulateEnemyTurn();\n          if (StateValidator.isPlayerDead()) break;\n\n          simulateEndOfRound();\n          battleState.round++;\n        }\n\n        result.rounds = battleState.round;\n        result.finalPlayerHP = battleState.player.hp;\n        result.finalPlayerMP = battleState.player.mp;\n        return result;\n      }\n\n      function simulatePlayerTurn() {\n\n        if (battleState.player.hp &lt; battleState.player.maxHp * 0.3 &amp;&amp; tryUseHealingItem()) {\n          return true;\n        }\n\n        if (battleState.player.mp &lt; battleState.player.maxMp * 0.2 &amp;&amp; tryUseManaItem()) {\n          return true;\n        }\n\n        const availableWeapons = battleState.player.weapons.filter(w =&gt; !w.used);\n        if (availableWeapons.length === 0) {\n          return false;\n        }\n\n        const attackWeapons = availableWeapons.filter(weapon =&gt; {\n          const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n          return weaponTemplate !== 'A2' &amp;&amp; weaponTemplate !== 'A3' &amp;&amp; weaponTemplate !== 'A4';\n        });\n\n        if (attackWeapons.length === 0) {\n          const healingWeapons = availableWeapons.filter(weapon =&gt; {\n            const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n            return weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4';\n          });\n          if (healingWeapons.length &gt; 0) {\n\n            const weapon = healingWeapons[0];\n            if (battleState.player.mp &gt;= weapon.mpCost) {\n              battleState.player.mp -= weapon.mpCost;\n              const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n              if (weaponTemplate === 'A2') {\n                battleState.player.hp = Math.min(battleState.player.hp + weapon.attack, battleState.player.maxHp);\n              } else if (weaponTemplate === 'A3') {\n                battleState.player.mp = Math.min(battleState.player.mp + weapon.attack, battleState.player.maxMp);\n              } else if (weaponTemplate === 'A4') {\n\n                battleState.player.hp = Math.min(battleState.player.hp + weapon.attack, battleState.player.maxHp);\n\n              }\n              weapon.used = true;\n              return true;\n            }\n          }\n          return false;\n        }\n\n        attackWeapons.sort((a, b) =&gt; {\n\n          const aDamage = calculatePotentialDamage(a);\n          const bDamage = calculatePotentialDamage(b);\n          return bDamage - aDamage;\n        });\n        const weapon = attackWeapons[0];\n\n        if (battleState.player.mp &lt; weapon.mpCost) {\n          weapon.used = true;\n          return simulatePlayerTurn(); \n        }\n\n        if (!battleState.weaponUsage[weapon.name]) {\n          battleState.weaponUsage[weapon.name] = {\n            name: weapon.name,\n            damage: 0,\n            kills: 0,\n          };\n        }\n\n        if (weapon.isHealing) {\n          const healAmount = weapon.attack;\n          const oldHp = battleState.player.hp;\n          battleState.player.hp = Math.min(battleState.player.hp + healAmount, battleState.player.maxHp);\n          weapon.used = true;\n          return true;\n        }\n\n        let targets = selectTargets(weapon);\n\n        if (targets.length === 0) {\n          weapon.used = true;\n          return true;\n        }\n\n        for (let attackCount = 0; attackCount &lt; weapon.attacksPerTurn; attackCount++) {\n\n          if (battleState.player.mp &lt; weapon.mpCost) {\n\n            break;\n          }\n\n          for (const target of targets) {\n\n            if (!StateValidator.isValidTarget(target)) continue;\n\n            const attackerStats = {\n              extraHitRate: (battleState.player.agi || 0) * 0.01,\n              extraCritRate: (battleState.player.int || 0) * 0.01,\n              baseCritMultiplier: 1.5 + (battleState.player.int || 0) * 0.01,\n            };\n            const targetStats = {\n              evasionRate: (target.agi || 0) * 0.005,\n              critRateResistance: (target.agi || 0) * 0.005 + (target.int || 0) * 0.005,\n            };\n            const finalHitRate = calculateFinalHitRate(weapon.hitRate, attackerStats, targetStats);\n            const hitRoll = Math.random();\n\n            if (hitRoll &lt;= Math.min(1.0, finalHitRate)) {\n\n              const finalCritRate = calculateFinalCritRate(weapon.critRate, attackerStats, targetStats, finalHitRate);\n              const critRoll = Math.random();\n\n              const isCrit = critRoll &lt;= Math.min(1.0, finalCritRate);\n\n              let damage = calculateDamage(\n                weapon,\n                target,\n                isCrit,\n                battleState.player.str || 0,\n                battleState.player.int || 0,\n              );\n\n              battleState.weaponUsage[weapon.name].damage += damage;\n\n              if (damage &gt; (battleState.highestDamageWeapon.damage || 0)) {\n                battleState.highestDamageWeapon.name = weapon.name;\n                battleState.highestDamageWeapon.damage = damage;\n              }\n\n              target.hp -= damage;\n\n              if (StateValidator.isDead(target)) {\n\n                battleState.weaponUsage[weapon.name].kills = (battleState.weaponUsage[weapon.name].kills || 0) + 1;\n                battleState.killedEnemies.push(target.name);\n\n                battleState.enemies = battleState.enemies.filter(e =&gt; e !== target);\n\n                if (StateValidator.areAllEnemiesDead()) {\n                  break;\n                }\n              }\n            }\n          }\n\n          if (StateValidator.areAllEnemiesDead()) {\n            break;\n          }\n\n          if (targets.length &gt; battleState.enemies.length) {\n            targets = selectTargets(weapon);\n\n            if (targets.length === 0) {\n              break;\n            }\n          }\n\n          battleState.player.mp = Math.max(0, battleState.player.mp - weapon.mpCost);\n        }\n\n        weapon.used = true;\n        return true;\n      }\n\n      function calculatePotentialDamage(weapon) {\n\n        const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n\n        if (weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4') {\n          return 0;\n        }\n        const baseDamage = weapon.attack * weapon.attacksPerTurn * weapon.targetsPerAttack;\n\n        const critFactor = 1 + (weapon.critRate / 100) * 0.5; \n        return baseDamage * critFactor;\n      }\n\n      function selectTargets(weapon) {\n\n        const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n        if (weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4') {\n          return []; \n        }\n\n        return weapon.targetsPerAttack &gt; 1\n          ? battleState.enemies.slice(0, weapon.targetsPerAttack)\n          : [\n              battleState.enemies.reduce(\n                (lowest, current) =&gt; (current.hp &lt; lowest.hp ? current : lowest),\n                battleState.enemies[0],\n              ),\n            ];\n      }\n\n      function calculateDamage(weapon, target, isCrit, attackerStr = 0, attackerInt = 0) {\n\n        const attackerStats = {\n          damageBonus: attackerStr * 0.01,\n          extraCritRate: 0, \n          baseCritMultiplier: 1.5 + attackerInt * 0.01, \n        };\n        const targetStats = {\n          damageTakenRate: 50 / (50 + (target.vit || 0)),\n          physicalReduction: (target.str || 0) * 1,\n          critDamageResistance: 0, \n        };\n\n        const finalCritMultiplier = isCrit\n          ? Math.max(1.0, attackerStats.baseCritMultiplier - targetStats.critDamageResistance)\n          : 1.0;\n        return calculateFinalDamage(weapon.attack, attackerStats, targetStats, isCrit, finalCritMultiplier);\n      }\n\n      function tryUseHealingItem() {\n        if (!battleState.player.items || battleState.player.items.length === 0) {\n          return false;\n        }\n\n        const healingItem = battleState.player.items.find(item =&gt; item.type === 1 &amp;&amp; item.count &gt; 0);\n        if (healingItem) {\n\n          const oldHp = battleState.player.hp;\n          battleState.player.hp = Math.min(battleState.player.hp + healingItem.value, battleState.player.maxHp);\n\n          if (!battleState.itemUsageStats[healingItem.name]) {\n            battleState.itemUsageStats[healingItem.name] = 0;\n          }\n          battleState.itemUsageStats[healingItem.name]++;\n\n          healingItem.count--;\n          return true;\n        }\n        return false;\n      }\n\n      function tryUseManaItem() {\n        if (!battleState.player.items || battleState.player.items.length === 0) {\n          return false;\n        }\n\n        const mpItem = battleState.player.items.find(item =&gt; item.type === 2 &amp;&amp; item.count &gt; 0);\n        if (mpItem) {\n\n          const oldMp = battleState.player.mp;\n          battleState.player.mp = Math.min(battleState.player.mp + mpItem.value, battleState.player.maxMp);\n\n          if (!battleState.itemUsageStats[mpItem.name]) {\n            battleState.itemUsageStats[mpItem.name] = 0;\n          }\n          battleState.itemUsageStats[mpItem.name]++;\n\n          mpItem.count--;\n          return true;\n        }\n        return false;\n      }\n\n      function simulateEnemyTurn() {\n        for (const enemy of battleState.enemies) {\n\n          const attackName = enemy.attackPattern[enemy.nextAttackIndex];\n          const skill = enemy.skills.find(s =&gt; s.name === attackName);\n          if (skill) {\n\n            const currentPlayerStats = getPlayerActualStats();\n            const enemyStats = {\n              extraHitRate: (enemy.agi || 0) * 0.01,\n              extraCritRate: (enemy.int || 0) * 0.01,\n              baseCritMultiplier: 1.5 + (enemy.int || 0) * 0.01,\n              damageBonus: (enemy.str || 0) * 0.01,\n            };\n            const finalHitRate = calculateFinalHitRate(skill.hitRate, enemyStats, currentPlayerStats);\n            const hitRoll = Math.random();\n\n            if (hitRoll &lt;= Math.min(1.0, finalHitRate)) {\n\n              const finalCritRate = calculateFinalCritRate(\n                skill.critRate,\n                enemyStats,\n                currentPlayerStats,\n                finalHitRate,\n              );\n              const critRoll = Math.random();\n\n              const isCrit = critRoll &lt;= Math.min(1.0, finalCritRate);\n\n              const finalCritMultiplier = isCrit\n                ? calculateFinalCritMultiplier(enemyStats, currentPlayerStats, finalCritRate)\n                : 1.0;\n\n              let damage = calculateFinalDamage(\n                skill.attack,\n                enemyStats,\n                currentPlayerStats,\n                isCrit,\n                finalCritMultiplier,\n              );\n\n              battleState.player.hp -= damage;\n\n              if (StateValidator.isPlayerDead()) {\n                battleState.lastKilledBy = skill.name;\n                return;\n              }\n            }\n\n            enemy.nextAttackIndex = (enemy.nextAttackIndex + 1) % enemy.attackPattern.length;\n          }\n        }\n      }\n\n      function simulateEndOfRound() {\n\n        battleState.player.weapons.forEach(weapon =&gt; {\n          weapon.used = false;\n        });\n\n        battleState.player.hp = Math.min(\n          battleState.player.hp + (battleState.player.hpRegen || 0),\n          battleState.player.maxHp,\n        );\n\n        battleState.player.mp = Math.min(battleState.player.mp + battleState.player.mpRegen, battleState.player.maxMp);\n      }\n\n      function showQuickBattleResults(result) {\n\n        const stats = collectBattleStatistics();\n\n        let summaryHtml = '';\n        if (result.isVictory) {\n          summaryHtml += `&lt;h3 class=\"victory\"&gt;战斗胜利！&lt;/h3&gt;`;\n          summaryHtml += `&lt;p&gt;用时 ${result.rounds} 回合&lt;/p&gt;`;\n          summaryHtml += `&lt;p&gt;剩余HP: ${result.finalPlayerHP}/${battleState.player.maxHp}&lt;/p&gt;`;\n          summaryHtml += `&lt;p&gt;剩余MP: ${result.finalPlayerMP}/${battleState.player.maxMp}&lt;/p&gt;`;\n\n          if (battleState.killedEnemies &amp;&amp; battleState.killedEnemies.length &gt; 0) {\n            summaryHtml += `&lt;p&gt;击败的敌人: ${battleState.killedEnemies.join('、')}&lt;/p&gt;`;\n\n            const defeatedEnemies = battleState.initialEnemies.filter(enemy =&gt;\n              battleState.killedEnemies.includes(enemy.name),\n            );\n            // 经验值系统已禁用\n            // const expResult = calculateTeamExperience(battleState.player, battleState.teammates, defeatedEnemies);\n            // summaryHtml += `&lt;div style=\"margin-top: 15px; padding: 10px; background: rgba(6, 182, 212, 0.1); border-radius: 8px; border: 1px solid var(--accent-color);\"&gt;`;\n            // summaryHtml += `&lt;h4 style=\"color: var(--accent-color); margin: 0 0 10px 0;\"&gt;📈 经验值获得&lt;/h4&gt;`;\n            // summaryHtml += `&lt;p&gt;&lt;strong&gt;${battleState.player.name || 'User'}&lt;/strong&gt; (等级${\n            //   battleState.player.grade || 1\n            // }) 获得经验值: &lt;span style=\"color: var(--accent-color); font-weight: bold;\"&gt;${\n            //   expResult.playerExp\n            // } EXP&lt;/span&gt;&lt;/p&gt;`;\n            // if (expResult.teammateResults &amp;&amp; expResult.teammateResults.length &gt; 0) {\n            //   expResult.teammateResults.forEach(teammate =&gt; {\n            //     summaryHtml += `&lt;p&gt;&lt;strong&gt;${teammate.name}&lt;/strong&gt; (等级${teammate.level}) 获得经验值: &lt;span style=\"color: var(--accent-color); font-weight: bold;\"&gt;${teammate.exp} EXP&lt;/span&gt;&lt;/p&gt;`;\n            //   });\n            // }\n            // summaryHtml += `&lt;/div&gt;`;\n          }\n        } else {\n          summaryHtml += `&lt;h3 class=\"defeat\"&gt;战斗失败！&lt;/h3&gt;`;\n          summaryHtml += `&lt;p&gt;坚持了 ${result.rounds} 回合&lt;/p&gt;`;\n          if (battleState.lastKilledBy) {\n            summaryHtml += `&lt;p&gt;被 ${battleState.lastKilledBy} 击败&lt;/p&gt;`;\n          }\n\n          if (battleState.killedEnemies &amp;&amp; battleState.killedEnemies.length &gt; 0) {\n            summaryHtml += `&lt;p&gt;击败的敌人: ${battleState.killedEnemies.join('、')}&lt;/p&gt;`;\n          }\n        }\n\n        if (stats.weaponStats.length &gt; 0) {\n          summaryHtml += `&lt;h4 style=\"margin-top: 10px;\"&gt;武器统计:&lt;/h4&gt;`;\n          summaryHtml += `&lt;ul style=\"text-align: left; padding-left: 20px;\"&gt;`;\n          stats.weaponStats.forEach(weapon =&gt; {\n            summaryHtml += `&lt;li&gt;${weapon.name}: 造成 ${weapon.damage} 点伤害`;\n            if (weapon.kills &gt; 0) {\n              summaryHtml += `，击败 ${weapon.kills} 个敌人`;\n            }\n            summaryHtml += `&lt;/li&gt;`;\n          });\n          summaryHtml += `&lt;/ul&gt;`;\n        }\n\n        if (stats.itemUsage &amp;&amp; stats.itemUsage.length &gt; 0) {\n          summaryHtml += `&lt;h4 style=\"margin-top: 10px;\"&gt;丹药使用:&lt;/h4&gt;`;\n          summaryHtml += `&lt;ul style=\"text-align: left; padding-left: 20px;\"&gt;`;\n          stats.itemUsage.forEach(item =&gt; {\n          summaryHtml += `&lt;li&gt;${item.name}: 使用了 ${item.count} 个&lt;/li&gt;`;\n        });\n        summaryHtml += `&lt;/ul&gt;`;\n      }\n\n      resultSummary.innerHTML = summaryHtml;\n      resultModal.style.display = 'flex';\n\n      closeResultBtn.removeEventListener('click', closeResultHandler);\n      sendResultBtn.removeEventListener('click', sendResultHandler);\n\n      closeResultBtn.addEventListener('click', closeResultHandler);\n\n      sendResultBtn.addEventListener('click', sendResultHandler);\n    }\n      function closeResultHandler() {\n        resultModal.style.display = 'none';\n\n        extraResultText.value = '';\n\n        battleState.isActive = false;\n        battleState.attackInProgress = false;\n      }\n\n      function sendResultHandler() {\n\n        const extraText = extraResultText.value.trim();\n\n        let message = '';\n        if (StateValidator.isVictory()) {\n\n          const allEnemyNames = battleState.initialEnemies.map(enemy =&gt; enemy.name).join('、');\n\n          const stats = collectBattleStatistics();\n          let weaponDamageStats = '';\n          if (stats.weaponStats.length &gt; 0) {\n            weaponDamageStats =\n              '，武器伤害统计: ' +\n              stats.weaponStats\n                .map(\n                  weapon =&gt;\n                    `${weapon.name}伤害为${weapon.damage}${weapon.kills &gt; 0 ? `(击败了${weapon.kills}个敌人)` : ''}`,\n                )\n                .join(', ');\n          }\n\n          let itemUsageStats = '';\n          if (stats.itemUsage &amp;&amp; stats.itemUsage.length &gt; 0) {\n            itemUsageStats = '，使用丹药: ' + stats.itemUsage.map(item =&gt; `${item.name} ${item.count}个`).join('、');\n          }\n\n          let playerStatus = `李白血量${battleState.player.hp}/${battleState.player.maxHp}，MP值${battleState.player.mp}/${battleState.player.maxMp}`;\n\n          let teammatesStatus = '';\n          if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n            teammatesStatus =\n              '，队友状态: ' +\n              battleState.teammates\n                .map(\n                  teammate =&gt;\n                    `${teammate.name}血量${teammate.hp}/${teammate.maxHp}，MP值${teammate.mp}/${teammate.maxMp}`,\n                )\n                .join('；');\n          }\n\n          let expInfo = '';\n          // 经验值系统已禁用\n          // if (battleState.killedEnemies &amp;&amp; battleState.killedEnemies.length &gt; 0) {\n          //   const defeatedEnemies = battleState.initialEnemies.filter(enemy =&gt;\n          //     battleState.killedEnemies.includes(enemy.name),\n          //   );\n          //   const expResult = calculateTeamExperience(battleState.player, battleState.teammates, defeatedEnemies);\n          //   expInfo = `，李白获得${expResult.playerExp}经验值`;\n          //   if (expResult.teammateResults &amp;&amp; expResult.teammateResults.length &gt; 0) {\n          //     const teammateExpInfo = expResult.teammateResults\n          //       .map(teammate =&gt; `${teammate.name}获得${teammate.exp}经验值`)\n          //       .join('，');\n          //     expInfo += `，${teammateExpInfo}`;\n          //   }\n          // }\n          message = `&lt;request:李白赢得了战斗，${playerStatus}${teammatesStatus}，伤害最高武器为${\n            stats.weaponStats.length &gt; 0 ? stats.weaponStats[0].name : '无'\n          }，击败了${allEnemyNames}${weaponDamageStats}${itemUsageStats}${expInfo}${\n            extraText ? '，' + extraText : ''\n          }&gt;`;\n        } else {\n\n          const stats = collectBattleStatistics();\n          let weaponDamageStats = '';\n          if (stats.weaponStats.length &gt; 0) {\n            weaponDamageStats =\n              '，武器伤害统计: ' +\n              stats.weaponStats\n                .map(\n                  weapon =&gt;\n                    `${weapon.name}伤害为${weapon.damage}${weapon.kills &gt; 0 ? `(击败了${weapon.kills}个敌人)` : ''}`,\n                )\n                .join(', ');\n          }\n\n          let itemUsageStats = '';\n          if (stats.itemUsage &amp;&amp; stats.itemUsage.length &gt; 0) {\n            itemUsageStats = '，使用丹药: ' + stats.itemUsage.map(item =&gt; `${item.name} ${item.count}个`).join('、');\n          }\n\n          let defeatedEnemies = '';\n          if (battleState.killedEnemies &amp;&amp; battleState.killedEnemies.length &gt; 0) {\n            defeatedEnemies = `，击败了${battleState.killedEnemies.join('、')}`;\n          }\n\n          let teammatesStatus = '';\n          if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n            teammatesStatus =\n              '，队友状态: ' +\n              battleState.teammates\n                .map(\n                  teammate =&gt;\n                    `${teammate.name}血量${teammate.hp}/${teammate.maxHp}，MP值${teammate.mp}/${teammate.maxMp}`,\n                )\n                .join('；');\n          }\n          message = `&lt;request:李白被击败了，李白血量变为0/${battleState.player.maxHp}，MP值${\n            battleState.player.mp\n          }/${battleState.player.maxMp}${teammatesStatus}${\n            battleState.lastKilledBy ? '，被' + battleState.lastKilledBy + '击败' : ''\n          }${defeatedEnemies}${weaponDamageStats}${itemUsageStats}${extraText ? '，' + extraText : ''}&gt;`;\n        }\n\n        sendBattleResult(message)\n          .then(success =&gt; {\n            if (success) {\n\n            } else {\n\n            }\n          })\n          .catch(e =&gt; {\n            console.error('发送战斗结果失败:', e);\n          });\n\n        resultModal.style.display = 'none';\n\n        extraResultText.value = '';\n\n        battleState.isActive = false;\n        battleState.attackInProgress = false;\n      }\n\n      function calculateActionOrder() {\n\n        battleState.actionOrder = [];\n        battleState.currentActionIndex = 0;\n        battleState.actionsThisRound = {};\n\n        const allParticipants = [];\n\n        allParticipants.push({\n          type: 'player',\n          id: 'player',\n          name: battleState.player.name || 'User',\n          speed: battleState.player.speed,\n          entity: battleState.player,\n        });\n\n        battleState.teammates.forEach(teammate =&gt; {\n          allParticipants.push({\n            type: 'teammate',\n            id: teammate.id,\n            name: teammate.name,\n            speed: teammate.speed,\n            entity: teammate,\n          });\n        });\n\n        battleState.enemies.forEach(enemy =&gt; {\n          allParticipants.push({\n            type: 'enemy',\n            id: enemy.id,\n            name: enemy.name,\n            speed: enemy.speed,\n            entity: enemy,\n          });\n        });\n\n        const minSpeed = Math.min(...allParticipants.map(p =&gt; p.speed));\n\n        const actionPool = [];\n\n        allParticipants.forEach(participant =&gt; {\n\n          actionPool.push({\n            type: participant.type,\n            id: participant.id,\n            name: participant.name,\n            entity: participant.entity,\n            speed: participant.speed,\n            actionNumber: 1,\n          });\n\n          let extraActionCount = 1;\n          let currentSpeed = participant.speed;\n          while (currentSpeed &gt;= minSpeed * 2) {\n\n            currentSpeed = Math.floor(currentSpeed / 2);\n            extraActionCount++;\n            actionPool.push({\n              type: participant.type,\n              id: participant.id,\n              name: participant.name,\n              entity: participant.entity,\n              speed: currentSpeed,\n              actionNumber: extraActionCount,\n            });\n          }\n        });\n\n        actionPool.sort((a, b) =&gt; b.speed - a.speed);\n\n        battleState.actionOrder = actionPool;\n\n        allParticipants.forEach(participant =&gt; {\n          battleState.actionsThisRound[`${participant.type}-${participant.id}`] = 0;\n        });\n\n        let actionOrderText = '行动顺序: ';\n        battleState.actionOrder.forEach((action, index) =&gt; {\n          actionOrderText += `${index + 1}.${action.name}`;\n          if (index &lt; battleState.actionOrder.length - 1) {\n            actionOrderText += ' → ';\n          }\n        });\n        logBattleAction(actionOrderText);\n        return battleState.actionOrder;\n      }\n\n      function startBattle() {\n        const data = statusDataSource.textContent;\n        battleData = parseStatusData(data);\n        const selectedEnemyElements = document.querySelectorAll('#pilots-container .enemy-item.selected');\n        const selectedEnemyIndices = Array.from(selectedEnemyElements).map(el =&gt;\n          parseInt(el.getAttribute('data-enemy-index')),\n        );\n        const selectedEnemies = battleData.enemies.filter((enemy, index) =&gt; selectedEnemyIndices.includes(index));\n        if (selectedEnemies.length === 0) {\n          alert('请至少选择一个敌人进行战斗！');\n          return;\n        }\n\n        const selectedTeammates = battleState.selectedTeammates || [];\n        battleState.isActive = true;\n        battleState.round = 1;\n\n        battleState.currentItemUsed = false;\n        battleState.playerBuffs = [];\n        battleState.player = JSON.parse(JSON.stringify(battleData.player));\n        battleState.teammates = JSON.parse(JSON.stringify(selectedTeammates)); \n        battleState.currentTeammate = null; \n        battleState.enemies = JSON.parse(JSON.stringify(selectedEnemies));\n        battleState.initialEnemies = JSON.parse(JSON.stringify(selectedEnemies));\n        battleState.selectedEnemies = [];\n        battleState.selectedHealTargets = []; \n        battleState.currentWeapon = null;\n        battleState.currentItem = null;\n        battleState.waitingForNextRound = false;\n        battleState.healTarget = null;\n        battleState.selfTargetMode = false;\n        battleState.lastKilledBy = null;\n        battleState.itemUsageStats = {}; \n        battleState.highestDamageWeapon = {\n          name: '',\n          damage: 0,\n        };\n        battleState.actionOrder = []; \n        battleState.currentActionIndex = 0; \n        battleState.sacrificeBoostActive = null; \n\n        hateSystem.enemyHateLists = {}; \n\n        lazyRenderManager.isCombatRendered = true;\n        document.querySelector('.container').style.display = 'none';\n        initializeBattleInterface();\n        combatInterface.style.display = 'block';\n\n        lazyRenderManager.safeUpdateInterface(() =&gt; {\n\n          calculateActionOrder();\n          logBattleAction(`第 ${battleState.round} 回合开始！`);\n\n          memoryManager.safeSetTimeout(() =&gt; {\n            forceUpdateUI();\n            showCurrentActor(); \n            updateHateDisplay(); \n          }, 100);\n        }, 'combat');\n      }\n\n      function showCurrentActor() {\n\n        battleState.currentItemUsed = false;\n        if (battleState.actionOrder.length === 0) {\n          return;\n        }\n        if (battleState.currentActionIndex &gt;= battleState.actionOrder.length) {\n          battleState.currentActionIndex = 0;\n        }\n        const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n        if (!currentAction) {\n          return;\n        }\n\n        let entityExists = false;\n        if (currentAction.type === 'player') {\n\n          entityExists = true;\n        } else if (currentAction.type === 'teammate') {\n\n          entityExists = battleState.teammates.some(t =&gt; t.id === currentAction.id);\n        } else if (currentAction.type === 'enemy') {\n\n          entityExists = battleState.enemies.some(e =&gt; e.id === currentAction.id);\n        }\n\n        if (!entityExists) {\n          moveToNextAction();\n          return;\n        }\n        logBattleAction(`${currentAction.name} 的行动回合！`);\n\n        document.querySelectorAll('.action-order-item').forEach(item =&gt; {\n          const index = parseInt(item.getAttribute('data-action-index'));\n          if (index === battleState.currentActionIndex) {\n            item.classList.add('current');\n          } else {\n            item.classList.remove('current');\n          }\n        });\n\n        document.querySelectorAll('.combat-entity').forEach(entity =&gt; {\n          entity.classList.remove('current-actor');\n        });\n        if (currentAction.type === 'player') {\n          const playerEntity = document.querySelector('.combat-entity.player');\n          if (playerEntity) {\n            playerEntity.classList.add('current-actor');\n          }\n\n          const currentPlayerStats = getPlayerActualStats();\n          battleState.player.ap = currentPlayerStats.actionPoints; \n          battleState.player.maxAp = currentPlayerStats.actionPoints;\n          battleState.currentItemUsed = false;\n\n          battleState.player.weapons.forEach(weapon =&gt; {\n            weapon.used = false;\n          });\n          battleState.player.items.forEach(item =&gt; {\n            item.used = false;\n          });\n\n          battleState.currentTeammate = null;\n\n          document.getElementById('melee-toggle').innerHTML = '&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 神通';\n\n          updatePlayerPanel(); \n          updateWeaponsList(); \n          updateItemsList(); \n\n          enablePlayerControls();\n        } else if (currentAction.type === 'teammate') {\n\n          const teammateEntity = document.querySelector(\n            `.combat-entity.teammate[data-teammate-id=\"${currentAction.id}\"]`,\n          );\n          if (teammateEntity) {\n            teammateEntity.classList.add('current-actor');\n          }\n\n          currentAction.entity.skillUsed = false;\n          currentAction.entity.ap = currentAction.entity.maxAp; \n          currentAction.entity.weapons.forEach(weapon =&gt; {\n            weapon.used = false;\n          });\n\n          battleState.currentTeammate = currentAction.entity;\n\n          logBattleAction(`轮到 ${currentAction.name} 行动，请选择神通进行攻击。`);\n\n          updatePlayerPanel();\n\n          document.getElementById('melee-toggle').innerHTML = '&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 队友神通';\n\n          updateTeammateWeaponsList();\n\n          updateItemsList();\n\n          setupSkipButton();\n        } else if (currentAction.type === 'enemy') {\n          const enemyEntity = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${currentAction.id}\"]`);\n          if (enemyEntity) {\n            enemyEntity.classList.add('current-actor');\n          }\n\n          performEnemyAction(currentAction.entity);\n        }\n      }\n      function initializeBattleInterface() {\n        updateBattleUI({ player: true, enemy: true, weapons: true, items: true });\n        combatLog.innerHTML = '';\n\n        const actionOrderDisplay = document.getElementById('action-order-display');\n        if (actionOrderDisplay) {\n          actionOrderDisplay.innerHTML = '';\n        }\n\n        battleState.fullCombatLog = [];\n\n        const meleeToggle = document.getElementById('melee-toggle');\n        const itemsToggle = document.getElementById('items-toggle');\n        const attackBtn = document.getElementById('attack-btn');\n        const nextRoundBtn = document.getElementById('next-round-btn');\n\n        function clearEventListeners(element) {\n          if (!element) return;\n          const clone = element.cloneNode(true);\n          if (element.parentNode) {\n            element.parentNode.replaceChild(clone, element);\n          }\n          return clone;\n        }\n\n        const newMeleeToggle = clearEventListeners(meleeToggle);\n        const newItemsToggle = clearEventListeners(itemsToggle);\n        const statsToggle = document.getElementById('stats-toggle');\n        const newStatsToggle = clearEventListeners(statsToggle);\n        const newAttackBtn = clearEventListeners(attackBtn);\n        const newNextRoundBtn = clearEventListeners(nextRoundBtn);\n\n        newMeleeToggle.addEventListener('click', function () {\n          newMeleeToggle.classList.add('active');\n          newItemsToggle.classList.remove('active');\n          newStatsToggle.classList.remove('active');\n          document.getElementById('melee-panel').classList.add('active');\n          document.getElementById('items-panel').classList.remove('active');\n          document.getElementById('stats-panel').classList.remove('active');\n        });\n        newItemsToggle.addEventListener('click', function () {\n          newItemsToggle.classList.add('active');\n          newMeleeToggle.classList.remove('active');\n          newStatsToggle.classList.remove('active');\n          document.getElementById('items-panel').classList.add('active');\n          document.getElementById('melee-panel').classList.remove('active');\n          document.getElementById('stats-panel').classList.remove('active');\n        });\n        newStatsToggle.addEventListener('click', function () {\n          newStatsToggle.classList.add('active');\n          newMeleeToggle.classList.remove('active');\n          newItemsToggle.classList.remove('active');\n          document.getElementById('stats-panel').classList.add('active');\n          document.getElementById('melee-panel').classList.remove('active');\n          document.getElementById('items-panel').classList.remove('active');\n\n          updateDetailedStatsPanel();\n        });\n\n        newAttackBtn.addEventListener('click', performPlayerAttack);\n\n        battleState.attackInProgress = false;\n      }\n\n      function generateBuffTooltip(buff) {\n        if (buff.type === 'critBoost') return `暴击率+${buff.value}%`;\n        if (buff.type === 'healOverTime') return `每回合恢复${buff.value}HP`;\n        if (buff.type === 'shieldOverTime') return `每回合获得${buff.value}点护盾`;\n        if (buff.type === 'sacrificeBoost') return buff.tooltipText;\n        if (buff.type === 'strBoost') return `力量+${buff.value}`;\n        if (buff.type === 'agiBoost') return `敏捷+${buff.value}`;\n        if (buff.type === 'intBoost') return `智力+${buff.value}`;\n        if (buff.type === 'endBoost') return `耐力+${buff.value}`;\n        return '';\n      }\n\n      function generateBuffsHtml(buffs) {\n        return buffs\n          .map(buff =&gt; {\n            const positiveTypes = ['healOverTime', 'shieldOverTime'];\n            const buffClass = buff.isPositive || positiveTypes.includes(buff.type) ? 'positive' : 'negative';\n            const tooltipText = generateBuffTooltip(buff);\n            const duration = buff.duration === '本回合' ? buff.duration : buff.duration + '回合';\n            return `\n            &lt;div class=\"buff ${buffClass} status-effect\"&gt;\n                &lt;div class=\"buff-name\"&gt;${buff.name}&lt;/div&gt;\n                &lt;div class=\"buff-duration\"&gt;${duration}&lt;/div&gt;\n                &lt;span class=\"effect-tooltip\"&gt;${tooltipText}&lt;/span&gt;\n            &lt;/div&gt;`;\n          })\n          .join('');\n      }\n\n      function updatePlayerPanel() {\n\n        if (!lazyRenderManager.shouldRenderCombat()) {\n          return;\n        }\n        let html = ''; \n\n        const player = battleState.player;\n        const playerStats = getPlayerActualStats();\n\n        let allBuffs = [...battleState.playerBuffs];\n\n        if (battleState.sacrificeBoostActive) {\n          allBuffs.push({\n            name: '牺牲增益',\n            type: 'sacrificeBoost',\n            isPositive: true,\n            duration: '本回合',\n            tooltipText: `攻击+${battleState.sacrificeBoostActive.attack}，命中+${battleState.sacrificeBoostActive.hitRate}%，暴击+${battleState.sacrificeBoostActive.critRate}%，次数+${battleState.sacrificeBoostActive.attacksPerTurn}，目标+${battleState.sacrificeBoostActive.targetsPerAttack}`,\n          });\n        }\n        const buffsHtml = generateBuffsHtml(allBuffs);\n\n        const selfTargetClass = battleState.selfTargetMode ? 'selectable' : '';\n\n        html += `\n                &lt;div class=\"combat-entity player ${selfTargetClass}\" data-entity-type=\"player\"&gt;\n                    &lt;div class=\"entity-header\"&gt;\n                        &lt;div class=\"entity-name\"&gt;${player.name || 'User'}&lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"entity-stats\"&gt;\n                        &lt;div class=\"hp-bar-container\"&gt;\n                            &lt;div class=\"hp-bar-label\"&gt;&lt;i class=\"fas fa-heart\" style=\"color: var(--health-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"hp-bar-combat\"&gt;\n                                &lt;div class=\"hp-fill-combat\" style=\"width: ${(player.hp / player.maxHp) * 100}%\"&gt;&lt;/div&gt;\n                                &lt;div class=\"hp-text-combat\"&gt;${player.hp}/${player.maxHp} (+${\n          playerStats.hpRegen\n        }/回合)&lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"mp-bar-container\"&gt;\n                            &lt;div class=\"mp-bar-label\"&gt;&lt;i class=\"fas fa-flask\" style=\"color: var(--mana-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"mp-bar-combat\"&gt;\n                                &lt;div class=\"mp-fill-combat\" style=\"width: ${(player.mp / player.maxMp) * 100}%\"&gt;&lt;/div&gt;\n                                &lt;div class=\"mp-text-combat\"&gt;${player.mp}/${player.maxMp} (+${\n          playerStats.mpRegen\n        }/回合)&lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"ap-bar-container\"&gt;\n                            &lt;div class=\"ap-bar-label\"&gt;&lt;i class=\"fas fa-bolt\" style=\"color: var(--primary-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"ap-bar-combat\"&gt;\n                                &lt;div class=\"ap-fill-combat\" style=\"width: ${\n                                  player.maxAp &gt; 0 ? (player.ap / player.maxAp) * 100 : 0\n                                }%\"&gt;&lt;/div&gt;\n                                &lt;div class=\"ap-text-combat\"&gt;${player.ap || 0}/${player.maxAp || 0} 行动点&lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        ${player.shield || player.tempShield ? `\n                        &lt;div class=\"shield-bar-container\"&gt;\n                            &lt;div class=\"shield-bar-label\"&gt;&lt;i class=\"fas fa-shield-alt\" style=\"color: #06b6d4;\"&gt;&lt;/i&gt;&lt;/div&gt;\n                            &lt;div class=\"shield-bar-combat\"&gt;\n                                &lt;div class=\"shield-text-combat\"&gt;${\n                                  player.shield &amp;&amp; player.tempShield \n                                    ? `护盾 ${player.shield} | 临时 ${player.tempShield}` \n                                    : player.shield \n                                      ? `护盾 ${player.shield}` \n                                      : `临时 ${player.tempShield}`\n                                }&lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        ` : ''}\n                        &lt;button class=\"stats-toggle-btn\" onclick=\"toggleStats('player-stats')\"&gt;\n                            &lt;i class=\"fas fa-chart-bar\"&gt;&lt;/i&gt; 详细属性\n                            &lt;span class=\"toggle-icon\"&gt;▼&lt;/span&gt;\n                        &lt;/button&gt;\n                        &lt;div class=\"stats-collapsible\" id=\"player-stats\"&gt;\n                            &lt;div class=\"stats-compact\"&gt;\n\n                                &lt;div class=\"stat-category\"&gt;\n                                    &lt;div class=\"category-title\" style=\"font-size: 9px; margin-bottom: 3px;\"&gt;\n                                        STR:${playerStats.str} AGI:${playerStats.agi} INT:${playerStats.int} VIT:${\n          playerStats.end\n        }\n                            &lt;/div&gt;\n                            &lt;/div&gt;\n\n                                &lt;div class=\"stat-row str-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-hand-fist\"&gt;&lt;/i&gt; 伤害加成&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;+${(playerStats.damageBonus * 100).toFixed(1)}%&lt;/div&gt;\n                            &lt;/div&gt;\n                                &lt;div class=\"stat-row str-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 减伤值&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;${playerStats.physicalReduction}&lt;/div&gt;\n                            &lt;/div&gt;\n\n                                &lt;div class=\"stat-row agi-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shoe-prints\"&gt;&lt;/i&gt; 闪避率&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;${(playerStats.evasionRate * 100).toFixed(2)}%&lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"stat-row agi-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-crosshairs\"&gt;&lt;/i&gt; 额外命中&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;+${(playerStats.extraHitRate * 100).toFixed(1)}%&lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"stat-row agi-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt; 速度&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;${playerStats.speed}&lt;/div&gt;\n                                &lt;/div&gt;\n\n                                &lt;div class=\"stat-row int-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-star\"&gt;&lt;/i&gt; 额外暴击&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;+${(playerStats.extraCritRate * 100).toFixed(1)}%&lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"stat-row int-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-fire\"&gt;&lt;/i&gt; 暴击倍率&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;${(playerStats.baseCritMultiplier * 100).toFixed(\n                                      1,\n                                    )}%&lt;/div&gt;\n                                &lt;/div&gt;\n\n                                &lt;div class=\"stat-row resistance\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-eye-slash\"&gt;&lt;/i&gt; 暴击率抵抗&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;${(playerStats.critRateResistance * 100).toFixed(\n                                      2,\n                                    )}%&lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"stat-row resistance\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 暴伤抵抗&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;${(playerStats.critDamageResistance * 100).toFixed(\n                                      2,\n                                    )}%&lt;/div&gt;\n                                &lt;/div&gt;\n\n                                &lt;div class=\"stat-row vit-based\"&gt;\n                                    &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-virus\"&gt;&lt;/i&gt; 承伤率&lt;/div&gt;\n                                    &lt;div class=\"stat-row-value\"&gt;${(playerStats.damageTakenRate * 100).toFixed(1)}%&lt;/div&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"entity-buffs\"&gt;\n                        ${buffsHtml}\n                    &lt;/div&gt;\n                    &lt;div class=\"self-target-indicator\"&gt;我&lt;/div&gt;\n                &lt;/div&gt;\n            `;\n\n        if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n          battleState.teammates.forEach(teammate =&gt; {\n            const teammateStats = getTeammateActualStats(teammate);\n\n            const teammateBuffsHtml =\n              teammate.buffs &amp;&amp; teammate.buffs.length &gt; 0\n                ? teammate.buffs\n                    .map(buff =&gt; {\n                      const buffClass = buff.isPositive\n                        ? 'positive'\n                        : buff.type === 'healOverTime'\n                        ? 'positive'\n                        : 'negative';\n                      const tooltipText =\n                        generateBuffTooltip(buff) + (buff.type === 'endBoost' ? '（对队友无效）' : '');\n                      return `\n                            &lt;div class=\"buff ${buffClass} status-effect\"&gt;\n                                &lt;div class=\"buff-name\"&gt;${buff.name}&lt;/div&gt;\n                                &lt;div class=\"buff-duration\"&gt;${buff.duration}回合&lt;/div&gt;\n                                &lt;span class=\"effect-tooltip\"&gt;${tooltipText}&lt;/span&gt;\n                            &lt;/div&gt;`;\n                    })\n                    .join('')\n                : '';\n\n            const teammateTargetClass = battleState.selfTargetMode ? 'selectable' : '';\n            const isCurrentTeammate =\n              battleState.currentTeammate &amp;&amp; battleState.currentTeammate.id === teammate.id ? 'current-teammate' : '';\n\n            html += `\n                        &lt;div class=\"combat-entity teammate ${teammateTargetClass} ${isCurrentTeammate}\" data-teammate-id=\"${\n              teammate.id\n            }\"&gt;\n                            &lt;div class=\"entity-header\"&gt;\n                                &lt;div class=\"entity-name\"&gt;${teammate.name}&lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"entity-stats\"&gt;\n                                &lt;div class=\"hp-bar-container\"&gt;\n                                    &lt;div class=\"hp-bar-label\"&gt;&lt;i class=\"fas fa-heart\" style=\"color: var(--health-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                                    &lt;div class=\"hp-bar-combat\"&gt;\n                                        &lt;div class=\"hp-fill-combat\" style=\"width: ${\n                                          (teammate.hp / teammate.maxHp) * 100\n                                        }%\"&gt;&lt;/div&gt;\n                                        &lt;div class=\"hp-text-combat\"&gt;${teammate.hp}/${teammate.maxHp} (+${\n              teammateStats.hpRegen\n            }/回合)&lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"mp-bar-container\"&gt;\n                                    &lt;div class=\"mp-bar-label\"&gt;&lt;i class=\"fas fa-flask\" style=\"color: var(--mana-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                                    &lt;div class=\"mp-bar-combat\"&gt;\n                                        &lt;div class=\"mp-fill-combat\" style=\"width: ${\n                                          (teammate.mp / teammate.maxMp) * 100\n                                        }%\"&gt;&lt;/div&gt;\n                                        &lt;div class=\"mp-text-combat\"&gt;${teammate.mp}/${teammate.maxMp} (+${\n              teammateStats.mpRegen\n            })&lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"ap-bar-container\"&gt;\n                                    &lt;div class=\"ap-bar-label\"&gt;&lt;i class=\"fas fa-bolt\" style=\"color: var(--primary-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                                    &lt;div class=\"ap-bar-combat\"&gt;\n                                        &lt;div class=\"ap-fill-combat\" style=\"width: ${\n                                          teammate.maxAp &gt; 0 ? (teammate.ap / teammate.maxAp) * 100 : 0\n                                        }%\"&gt;&lt;/div&gt;\n                                        &lt;div class=\"ap-text-combat\"&gt;${teammate.ap || 0}/${\n              teammate.maxAp || 0\n            } 行动点&lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                ${teammate.shield || teammate.tempShield ? `\n                                &lt;div class=\"shield-bar-container\"&gt;\n                                    &lt;div class=\"shield-bar-label\"&gt;&lt;i class=\"fas fa-shield-alt\" style=\"color: #06b6d4;\"&gt;&lt;/i&gt;&lt;/div&gt;\n                                    &lt;div class=\"shield-bar-combat\"&gt;\n                                        &lt;div class=\"shield-text-combat\"&gt;${\n                                          teammate.shield &amp;&amp; teammate.tempShield \n                                            ? `护盾 ${teammate.shield} | 临时 ${teammate.tempShield}` \n                                            : teammate.shield \n                                              ? `护盾 ${teammate.shield}` \n                                              : `临时 ${teammate.tempShield}`\n                                        }&lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                ` : ''}\n                                &lt;button class=\"stats-toggle-btn\" onclick=\"toggleStats('teammate-stats-${teammate.id}')\"&gt;\n                                    &lt;i class=\"fas fa-chart-bar\"&gt;&lt;/i&gt; 详细属性\n                                    &lt;span class=\"toggle-icon\"&gt;▼&lt;/span&gt;\n                                &lt;/button&gt;\n                                &lt;div class=\"stats-collapsible\" id=\"teammate-stats-${teammate.id}\"&gt;\n\n                                    &lt;div class=\"stats-compact\"&gt;\n\n                                        &lt;div class=\"stat-category\"&gt;\n                                            &lt;div class=\"category-title\" style=\"font-size: 9px; margin-bottom: 3px;\"&gt;\n                                                STR:${teammateStats.str} AGI:${teammateStats.agi} INT:${\n              teammateStats.int\n            } VIT:${teammateStats.end}\n                                            &lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"stat-row str-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-hand-fist\"&gt;&lt;/i&gt; 伤害加成&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;+${(teammateStats.damageBonus * 100).toFixed(\n                                              1,\n                                            )}%&lt;/div&gt;\n                                        &lt;/div&gt;\n                                        &lt;div class=\"stat-row str-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 减伤值&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;${teammateStats.physicalReduction}&lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"stat-row agi-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shoe-prints\"&gt;&lt;/i&gt; 闪避率&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;${(teammateStats.evasionRate * 100).toFixed(\n                                              2,\n                                            )}%&lt;/div&gt;\n                                        &lt;/div&gt;\n                                        &lt;div class=\"stat-row agi-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-crosshairs\"&gt;&lt;/i&gt; 额外命中&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;+${(teammateStats.extraHitRate * 100).toFixed(\n                                              1,\n                                            )}%&lt;/div&gt;\n                                        &lt;/div&gt;\n                                        &lt;div class=\"stat-row agi-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt; 速度&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;${teammateStats.speed}&lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"stat-row int-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-star\"&gt;&lt;/i&gt; 额外暴击&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;+${(teammateStats.extraCritRate * 100).toFixed(\n                                              1,\n                                            )}%&lt;/div&gt;\n                                        &lt;/div&gt;\n                                        &lt;div class=\"stat-row int-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-fire\"&gt;&lt;/i&gt; 暴击倍率&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;${(\n                                              teammateStats.baseCritMultiplier * 100\n                                            ).toFixed(1)}%&lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"stat-row resistance\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-eye-slash\"&gt;&lt;/i&gt; 暴击率抵抗&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;${(\n                                              teammateStats.critRateResistance * 100\n                                            ).toFixed(2)}%&lt;/div&gt;\n                                        &lt;/div&gt;\n                                        &lt;div class=\"stat-row resistance\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 暴伤抵抗&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;${(\n                                              teammateStats.critDamageResistance * 100\n                                            ).toFixed(2)}%&lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"stat-row vit-based\"&gt;\n                                            &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-virus\"&gt;&lt;/i&gt; 承伤率&lt;/div&gt;\n                                            &lt;div class=\"stat-row-value\"&gt;${(teammateStats.damageTakenRate * 100).toFixed(\n                                              1,\n                                            )}%&lt;/div&gt;\n                                        &lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"entity-buffs\"&gt;\n                                ${teammateBuffsHtml}\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    `;\n          });\n        }\n\n        combatPlayerPanel.innerHTML = html;\n\n        document.querySelector('.combat-entity.player').addEventListener('click', function () {\n\n          if (battleState.selfTargetMode) {\n\n            const playerId = 'player';\n            const index = battleState.selectedHealTargets.findIndex(t =&gt; t.id === playerId);\n            if (index === -1) {\n\n              if (battleState.selectedHealTargets.length &lt; (battleState.currentWeapon?.targetsPerAttack || 1)) {\n                battleState.selectedHealTargets.push({ id: playerId, type: 'player', entity: battleState.player });\n                this.classList.add('selected');\n\n                if (!battleState.healTarget) {\n                  battleState.healTarget = 'player';\n                }\n              }\n            } else {\n\n              battleState.selectedHealTargets.splice(index, 1);\n              this.classList.remove('selected');\n\n              if (battleState.healTarget === 'player') {\n                battleState.healTarget =\n                  battleState.selectedHealTargets.length &gt; 0 ? battleState.selectedHealTargets[0].id : null;\n              }\n            }\n\n            battleState.selectedEnemies = [];\n            document.querySelectorAll('.combat-entity.enemy').forEach(el =&gt; {\n              el.classList.remove('selected');\n            });\n\n            updateAttackButton();\n          }\n        });\n\n        document.querySelectorAll('.combat-entity.teammate').forEach(teammateElement =&gt; {\n          teammateElement.addEventListener('click', function () {\n            const teammateId = this.getAttribute('data-teammate-id');\n            const teammate = battleState.teammates.find(t =&gt; t.id === teammateId);\n\n            const weaponTemplate = battleState.currentWeapon?.codes\n              ?.find(code =&gt; code.startsWith('WN:A'))\n              ?.match(/WN:(A[1-4])/)?.[1];\n            if (\n              battleState.selfTargetMode &amp;&amp;\n              battleState.currentWeapon &amp;&amp;\n              (weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4' || battleState.currentWeapon.isHealing)\n            ) {\n\n              const index = battleState.selectedHealTargets.findIndex(t =&gt; t.id === teammateId);\n              const teammate = battleState.teammates.find(t =&gt; t.id === teammateId);\n              if (index === -1) {\n\n                if (battleState.selectedHealTargets.length &lt; (battleState.currentWeapon?.targetsPerAttack || 1)) {\n                  battleState.selectedHealTargets.push({ id: teammateId, type: 'teammate', entity: teammate });\n                  this.classList.add('selected');\n\n                  if (!battleState.healTarget) {\n                    battleState.healTarget = teammateId;\n                  }\n                }\n              } else {\n\n                battleState.selectedHealTargets.splice(index, 1);\n                this.classList.remove('selected');\n\n                if (battleState.healTarget === teammateId) {\n                  battleState.healTarget =\n                    battleState.selectedHealTargets.length &gt; 0 ? battleState.selectedHealTargets[0].id : null;\n                }\n              }\n\n              battleState.selectedEnemies = [];\n              document.querySelectorAll('.combat-entity.enemy').forEach(el =&gt; {\n                el.classList.remove('selected');\n              });\n\n              updateAttackButton();\n            } else {\n\n            }\n          });\n        });\n      }\n\n      function updateEnemyPanel() {\n\n        if (!lazyRenderManager.shouldRenderCombat()) {\n          return;\n        }\n        combatEnemyPanel.innerHTML = battleState.enemies\n          .map((enemy, index) =&gt; {\n            const buffsHtml =\n              enemy.buffs &amp;&amp; enemy.buffs.length &gt; 0\n                ? enemy.buffs\n                    .map(buff =&gt; {\n                      let buffClass = buff.isPositive ? 'positive' : 'negative';\n                      let tooltipText = '';\n                      if (buff.type === 'freeze') {\n                        buffClass = 'ice';\n                        tooltipText = '无法行动';\n                      } else if (buff.type === 'hitRateDown') {\n                        buffClass = 'lightning';\n                        tooltipText = `命中率-${buff.value}%`;\n                      } else if (buff.type === 'vulnerable') {\n                        buffClass = 'negative';\n                        tooltipText = `受伤+${buff.value}%`;\n                      } else if (buff.type === 'burnOverTime') {\n                        buffClass = 'fire';\n                        tooltipText = `每回合-${buff.value}火伤`;\n                      } else if (buff.type === 'dot') {\n                        buffClass = 'negative';\n                        tooltipText = `每回合-${buff.value}持续伤害`;\n                      }\n                      return `\n                    &lt;div class=\"buff ${buffClass} status-effect\"&gt;\n                        &lt;div class=\"buff-name\"&gt;${buff.name}&lt;/div&gt;\n                        &lt;div class=\"buff-duration\"&gt;${buff.duration}回合&lt;/div&gt;\n                        &lt;span class=\"effect-tooltip\"&gt;${tooltipText}&lt;/span&gt;\n                    &lt;/div&gt;`;\n                    })\n                    .join('')\n                : '';\n\n            const freezeHtml =\n              enemy.pendingFreeze &amp;&amp; enemy.pendingFreezeCount &gt; 0\n                ? `\n                &lt;div class=\"buff ice status-effect\"&gt;\n                    &lt;div class=\"buff-name\"&gt;晕眩&lt;/div&gt;\n                    &lt;div class=\"buff-duration\"&gt;${enemy.pendingFreezeCount}回合&lt;/div&gt;\n                    &lt;span class=\"effect-tooltip\"&gt;无法行动&lt;/span&gt;\n                &lt;/div&gt;`\n                : '';\n\n            const marksHtml = enemy.marks\n              ? Object.keys(enemy.marks)\n                  .map(markType =&gt; {\n                    let markName = '';\n                    let markValue = enemy.marks[markType];\n                    let markTooltip = '';\n                    switch (markType) {\n                      case 'vulnerability':\n                        markName = '易伤';\n                        markTooltip = `下次攻击+${markValue}%伤害`;\n                        break;\n                      case 'weakness':\n                        markName = '破绽';\n                        markTooltip = `下次攻击暴击率+${markValue}%`;\n                        break;\n                      case 'death':\n                        markName = '死点';\n                        markTooltip = `下次攻击暴击伤害+${markValue}%`;\n                        break;\n                    }\n                    return `\n                &lt;div class=\"buff negative status-effect\"&gt;\n                    &lt;div class=\"buff-name\"&gt;${markName}&lt;/div&gt;\n                    &lt;div class=\"buff-duration\"&gt;标记&lt;/div&gt;\n                    &lt;span class=\"effect-tooltip\"&gt;${markTooltip}&lt;/span&gt;\n                &lt;/div&gt;`;\n                  })\n                  .join('')\n              : '';\n\n            const stacksHtml = enemy.stacks\n              ? Object.keys(enemy.stacks)\n                  .map(stackType =&gt; {\n                    let stackName = '';\n                    let stackCount = enemy.stacks[stackType];\n                    let stackTooltip = '';\n                    switch (stackType) {\n                      case 'trauma':\n                        stackName = '创伤';\n                        stackTooltip = `${stackCount}层，每层-3HP/回合`;\n                        break;\n                      case 'corrosion':\n                        stackName = '腐蚀';\n                        stackTooltip = `${stackCount}层，受伤+${stackCount * 5}%`;\n                        break;\n                    }\n                    return `\n                &lt;div class=\"buff negative status-effect\"&gt;\n                    &lt;div class=\"buff-name\"&gt;${stackName}&lt;/div&gt;\n                    &lt;div class=\"buff-duration\"&gt;${stackCount}层&lt;/div&gt;\n                    &lt;span class=\"effect-tooltip\"&gt;${stackTooltip}&lt;/span&gt;\n                &lt;/div&gt;`;\n                  })\n                  .join('')\n              : '';\n\n            const allEffectsHtml = buffsHtml + freezeHtml + marksHtml + stacksHtml;\n            const nextSkill = enemy.skills.find(skill =&gt; skill.name === enemy.attackPattern[enemy.nextAttackIndex]);\n\n            const enemyHateList = hateSystem.enemyHateLists[enemy.id] || [];\n            const hateListHtml =\n              enemyHateList.length &gt; 0\n                ? enemyHateList\n                    .map(\n                      (hate, index) =&gt; `\n                  &lt;div class=\"hate-item ${index === 0 ? 'current-target' : ''}\"&gt;\n                    &lt;span class=\"hate-target-name\"&gt;${hate.targetName}&lt;/span&gt;\n                    &lt;span class=\"hate-value\"&gt;${hate.hateValue}&lt;/span&gt;\n                  &lt;/div&gt;\n                `,\n                    )\n                    .join('')\n                : '&lt;div class=\"hate-item no-target\"&gt;无仇恨目标&lt;/div&gt;';\n            return `\n                    &lt;div class=\"combat-entity enemy\" data-enemy-id=\"${enemy.id}\"&gt;\n                        &lt;div class=\"entity-header\"&gt;\n                            &lt;div class=\"entity-name\"&gt;${enemy.name}&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"entity-stats\"&gt;\n                            &lt;div class=\"hp-bar-container\"&gt;\n                                &lt;div class=\"hp-bar-label\"&gt;&lt;i class=\"fas fa-heart\" style=\"color: var(--health-color);\"&gt;&lt;/i&gt;&lt;/div&gt;\n                                &lt;div class=\"hp-bar-combat\"&gt;\n                                    &lt;div class=\"hp-fill-combat\" style=\"width: ${(enemy.hp / enemy.maxHp) * 100}%\"&gt;&lt;/div&gt;\n                                    &lt;div class=\"hp-text-combat\"&gt;${enemy.hp}/${enemy.maxHp}&lt;/div&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;button class=\"stats-toggle-btn\" onclick=\"toggleStats('enemy-stats-${enemy.id}')\"&gt;\n                                &lt;i class=\"fas fa-chart-bar\"&gt;&lt;/i&gt; 详细属性\n                                &lt;span class=\"toggle-icon\"&gt;▼&lt;/span&gt;\n                            &lt;/button&gt;\n                            &lt;div class=\"stats-collapsible\" id=\"enemy-stats-${enemy.id}\"&gt;\n                            &lt;div class=\"stats-compact\"&gt;\n\n                                    &lt;div class=\"stat-category\"&gt;\n                                        &lt;div class=\"category-title\" style=\"font-size: 9px; margin-bottom: 3px;\"&gt;\n                                            STR:${enemy.str || 0} AGI:${enemy.agi || 0} INT:${enemy.int || 0} VIT:${\n              enemy.vit || 0\n            }\n                                        &lt;/div&gt;\n                                    &lt;/div&gt;\n\n                                    &lt;div class=\"stat-row str-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-hand-fist\"&gt;&lt;/i&gt; 伤害加成&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;+${(enemy.damageBonus * 100).toFixed(1)}%&lt;/div&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"stat-row str-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 减伤值&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;${enemy.physicalReduction}&lt;/div&gt;\n                                    &lt;/div&gt;\n\n                                    &lt;div class=\"stat-row agi-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shoe-prints\"&gt;&lt;/i&gt; 闪避率&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;${(enemy.evasionRate * 100).toFixed(2)}%&lt;/div&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"stat-row agi-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-crosshairs\"&gt;&lt;/i&gt; 额外命中&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;+${(enemy.extraHitRate * 100).toFixed(1)}%&lt;/div&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"stat-row agi-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt; 速度&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;${enemy.speed}&lt;/div&gt;\n                                    &lt;/div&gt;\n\n                                    &lt;div class=\"stat-row int-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-star\"&gt;&lt;/i&gt; 额外暴击&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;+${(enemy.extraCritRate * 100).toFixed(1)}%&lt;/div&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"stat-row int-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-fire\"&gt;&lt;/i&gt; 暴击倍率&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;${(enemy.baseCritMultiplier * 100).toFixed(\n                                          1,\n                                        )}%&lt;/div&gt;\n                                    &lt;/div&gt;\n\n                                    &lt;div class=\"stat-row resistance\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-eye-slash\"&gt;&lt;/i&gt; 暴击率抵抗&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;${(enemy.critRateResistance * 100).toFixed(\n                                          2,\n                                        )}%&lt;/div&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"stat-row resistance\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 暴伤抵抗&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;${(enemy.critDamageResistance * 100).toFixed(\n                                          2,\n                                        )}%&lt;/div&gt;\n                                    &lt;/div&gt;\n\n                                    &lt;div class=\"stat-row vit-based\"&gt;\n                                        &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-virus\"&gt;&lt;/i&gt; 承伤率&lt;/div&gt;\n                                        &lt;div class=\"stat-row-value\"&gt;${(enemy.damageTakenRate * 100).toFixed(1)}%&lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"entity-next-attack status-effect\"&gt;\n                            &lt;div class=\"next-attack-title\"&gt;&lt;i class=\"fas fa-bolt\"&gt;&lt;/i&gt; 下次使用:&lt;/div&gt;\n                            &lt;div class=\"next-attack-name\"&gt;${enemy.attackPattern[enemy.nextAttackIndex]}&lt;/div&gt;\n                            ${\n                              nextSkill\n                                ? `\n                                &lt;div class=\"skill-stats-grid\"&gt;\n                                    &lt;div class=\"skill-stat-item skill-attack\" title=\"技能攻击力\"&gt;\n                                        &lt;i class=\"fas fa-mountain\"&gt;&lt;/i&gt;\n                                    &lt;span&gt;攻击: ${nextSkill.attack}&lt;/span&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"skill-stat-item skill-accuracy\" title=\"命中率\"&gt;\n                                        &lt;i class=\"fas fa-crosshairs\"&gt;&lt;/i&gt;\n                                    &lt;span&gt;命中: ${getEffectiveHitRate(nextSkill.hitRate, enemy)}%&lt;/span&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"skill-stat-item skill-targets\" title=\"目标数量\"&gt;\n                                        &lt;i class=\"fas fa-users\"&gt;&lt;/i&gt;\n                                        &lt;span&gt;目标: ${nextSkill.targetsPerAttack || 1}个&lt;/span&gt;\n                                    &lt;/div&gt;\n                                    &lt;div class=\"skill-stat-item skill-times\" title=\"攻击次数\"&gt;\n                                        &lt;i class=\"fas fa-redo\"&gt;&lt;/i&gt;\n                                        &lt;span&gt;次数: ${nextSkill.attacksPerTurn || 1}次&lt;/span&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                            `\n                                : ''\n                            }\n                            &lt;span class=\"effect-tooltip\"&gt;下回合技能&lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"entity-hate-list\"&gt;\n                            &lt;div class=\"hate-list-title\"&gt;&lt;i class=\"fas fa-crosshairs\"&gt;&lt;/i&gt; 仇恨列表&lt;/div&gt;\n                            &lt;div class=\"hate-list-content\"&gt;\n                                ${hateListHtml}\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"entity-buffs\"&gt;\n                            ${allEffectsHtml}\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                `;\n          })\n          .join('');\n\n        document.querySelectorAll('.combat-entity.enemy').forEach(enemyElement =&gt; {\n          enemyElement.addEventListener('click', function () {\n            const enemyId = parseInt(this.getAttribute('data-enemy-id'));\n\n            if (battleState.selfTargetMode &amp;&amp; battleState.healTarget === 'player') {\n              return;\n            }\n\n            document.querySelector('.combat-entity.player')?.classList.remove('selected');\n            battleState.healTarget = null;\n\n            if (battleState.currentWeapon &amp;&amp; !battleState.currentWeapon.used) {\n\n              const weaponTemplate = battleState.currentWeapon.codes\n                ?.find(code =&gt; code.startsWith('WN:A'))\n                ?.match(/WN:(A[1-4])/)?.[1];\n              if (weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4') {\n                return; \n              }\n\n              if (battleState.currentWeapon.targetsPerAttack &gt; 1) {\n                const index = battleState.selectedEnemies.indexOf(enemyId);\n                if (index === -1) {\n                  if (battleState.selectedEnemies.length &lt; battleState.currentWeapon.targetsPerAttack) {\n                    battleState.selectedEnemies.push(enemyId);\n                    this.classList.add('selected');\n                  }\n                } else {\n                  battleState.selectedEnemies.splice(index, 1);\n                  this.classList.remove('selected');\n                }\n              } else {\n\n                document.querySelectorAll('.combat-entity.enemy').forEach(el =&gt; {\n                  el.classList.remove('selected');\n                });\n                battleState.selectedEnemies = [enemyId];\n                this.classList.add('selected');\n              }\n              updateAttackButton();\n\n              const nextRoundBtn = document.getElementById('next-round-btn');\n              if (nextRoundBtn) {\n                const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n                if (currentAction &amp;&amp; (currentAction.type === 'player' || currentAction.type === 'teammate')) {\n                  const isLastAction = battleState.currentActionIndex &gt;= battleState.actionOrder.length - 1;\n                  if (isLastAction) {\n                    nextRoundBtn.innerHTML = \"&lt;i class='fas fa-forward'&gt;&lt;/i&gt; 结束回合\";\n                  } else {\n                    nextRoundBtn.innerHTML = \"&lt;i class='fas fa-forward'&gt;&lt;/i&gt; 跳过当前行动\";\n                  }\n                  nextRoundBtn.disabled = false;\n                }\n              }\n            }\n          });\n        });\n      }\n\n      window.updateDetailedStatsPanel = function(targetType = 'current', targetId = null) {\n\n        let currentStats;\n        let characterName = '';\n        let entityType = targetType;\n        let selectedId = targetId;\n\n        if (targetId !== null &amp;&amp; targetId !== 'player' &amp;&amp; targetId !== undefined) {\n          targetId = parseInt(targetId, 10);\n          selectedId = targetId;\n        }\n\n        if (targetType === 'current') {\n          if (battleState.currentTeammate) {\n            currentStats = getTeammateActualStats(battleState.currentTeammate);\n            characterName = battleState.currentTeammate.name || '队友';\n            entityType = 'teammate';\n            selectedId = battleState.currentTeammate.id;\n          } else {\n            currentStats = getPlayerActualStats();\n            characterName = battleState.player.name || 'User';\n            entityType = 'player';\n            selectedId = 'player';\n          }\n        } else if (targetType === 'player') {\n\n          currentStats = getPlayerActualStats();\n          characterName = battleState.player.name || 'User';\n          selectedId = 'player';\n        } else if (targetType === 'teammate' &amp;&amp; targetId !== null) {\n\n          const teammate = battleState.teammates.find(t =&gt; t.id === targetId);\n          if (teammate) {\n            currentStats = getTeammateActualStats(teammate);\n            characterName = teammate.name || '队友';\n            selectedId = teammate.id;\n          }\n        } else if (targetType === 'enemy' &amp;&amp; targetId !== null) {\n\n          const enemy = battleState.enemies.find(e =&gt; e.id === targetId);\n          if (enemy) {\n            currentStats = enemy;\n            characterName = enemy.name || '敌人';\n            selectedId = enemy.id;\n          }\n        }\n\n        if (!currentStats) return;\n\n        let characterSelector = '&lt;div class=\"character-selector\"&gt;';\n\n        const isPlayerActive = entityType === 'player';\n        characterSelector += '&lt;button class=\"char-select-btn ' + (isPlayerActive ? 'active' : '') + '\" ' +\n          'data-type=\"player\"&gt;' +\n          '&lt;i class=\"fas fa-user\"&gt;&lt;/i&gt; ' + (battleState.player.name || 'User') +\n        '&lt;/button&gt;';\n\n        if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n          battleState.teammates.forEach(function(teammate) {\n            const isActive = entityType === 'teammate' &amp;&amp; selectedId === teammate.id;\n            const teammateId = teammate.id;\n            const teammateName = teammate.name;\n            characterSelector += '&lt;button class=\"char-select-btn ' + (isActive ? 'active' : '') + '\" ' +\n              'data-type=\"teammate\" data-id=\"' + teammateId + '\"&gt;' +\n              '&lt;i class=\"fas fa-user-friends\"&gt;&lt;/i&gt; ' + teammateName +\n            '&lt;/button&gt;';\n          });\n        }\n\n        if (battleState.enemies &amp;&amp; battleState.enemies.length &gt; 0) {\n          battleState.enemies.forEach(function(enemy) {\n            const isActive = entityType === 'enemy' &amp;&amp; selectedId === enemy.id;\n            const enemyId = enemy.id;\n            const enemyName = enemy.name;\n            characterSelector += '&lt;button class=\"char-select-btn enemy ' + (isActive ? 'active' : '') + '\" ' +\n              'data-type=\"enemy\" data-id=\"' + enemyId + '\"&gt;' +\n              '&lt;i class=\"fas fa-skull\"&gt;&lt;/i&gt; ' + enemyName +\n            '&lt;/button&gt;';\n          });\n        }\n\n        characterSelector += '&lt;/div&gt;';\n\n        const statsHtml = `\n          ${characterSelector}\n          &lt;div class=\"stats-compact\"&gt;\n\n            &lt;div class=\"stat-category\" style=\"margin-bottom: 10px;\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 16px; font-weight: bold; color: var(--primary-light); text-align: center;\"&gt;\n                &lt;i class=\"fas fa-user\"&gt;&lt;/i&gt; ${characterName} 的详细属性\n              &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"stat-category\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 13px; margin-bottom: 5px; color: var(--accent-color);\"&gt;\n                &lt;i class=\"fas fa-chart-line\"&gt;&lt;/i&gt; 基础属性\n              &lt;/div&gt;\n              &lt;div style=\"display: grid; grid-template-columns: repeat(4, 1fr); gap: 6px; margin-bottom: 8px;\"&gt;\n                &lt;div class=\"stat-badge str-based\"&gt;\n                  &lt;i class=\"fas fa-mountain\"&gt;&lt;/i&gt; 根骨: ${currentStats.str || 0}\n                &lt;/div&gt;\n                &lt;div class=\"stat-badge agi-based\"&gt;\n                  &lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt; 身法: ${currentStats.agi || 0}\n                &lt;/div&gt;\n                &lt;div class=\"stat-badge int-based\"&gt;\n                  &lt;i class=\"fas fa-eye\"&gt;&lt;/i&gt; 神识: ${currentStats.int || 0}\n                &lt;/div&gt;\n                &lt;div class=\"stat-badge vit-based\"&gt;\n                  &lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 淬体: ${currentStats.end || 0}\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"stat-category\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 12px; margin-bottom: 3px; color: #ef4444;\"&gt;\n                &lt;i class=\"fas fa-hand-fist\"&gt;&lt;/i&gt; 力量系\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row str-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-hand-fist\"&gt;&lt;/i&gt; 伤害加成&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;+${(currentStats.damageBonus * 100).toFixed(1)}%&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row str-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 减伤值&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;${currentStats.physicalReduction}&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"stat-category\" style=\"margin-top: 8px;\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 12px; margin-bottom: 3px; color: #10b981;\"&gt;\n                &lt;i class=\"fas fa-wind\"&gt;&lt;/i&gt; 身法系\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row agi-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shoe-prints\"&gt;&lt;/i&gt; 闪避率&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;${(currentStats.evasionRate * 100).toFixed(2)}%&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row agi-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-crosshairs\"&gt;&lt;/i&gt; 额外命中&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;+${(currentStats.extraHitRate * 100).toFixed(1)}%&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row agi-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-tachometer-alt\"&gt;&lt;/i&gt; 速度&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;${currentStats.speed}&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"stat-category\" style=\"margin-top: 8px;\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 12px; margin-bottom: 3px; color: #8b5cf6;\"&gt;\n                &lt;i class=\"fas fa-eye\"&gt;&lt;/i&gt; 神识系\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row int-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-star\"&gt;&lt;/i&gt; 额外暴击&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;+${(currentStats.extraCritRate * 100).toFixed(1)}%&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row int-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-fire\"&gt;&lt;/i&gt; 暴击倍率&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;${(currentStats.baseCritMultiplier * 100).toFixed(1)}%&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"stat-category\" style=\"margin-top: 8px;\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 12px; margin-bottom: 3px; color: #06b6d4;\"&gt;\n                &lt;i class=\"fas fa-shield\"&gt;&lt;/i&gt; 抵抗属性\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row resistance\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-eye-slash\"&gt;&lt;/i&gt; 暴击率抵抗&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;${(currentStats.critRateResistance * 100).toFixed(2)}%&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row resistance\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-alt\"&gt;&lt;/i&gt; 暴伤抵抗&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;${(currentStats.critDamageResistance * 100).toFixed(2)}%&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"stat-category\" style=\"margin-top: 8px;\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 12px; margin-bottom: 3px; color: #f59e0b;\"&gt;\n                &lt;i class=\"fas fa-shield-virus\"&gt;&lt;/i&gt; 耐力系\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row vit-based\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-shield-virus\"&gt;&lt;/i&gt; 承伤率&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;${(currentStats.damageTakenRate * 100).toFixed(1)}%&lt;/div&gt;\n            &lt;/div&gt;\n\n            ${entityType !== 'enemy' ? `\n\n            &lt;div class=\"stat-category\" style=\"margin-top: 8px;\"&gt;\n              &lt;div class=\"category-title\" style=\"font-size: 12px; margin-bottom: 3px; color: #ec4899;\"&gt;\n                &lt;i class=\"fas fa-heart\"&gt;&lt;/i&gt; 回复系\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row recovery\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-heart\"&gt;&lt;/i&gt; 生命回复&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;+${currentStats.hpRegen || 0}/回合&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-row recovery\"&gt;\n              &lt;div class=\"stat-row-label\"&gt;&lt;i class=\"fas fa-flask\"&gt;&lt;/i&gt; 灵力回复&lt;/div&gt;\n              &lt;div class=\"stat-row-value\"&gt;+${currentStats.mpRegen || 0}/回合&lt;/div&gt;\n            &lt;/div&gt;\n            ` : ''}\n          &lt;/div&gt;\n        `;\n\n        const detailedStatsDisplay = document.getElementById('detailed-stats-display');\n        if (detailedStatsDisplay) {\n          detailedStatsDisplay.innerHTML = statsHtml;\n\n          const characterSelectorDiv = detailedStatsDisplay.querySelector('.character-selector');\n          if (characterSelectorDiv) {\n            characterSelectorDiv.addEventListener('click', function(e) {\n              const button = e.target.closest('.char-select-btn');\n              if (button) {\n                const type = button.getAttribute('data-type');\n                const id = button.getAttribute('data-id');\n                if (type === 'player') {\n                  window.updateDetailedStatsPanel('player', null);\n                } else if (type &amp;&amp; id) {\n                  window.updateDetailedStatsPanel(type, parseInt(id, 10));\n                }\n              }\n            });\n          }\n        }\n      }\n      function getEffectiveHitRate(baseHitRate, enemy) {\n        let effectiveHitRate = baseHitRate;\n        if (enemy.buffs) {\n          enemy.buffs.forEach(buff =&gt; {\n            if (buff.type === 'hitRateDown') {\n              effectiveHitRate -= buff.value;\n            }\n          });\n        }\n        return Math.max(0, effectiveHitRate);\n      }\n\n      function updateAttackButton() {\n        const attackBtn = document.getElementById('attack-btn');\n        if (attackBtn) {\n\n          if (battleState.currentItem) {\n            attackBtn.disabled = false;\n            attackBtn.innerHTML = \"&lt;i class='fas fa-pills'&gt;&lt;/i&gt; 使用丹药\";\n          }\n\n          else if (battleState.currentWeapon) {\n            const weaponTemplate = battleState.currentWeapon.codes\n              ?.find(code =&gt; code.startsWith('WN:A'))\n              ?.match(/WN:(A[1-4])/)?.[1];\n\n            if (\n              (weaponTemplate === 'A2' ||\n                weaponTemplate === 'A3' ||\n                weaponTemplate === 'A4' ||\n                battleState.currentWeapon.isHealing) &amp;&amp;\n              battleState.healTarget === 'player'\n            ) {\n              attackBtn.disabled = false;\n              if (weaponTemplate === 'A2') {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-first-aid'&gt;&lt;/i&gt; 生命恢复\";\n              } else if (weaponTemplate === 'A3') {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-magic'&gt;&lt;/i&gt; 灵力恢复\";\n              } else if (weaponTemplate === 'A4') {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-skull'&gt;&lt;/i&gt; 牺牲增益\";\n              } else {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-first-aid'&gt;&lt;/i&gt; 治疗自己\";\n              }\n            }\n\n            else if (\n              (weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4' || battleState.currentWeapon.isHealing) &amp;&amp;\n              battleState.healTarget &amp;&amp;\n              battleState.healTarget !== 'player'\n            ) {\n              attackBtn.disabled = false;\n              if (weaponTemplate === 'A2') {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-first-aid'&gt;&lt;/i&gt; 治疗队友\";\n              } else if (weaponTemplate === 'A3') {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-magic'&gt;&lt;/i&gt; 恢复队友灵力\";\n              } else if (weaponTemplate === 'A4') {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-bolt'&gt;&lt;/i&gt; 牺牲增益\";\n              } else {\n                attackBtn.innerHTML = \"&lt;i class='fas fa-first-aid'&gt;&lt;/i&gt; 治疗选中目标\";\n              }\n            }\n\n            else {\n\n              if (weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4') {\n                attackBtn.disabled = true;\n                attackBtn.innerHTML = \"&lt;i class='fas fa-ban'&gt;&lt;/i&gt; 不能攻击敌人\";\n              } else {\n                attackBtn.disabled =\n                  battleState.selectedEnemies.length === 0 ||\n                  battleState.selectedEnemies.length &gt; (battleState.currentWeapon?.targetsPerAttack || 0);\n                attackBtn.innerHTML = \"&lt;i class='fas fa-magic'&gt;&lt;/i&gt; 施展神通\";\n              }\n            }\n          } else {\n            attackBtn.disabled = true;\n            attackBtn.innerHTML = \"&lt;i class='fas fa-magic'&gt;&lt;/i&gt; 选择神通或丹药\";\n          }\n        }\n      }\n\n      function updateWeaponsList() {\n\n        if (!lazyRenderManager.shouldRenderCombat()) {\n          return;\n        }\n\n        if (battleState.currentTeammate === null) {\n\n          document.getElementById('melee-panel').classList.add('active');\n          document.getElementById('items-panel').classList.remove('active');\n          document.getElementById('stats-panel').classList.remove('active');\n          document.getElementById('melee-toggle').classList.add('active');\n          document.getElementById('items-toggle').classList.remove('active');\n          document.getElementById('stats-toggle').classList.remove('active');\n\n          document.getElementById('melee-toggle').innerHTML = '&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 神通';\n        }\n\n        const allWeapons = battleState.player.weapons || [];\n        meleeWeaponList.innerHTML =\n          allWeapons.length &gt; 0\n            ? allWeapons\n                .map(weapon =&gt; {\n                  let effectsHtml = '';\n                  weapon.codes.forEach(code =&gt; {\n                    const codeType = code.split(':')[0];\n                    const codeValue = code.split(':')[1];\n                    if (codeType === 'WN') {\n                      const parts = codeValue.split(',');\n                      const effectKey = parts[0];\n\n                      const tooltipText = TooltipGenerator.generateWeaponEffectTooltip(effectKey, parts);\n                      if (tooltipText) {\n                        effectsHtml += `&lt;div class=\"weapon-effect-code status-effect\"&gt;${effectKey}\n                                        &lt;span class=\"effect-tooltip\"&gt;${tooltipText}&lt;/span&gt;\n                                    &lt;/div&gt;`;\n                      }\n                    } else if (codeType === 'EN') {\n                      const parts = codeValue.split(',');\n                      const effectKey = parts[0];\n\n                      const tooltipText = TooltipGenerator.generateEnchantmentTooltip(effectKey, parts);\n                      if (tooltipText) {\n                        effectsHtml += `&lt;div class=\"weapon-effect-code status-effect\"&gt;${effectKey}\n                                        &lt;span class=\"effect-tooltip\"&gt;${tooltipText}&lt;/span&gt;\n                                    &lt;/div&gt;`;\n                      }\n                    }\n                  });\n\n                  const isUsed = weapon.used || battleState.player.ap &lt;= 0 || weapon.currentCooldown &gt; 0;\n                  const usedClass = isUsed ? 'used' : '';\n                  const cooldownText = weapon.currentCooldown &gt; 0 ? ` (冷却:${weapon.currentCooldown})` : '';\n                  return `\n                        &lt;button class=\"weapon-button ${usedClass}\" data-weapon-index=\"${battleState.player.weapons.indexOf(\n                    weapon,\n                  )}\" ${isUsed ? 'disabled' : ''}&gt;\n                            &lt;div class=\"weapon-button-name\"&gt;${weapon.name}${cooldownText}&lt;/div&gt;\n                            &lt;div class=\"weapon-button-stats\"&gt;\n                                &lt;div&gt;${weapon.isHealing ? '治疗: ' : '攻击: '}${weapon.attack}&lt;/div&gt;\n                                &lt;div&gt;命中: ${weapon.hitRate}%&lt;/div&gt;\n                                &lt;div&gt;暴击: ${weapon.critRate}%&lt;/div&gt;\n                                &lt;div&gt;次数: ${weapon.attacksPerTurn}&lt;/div&gt;\n                                &lt;div&gt;目标: ${weapon.targetsPerAttack}&lt;/div&gt;\n                                &lt;div&gt;MP: ${weapon.mpCost}&lt;/div&gt;\n                                &lt;div&gt;AP: 1&lt;/div&gt;\n                                &lt;div&gt;冷却: ${weapon.cooldown}回合&lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"weapon-effect-codes\"&gt;\n                                ${effectsHtml}\n                            &lt;/div&gt;\n                        &lt;/button&gt;\n                    `;\n                })\n                .join('')\n            : '&lt;div style=\"text-align: center; padding: 10px;\"&gt;没有可用的神通&lt;/div&gt;';\n\n        const attackControls = document.querySelector('.attack-controls');\n        attackControls.innerHTML = `\n                &lt;button id=\"attack-btn\" class=\"attack-button\" disabled&gt;&lt;i class=\"fas fa-hand-fist\"&gt;&lt;/i&gt; 攻击选中目标&lt;/button&gt;\n                &lt;button id=\"next-round-btn\" class=\"next-round-button\"&gt;&lt;i class=\"fas fa-arrow-right-to-bracket\"&gt;&lt;/i&gt; 跳过当前行动&lt;/button&gt;\n                &lt;button id=\"mid-action-btn\" class=\"mid-action-button\"&gt;&lt;i class=\"fas fa-pause\"&gt;&lt;/i&gt; 中途行动&lt;/button&gt;\n            `;\n\n        EventManager.bindWeaponButtons(battleState.player.weapons);\n\n        const attackBtn = document.getElementById('attack-btn');\n        if (attackBtn) {\n          attackBtn.addEventListener('click', performPlayerAttack);\n        }\n\n        setupSkipButton();\n      }\n\n      function updateItemsList() {\n\n        if (!lazyRenderManager.shouldRenderCombat()) {\n          return;\n        }\n        const items = battleState.player.items || [];\n\n        const itemsList = document.getElementById('items-list');\n        itemsList.innerHTML =\n          items.length &gt; 0\n            ? items\n                .map(item =&gt; {\n\n                  let effectText = '';\n                  switch (item.type) {\n                    case 1: \n                      effectText = `恢复 ${item.value} 点生命值`;\n                      break;\n                    case 2: \n                      effectText = `恢复 ${item.value} 点灵力值`;\n                      break;\n                    case 3: \n                      effectText = `根骨+${item.value}，持续${item.duration}回合`;\n                      break;\n                    case 4: \n                      effectText = `身法+${item.value}，持续${item.duration}回合`;\n                      break;\n                    case 5: \n                      effectText = `神识+${item.value}，持续${item.duration}回合`;\n                      break;\n                    case 6: \n                      effectText = `淬体+${item.value}，持续${item.duration}回合`;\n                      break;\n                    default:\n                      effectText = '未知效果';\n                  }\n\n                  const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n                  let isUsed = false; \n\n                  isUsed = item.count &lt;= 0 || battleState.currentItemUsed === true;\n                  const usedClass = isUsed ? 'used' : '';\n                  return `\n                        &lt;button class=\"item-button ${usedClass}\" data-item-index=\"${battleState.player.items.indexOf(\n                    item,\n                  )}\" ${isUsed ? 'disabled' : ''}&gt;\n                            &lt;div class=\"item-button-name\"&gt;\n                                ${item.name}\n                                &lt;span class=\"item-button-count\"&gt;x${item.count}&lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"item-button-effect\"&gt;${effectText}&lt;/div&gt;\n                        &lt;/button&gt;\n                    `;\n                })\n                .join('')\n            : '&lt;div style=\"text-align: center; padding: 10px;\"&gt;没有可用的丹药&lt;/div&gt;';\n\n        EventManager.bindItemButtons(battleState.player.items);\n      }\n\n      function performAttack(isPlayer = true) {\n\n        if (battleState.currentItem) {\n          const user = isPlayer ? null : battleState.currentTeammate;\n          useItem(battleState.currentItem, user);\n\n          battleState.currentItemUsed = true;\n\n          battleState.currentItem = null;\n\n          memoryManager.safeSetTimeout(\n            () =&gt; {\n              updatePlayerPanel();\n              updateEnemyPanel();\n              if (isPlayer) {\n                updateItemsList();\n              } else {\n\n                updateTeammateWeaponsList();\n                updateItemsList();\n              }\n            },\n            isPlayer ? 1200 : 0,\n          ); \n\n          setupSkipButton();\n\n          return;\n        }\n        const attacker = isPlayer ? battleState.player : battleState.currentTeammate;\n        const weapon = battleState.currentWeapon;\n        if (!weapon || battleState.attackInProgress) {\n          return;\n        }\n\n        if (isPlayer) {\n\n          if (attacker.ap &lt;= 0) {\n            logBattleAction(`行动点不足，无法使用 ${weapon.name}！`);\n            return;\n          }\n        } else {\n\n          if (attacker.ap &lt;= 0) {\n            logBattleAction(`${attacker.name} 行动点不足，无法使用 ${weapon.name}！`);\n            return;\n          }\n          const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n\n        }\n        if (weapon.currentCooldown &gt; 0) {\n          logBattleAction(`${weapon.name} 还在冷却中，剩余 ${weapon.currentCooldown} 回合！`);\n          return;\n        }\n\n        if (attacker.mp &lt; weapon.mpCost) {\n          logBattleAction(`MP不足，无法使用 ${weapon.name}！`);\n          return;\n        }\n\n        attacker.ap -= 1;\n\n        if (weapon.cooldown &gt; 0) {\n          weapon.currentCooldown = weapon.cooldown;\n        }\n\n        battleState.attackInProgress = true;\n\n        const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n\n        const isHealingWeapon =\n          weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4' || weapon.isHealing;\n        if (isHealingWeapon) {\n\n          if (isPlayer) {\n            executeHealingSequence(weapon, weaponTemplate);\n          } else {\n            executeTeammateHealingSequence(attacker, weapon, weaponTemplate);\n          }\n          return;\n        }\n\n        if (isPlayer) {\n          executeAttackSequence(weapon);\n        } else {\n          executeTeammateAttackSequence(attacker, weapon);\n        }\n      }\n\n      function performPlayerAttack() {\n        performAttack(true);\n      }\n\n      function performTeammateAttack() {\n        performAttack(false);\n      }\n\n      function executeAttackSequence(weapon) {\n\n        battleState.currentAttackCount = 0;\n\n        function performNextAttack() {\n\n          let actualAttacksPerTurn = weapon.attacksPerTurn;\n          if (battleState.sacrificeBoostActive) {\n            actualAttacksPerTurn += battleState.sacrificeBoostActive.attacksPerTurn;\n          }\n\n          if (battleState.player.mp &lt; weapon.mpCost) {\n            logBattleAction(`蓝量不足！无法继续攻击。已完成 ${battleState.currentAttackCount} 次攻击。`);\n\n            weapon.used = true;\n\n            battleState.currentWeapon = null;\n\n            battleState.attackInProgress = false;\n\n            updateBattleUI({ player: true, enemy: true, weapons: true });\n            return;\n          }\n\n          if (\n            StateValidator.shouldEndAttack(\n              battleState.currentAttackCount,\n              actualAttacksPerTurn,\n              battleState.selectedEnemies.length &gt; 0,\n            )\n          ) {\n\n            weapon.used = true;\n\n            battleState.currentWeapon = null;\n\n            battleState.attackInProgress = false;\n\n            updateBattleUI({ player: true, enemy: true, weapons: true });\n            return;\n          }\n\n          battleState.currentAttackCount++;\n\n          const attackNumber = battleState.currentAttackCount;\n\n          if (actualAttacksPerTurn &gt; 1) {\n            logBattleAction(\n              `${battleState.player.name || 'User'} 使用 ${weapon.name} 进行第 ${\n                attackNumber + 1\n              }/${actualAttacksPerTurn} 次攻击！`,\n            );\n          } else {\n            logBattleAction(`${battleState.player.name || 'User'} 使用 ${weapon.name} 攻击！`);\n          }\n\n          const playerEntity = document.querySelector('.combat-entity.player');\n          playerEntity.classList.add('attack-animation-forward');\n\n          setTimeout(() =&gt; {\n\n            for (const enemyId of battleState.selectedEnemies) {\n              const enemy = battleState.enemies.find(e =&gt; e.id === enemyId);\n              if (enemy) {\n\n                const playerStats = getPlayerActualStats();\n                const enemyStats = getEnemyActualStats(enemy);\n\n                const finalHitRate = calculateFinalHitRate(weapon.hitRate, playerStats, enemyStats);\n                const hitRoll = Math.random();\n\n                if (hitRoll &lt;= Math.min(1.0, finalHitRate)) {\n\n                  logBattleAction(`攻击命中 ${enemy.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n\n                  const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemyId}\"]`);\n                  enemyElement.classList.add('shake-animation');\n\n                  let finalCritRate = calculateFinalCritRate(weapon.critRate, playerStats, enemyStats, finalHitRate);\n\n                  if (battleState.sacrificeBoostActive) {\n                    finalCritRate += battleState.sacrificeBoostActive.critRate / 100;\n                  }\n\n                  battleState.playerBuffs.forEach(buff =&gt; {\n                    if (buff.type === 'critBoost') {\n                      finalCritRate += buff.value / 100;\n                    }\n                  });\n\n                  if (enemy.marks &amp;&amp; enemy.marks.weakness) {\n                    finalCritRate += enemy.marks.weakness / 100;\n                    logBattleAction(`破绽标记消耗！暴击率额外提升 ${enemy.marks.weakness}%！`);\n                    delete enemy.marks.weakness;\n                  }\n\n                  if (finalHitRate &gt; 1.0) {\n                    const overHitBonus = (finalHitRate - 1.0) * 0.5;\n                    logBattleAction(\n                      `超命中转换：命中率 ${(finalHitRate * 100).toFixed(1)}% → 暴击率额外 +${(\n                        overHitBonus * 100\n                      ).toFixed(1)}%`,\n                    );\n                  }\n                  if (finalCritRate &gt; 1.0) {\n                    const overCritBonus = (finalCritRate - 1.0) * 0.5;\n                    logBattleAction(\n                      `超暴击转换：暴击率 ${(finalCritRate * 100).toFixed(1)}% → 暴击伤害额外 +${(\n                        overCritBonus * 100\n                      ).toFixed(1)}%`,\n                    );\n                  }\n                  const critRoll = Math.random();\n\n                  const isCrit = critRoll &lt;= Math.min(1.0, finalCritRate);\n\n                  const finalCritMultiplier = isCrit\n                    ? calculateFinalCritMultiplier(playerStats, enemyStats, finalCritRate)\n                    : 1.0;\n\n                  let baseAttack = weapon.attack;\n                  if (battleState.sacrificeBoostActive) {\n                    baseAttack += battleState.sacrificeBoostActive.attack;\n                    logBattleAction(`牺牲增益生效！攻击力增加 ${battleState.sacrificeBoostActive.attack}！`);\n                  }\n\n                  let damage = calculateFinalDamage(baseAttack, playerStats, enemyStats, isCrit, finalCritMultiplier);\n\n                  if (enemy.marks) {\n\n                    if (enemy.marks.vulnerability) {\n                      const bonusDamage = Math.floor(damage * (enemy.marks.vulnerability / 100));\n                      damage += bonusDamage;\n                      logBattleAction(`易伤标记消耗！额外造成 ${bonusDamage} 点伤害！`);\n                      delete enemy.marks.vulnerability;\n                    }\n\n                    if (enemy.marks.death &amp;&amp; isCrit) {\n                      const bonusCritDamage = Math.floor(damage * (enemy.marks.death / 100));\n                      damage += bonusCritDamage;\n                      logBattleAction(`死点标记消耗！暴击额外造成 ${bonusCritDamage} 点伤害！`);\n                      delete enemy.marks.death;\n                    }\n                  }\n\n                  if (enemy.stacks &amp;&amp; enemy.stacks.corrosion) {\n\n                    let corrosionBonusPerStack = 5; \n                    if (weapon.codes) {\n                      const corrosionCode = weapon.codes.find(code =&gt; code.startsWith('EN:B19'));\n                      if (corrosionCode) {\n                        const match = corrosionCode.match(/EN:B19,\\d+,(\\d+)%/);\n                        if (match) {\n                          corrosionBonusPerStack = parseInt(match[1]);\n                        }\n                      }\n                    }\n                    const corrosionBonus = enemy.stacks.corrosion * corrosionBonusPerStack;\n                    const bonusDamage = Math.floor(damage * (corrosionBonus / 100));\n                    damage += bonusDamage;\n                    logBattleAction(`腐蚀效果！${enemy.stacks.corrosion} 层腐蚀造成额外 ${bonusDamage} 点伤害！`);\n                  }\n\n                  const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n\n                  if (weaponTemplate) {\n                    switch (weaponTemplate) {\n                      case 'A1':\n\n                        logBattleAction(\n                          `使用${weapon.name}对${battleState.selectedEnemies\n                            .map(id =&gt; battleState.enemies.find(e =&gt; e.id === id)?.name)\n                            .join('、')}造成伤害！`,\n                        );\n                        break;\n                      case 'A2':\n\n                        break;\n                      case 'A3':\n\n                        break;\n                      case 'A4':\n\n                        logBattleAction(`使用${weapon.name}！牺牲自身换取强大增益！`);\n                        break;\n                    }\n                  }\n\n                  if (isCrit) {\n                    logBattleAction(\n                      `暴击！造成 ${damage} 点伤害！(暴击率: ${(finalCritRate * 100).toFixed(\n                        1,\n                      )}%, 暴击倍率: ${finalCritMultiplier.toFixed(2)}x)`,\n                    );\n\n                    showDamageNumber('enemy', damage, true, enemyId);\n\n                    if (weapon.codes.some(code =&gt; code.startsWith('EN:B4'))) {\n                      const freezeMatch = weapon.codes.find(code =&gt; code.startsWith('EN:B4')).match(/EN:B4,(\\d+)/);\n                      const freezeDuration = freezeMatch ? parseInt(freezeMatch[1]) : 1;\n\n                      enemy.pendingFreeze = true;\n                      enemy.pendingFreezeCount = freezeDuration;\n                      logBattleAction(`冷狱特效触发！${enemy.name} 将在下次行动时被晕眩！`);\n                    }\n\n                    if (weapon.codes.some(code =&gt; code.startsWith('EN:B3'))) {\n                      const critBoostMatch = weapon.codes\n                        .find(code =&gt; code.startsWith('EN:B3'))\n                        .match(/EN:B3,(\\d+),(\\d+)%/);\n                      if (critBoostMatch) {\n                        const duration = parseInt(critBoostMatch[1]);\n                        const boostAmount = parseInt(critBoostMatch[2]);\n                        battleState.playerBuffs.push({\n                          name: '乘胜加成',\n                          type: 'critBoost',\n                          value: boostAmount,\n                          duration: duration,\n                          isPositive: true,\n                        });\n                        logBattleAction(`乘胜特效触发！暴击率提升 ${boostAmount}% 持续 ${duration} 回合！`);\n                      }\n                    }\n                  } else {\n                    logBattleAction(`造成 ${damage} 点伤害！`);\n                    showDamageNumber('enemy', damage, false, enemyId);\n                  }\n\n                  const extraDamage = processEnchantmentEffects(weapon, enemy, damage, isCrit);\n                  damage += extraDamage;\n\n                  if (enemy.buffs) {\n                    const vulnerableBuff = enemy.buffs.find(buff =&gt; buff.type === 'vulnerable');\n                    if (vulnerableBuff) {\n                      const bonusDamage = Math.floor(damage * (vulnerableBuff.value / 100));\n                      damage += bonusDamage;\n                      logBattleAction(`${enemy.name} 处于易伤状态，额外受到 ${bonusDamage} 点伤害！`);\n                    }\n                  }\n\n                  if (damage &gt; battleState.highestDamageWeapon.damage) {\n                    battleState.highestDamageWeapon.name = weapon.name;\n                    battleState.highestDamageWeapon.damage = damage;\n                  }\n\n                  const oldHp = enemy.hp;\n                  enemy.hp = Math.max(0, enemy.hp - damage);\n\n                  addDamageHate('player', battleState.player.name || 'User', enemyId, damage);\n\n                  addHpChangeAnimation('enemy', enemyId);\n\n                  if (StateValidator.checkEnemyDeath(enemy)) {\n                    return; \n                  }\n\n                  setTimeout(() =&gt; {\n                    if (enemyElement) {\n                      enemyElement.classList.remove('shake-animation');\n                    }\n                  }, 800);\n                } else {\n\n                  logBattleAction(`攻击未命中 ${enemy.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n                }\n              }\n            }\n\n            battleState.player.mp = Math.max(0, battleState.player.mp - weapon.mpCost);\n            if (weapon.mpCost &gt; 0) {\n              logBattleAction(`消耗 ${weapon.mpCost} 点灵力值。剩余灵力值: ${battleState.player.mp}`);\n            }\n\n            playerEntity.classList.remove('attack-animation-forward');\n\n            memoryManager.safeSetTimeout(() =&gt; {\n              updatePlayerPanel();\n              updateEnemyPanel();\n            }, 1500); \n\n            if (\n              battleState.currentAttackCount &lt; actualAttacksPerTurn &amp;&amp;\n              battleState.selectedEnemies.length &gt; 0 &amp;&amp;\n              battleState.enemies.length &gt; 0\n            ) {\n\n              setTimeout(performNextAttack, 800);\n            } else {\n\n              weapon.used = true;\n\n              battleState.currentWeapon = null;\n\n              battleState.attackInProgress = false;\n\n              updateWeaponsList();\n              enablePlayerControls();\n\n              updatePlayerPanel();\n              updateWeaponsList();\n              enablePlayerControls();\n            }\n          }, 500); \n        }\n\n        performNextAttack();\n      }\n\n      function performHealing(weapon, targetType, targetEntity = null) {\n        const targetName =\n          targetType === 'player'\n            ? battleState.player.name || 'User'\n            : targetType === 'teammate'\n            ? targetEntity.name\n            : targetType === 'enemy'\n            ? targetEntity.name\n            : 'Unknown';\n        logBattleAction(`${battleState.player.name || 'User'} 使用 ${weapon.name} 治疗 ${targetName}！`);\n\n        let healAmount = weapon.attack;\n\n        const critRoll = Math.random() * 100;\n        const isCrit = critRoll &lt;= weapon.critRate;\n        if (isCrit) {\n\n          const playerStats = getPlayerActualStats();\n          const critMultiplier = playerStats.baseCritMultiplier;\n          healAmount = Math.floor(healAmount * critMultiplier);\n          logBattleAction(`暴击治疗！恢复 ${healAmount} 点生命值！`);\n        } else {\n          logBattleAction(`恢复 ${healAmount} 点生命值！`);\n        }\n\n        if (targetType === 'player') {\n          const oldHp = battleState.player.hp;\n          battleState.player.hp = Math.min(battleState.player.hp + healAmount, battleState.player.maxHp);\n          const actualHeal = battleState.player.hp - oldHp;\n\n          showHealNumber(actualHeal);\n\n          const playerHpBar = document.querySelector('.combat-entity.player .hp-fill-combat');\n          playerHpBar.classList.add('hp-change-animation');\n          setTimeout(() =&gt; {\n            playerHpBar.classList.remove('hp-change-animation');\n          }, 800);\n\n          const playerEntity = document.querySelector('.combat-entity.player');\n          playerEntity.classList.add('heal-pulse-animation');\n          setTimeout(() =&gt; {\n            playerEntity.classList.remove('heal-pulse-animation');\n          }, 800);\n        } else if (targetType === 'teammate' &amp;&amp; targetEntity) {\n          const oldHp = targetEntity.hp;\n          targetEntity.hp = Math.min(targetEntity.hp + healAmount, targetEntity.maxHp);\n          const actualHeal = targetEntity.hp - oldHp;\n\n          logBattleAction(`实际恢复了 ${actualHeal} 点生命值！`);\n\n          const teammateHpBar = document.querySelector(\n            `.combat-entity.teammate[data-teammate-id=\"${targetEntity.id}\"] .hp-fill-combat`,\n          );\n          if (teammateHpBar) {\n\n            const teammateElement = teammateHpBar.closest('.combat-entity.teammate');\n            const teammateId = teammateElement ? teammateElement.getAttribute('data-teammate-id') : null;\n            if (teammateId) {\n              addHpChangeAnimation('teammate', teammateId);\n            }\n          }\n\n          const teammateElement = document.querySelector(\n            `.combat-entity.teammate[data-teammate-id=\"${targetEntity.id}\"]`,\n          );\n          if (teammateElement) {\n            teammateElement.classList.add('heal-pulse-animation');\n            setTimeout(() =&gt; {\n              teammateElement.classList.remove('heal-pulse-animation');\n            }, 800);\n          }\n        } else if (targetType === 'enemy' &amp;&amp; targetEntity) {\n          const oldHp = targetEntity.hp;\n          targetEntity.hp = Math.min(targetEntity.hp + healAmount, targetEntity.maxHp);\n          const actualHeal = targetEntity.hp - oldHp;\n\n          showHealNumberOnEnemy(actualHeal, targetEntity.id);\n\n          const enemyHpBar = document.querySelector(\n            `.combat-entity.enemy[data-enemy-id=\"${targetEntity.id}\"] .hp-fill-combat`,\n          );\n          if (enemyHpBar) {\n\n            const enemyElement = enemyHpBar.closest('.combat-entity.enemy');\n            const enemyId = enemyElement ? enemyElement.getAttribute('data-enemy-id') : null;\n            if (enemyId) {\n              addHpChangeAnimation('enemy', enemyId);\n            }\n          }\n\n          const enemyEntity = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${targetEntity.id}\"]`);\n          if (enemyEntity) {\n            enemyEntity.classList.add('heal-pulse-animation');\n            setTimeout(() =&gt; {\n              enemyEntity.classList.remove('heal-pulse-animation');\n            }, 800);\n          }\n        }\n\n        addHealHate('player', battleState.player.name || 'User', healAmount);\n\n        memoryManager.safeSetTimeout(() =&gt; {\n          updateBattleUI({ player: true, enemy: true, weapons: true });\n          updateHateDisplay(); \n\n          if (battleState.currentWeapon &amp;&amp; battleState.currentWeapon.template === 'A2' &amp;&amp; battleState.isPlayerTurn) {\n            moveToNextAction();\n          }\n        }, 1200); \n      }\n\n      function performManaRestore(weapon, targetType, targetTeammate = null) {\n        const targetName =\n          targetType === 'player'\n            ? battleState.player.name || 'User'\n            : targetType === 'teammate'\n            ? targetTeammate.name\n            : 'Unknown';\n        logBattleAction(`${battleState.player.name || 'User'} 使用 ${weapon.name} 恢复 ${targetName} 的灵力！`);\n\n        let manaAmount = weapon.attack;\n\n        const critRoll = Math.random() * 100;\n        const isCrit = critRoll &lt;= weapon.critRate;\n        if (isCrit) {\n\n          const playerStats = getPlayerActualStats();\n          const critMultiplier = playerStats.baseCritMultiplier;\n          manaAmount = Math.floor(manaAmount * critMultiplier);\n          logBattleAction(`暴击恢复！恢复 ${manaAmount} 点灵力值！`);\n        } else {\n          logBattleAction(`恢复 ${manaAmount} 点灵力值！`);\n        }\n\n        if (targetType === 'player') {\n          const oldMp = battleState.player.mp;\n          battleState.player.mp = Math.min(battleState.player.mp + manaAmount, battleState.player.maxMp);\n          const actualRestore = battleState.player.mp - oldMp;\n\n          logBattleAction(`实际恢复了 ${actualRestore} 点灵力值！`);\n        } else if (targetType === 'teammate' &amp;&amp; targetTeammate) {\n          const oldMp = targetTeammate.mp;\n          targetTeammate.mp = Math.min(targetTeammate.mp + manaAmount, targetTeammate.maxMp);\n          const actualRestore = targetTeammate.mp - oldMp;\n\n          logBattleAction(`实际恢复了 ${actualRestore} 点灵力值！`);\n        }\n\n        memoryManager.safeSetTimeout(() =&gt; {\n          updateBattleUI({ player: true, enemy: true, weapons: true });\n          updateHateDisplay(); \n\n          if (battleState.currentWeapon &amp;&amp; battleState.currentWeapon.template === 'A3' &amp;&amp; battleState.isPlayerTurn) {\n            moveToNextAction();\n          }\n        }, 1200); \n      }\n\n      function performSacrificeBoost(weapon, targetType) {\n        const targetName = targetType === 'player' ? battleState.player.name || 'User' : 'Unknown';\n        logBattleAction(`${battleState.player.name || 'User'} 使用 ${weapon.name} 进行牺牲增益！`);\n\n        const sacrificeDamage = Math.floor(weapon.attack * 0.5); \n\n        battleState.player.hp = Math.max(1, battleState.player.hp - sacrificeDamage); \n        logBattleAction(`牺牲了 ${sacrificeDamage} 点生命值！`);\n\n        if (!battleState.sacrificeBoostActive) {\n          battleState.sacrificeBoostActive = {\n            attack: weapon.attack,\n            hitRate: weapon.hitRate,\n            critRate: weapon.critRate,\n            attacksPerTurn: weapon.attacksPerTurn,\n            targetsPerAttack: weapon.targetsPerAttack,\n            weaponName: weapon.name,\n          };\n          logBattleAction(`获得强大增益！本回合所有攻击都将获得 ${weapon.name} 的属性加成！`);\n          logBattleAction(\n            `增益效果：攻击+${weapon.attack}，命中+${weapon.hitRate}%，暴击+${weapon.critRate}%，次数+${weapon.attacksPerTurn}，目标+${weapon.targetsPerAttack}`,\n          );\n        }\n\n        memoryManager.safeSetTimeout(() =&gt; {\n          updateBattleUI({ player: true, enemy: true, weapons: true });\n          updateHateDisplay(); \n\n          if (battleState.currentWeapon &amp;&amp; battleState.currentWeapon.template === 'A4' &amp;&amp; battleState.isPlayerTurn) {\n            moveToNextAction();\n          }\n        }, 1200); \n      }\nfunction processEnchantmentEffects(weapon, enemy, damage, isCrit) {\n  if (!weapon.codes) return 0;\n  let totalExtraDamage = 0;\n  weapon.codes.forEach(code =&gt; {\n    if (!code.startsWith('EN:B')) return;\n    const match = code.match(/EN:(B\\d+),(.+)/);\n    if (!match) return;\n    const effectType = match[1];\n    const params = match[2].split(',');\n    switch (effectType) {\n      case 'B1': \n        handleLifeSteal(params, damage);\n        break;\n      case 'B2': \n        handleHitRateDebuff(params, enemy);\n        break;\n      case 'B3': \n        if (isCrit) handleCritBoost(params);\n        break;\n      case 'B4': \n        if (isCrit) handleFreeze(params, enemy);\n        break;\n      case 'B5': \n        handleDOT(params, enemy);\n        break;\n      case 'B6': \n        handleChanceFreeze(params, enemy);\n        break;\n      case 'B7': \n        totalExtraDamage += handleChanceExtraDamage(params, damage);\n        break;\n      case 'B8': \n        handleVulnerability(params, enemy);\n        break;\n      case 'B9': \n        handleManaRestore(params);\n        break;\n      case 'B10': \n        handleHealOverTime(params);\n        break;\n      case 'B11': \n        handleStrengthBoost(params);\n        break;\n      case 'B12': \n        handleAgilityBoost(params);\n        break;\n      case 'B13': \n        handleIntelligenceBoost(params);\n        break;\n      case 'B14': \n        handleEnduranceBoost(params);\n        break;\n      case 'B15': \n        handleVulnerabilityMark(params, enemy);\n        break;\n      case 'B16': \n        handleWeaknessMark(params, enemy);\n        break;\n      case 'B17': \n        handleDeathMark(params, enemy);\n        break;\n      case 'B18': \n        handleTraumaStack(params, enemy);\n        break;\n      case 'B19': \n        handleCorrosionStack(params, enemy);\n        break;\n      case 'B20': \n        handlePermanentShield(params);\n        break;\n      case 'B21': \n        handleTemporaryShield(params);\n        break;\n      case 'B22': \n        handleShieldOverTime(params);\n        break;\n    }\n  });\n  return totalExtraDamage;\n}\n\nfunction handleLifeSteal(params, damage) {\n  BuffManager.handleLifeSteal(params, damage, battleState.player, true);\n  addHpChangeAnimation('player');\n}\n\nfunction handleHitRateDebuff(params, enemy) {\n  const duration = parseInt(params[0]);\n  const value = parseInt(params[1].replace('%', ''));\n  enemy.buffs = enemy.buffs || [];\n  enemy.buffs.push({\n    name: '命中降低',\n    type: 'hitRateDown',\n    value: value,\n    duration: duration,\n    isPositive: false,\n  });\n  logBattleAction(`命中降低效果触发！${enemy.name} 命中率降低 ${value}% 持续 ${duration} 回合！`);\n}\n\nfunction handleCritBoost(params) {\n  BuffManager.handleCritBoost(params, battleState.player, true);\n}\n\nfunction handleFreeze(params, enemy) {\n  const duration = parseInt(params[0]);\n\n  enemy.pendingFreeze = true;\n  enemy.pendingFreezeCount = duration;\n  logBattleAction(`晕眩效果触发！${enemy.name} 将在下次行动时被晕眩！`);\n}\n\nfunction handleDOT(params, enemy) {\n  const duration = parseInt(params[0]);\n  const damage = parseInt(params[1]);\n  enemy.buffs = enemy.buffs || [];\n  enemy.buffs.push({\n    name: '持续伤害',\n    type: 'dot',\n    value: damage,\n    duration: duration,\n    isPositive: false,\n  });\n  logBattleAction(`持续伤害效果触发！${enemy.name} 将在 ${duration} 回合内每回合受到 ${damage} 点伤害！`);\n}\n\nfunction handleChanceFreeze(params, enemy) {\n  const chance = parseInt(params[0].replace('%', ''));\n  const duration = parseInt(params[1]);\n  if (Math.random() * 100 &lt;= chance) {\n\n    enemy.pendingFreeze = true;\n    enemy.pendingFreezeCount = duration;\n    logBattleAction(`几率晕眩触发！${enemy.name} 将在下次行动时被晕眩！`);\n  }\n}\n\nfunction handleChanceExtraDamage(params, damage) {\n  const chance = parseInt(params[0].replace('%', ''));\n  const bonus = parseInt(params[1].replace('%', ''));\n  if (Math.random() * 100 &lt;= chance) {\n    const extraDamage = Math.floor(damage * (bonus / 100));\n    logBattleAction(`额外伤害触发！造成额外 ${extraDamage} 点伤害！`);\n    return extraDamage;\n  }\n  return 0;\n}\n\nfunction handleVulnerability(params, enemy) {\n  const duration = parseInt(params[0]);\n  const bonus = parseInt(params[1].replace('%', ''));\n  enemy.buffs = enemy.buffs || [];\n  enemy.buffs.push({\n    name: '易伤',\n    type: 'vulnerable',\n    value: bonus,\n    duration: duration,\n    isPositive: false,\n  });\n  logBattleAction(`易伤效果触发！${enemy.name} 受到伤害增加 ${bonus}% 持续 ${duration} 回合！`);\n}\n\nfunction handleManaRestore(params) {\n  const mp = parseInt(params[0]);\n  const oldMp = battleState.player.mp;\n  battleState.player.mp = Math.min(battleState.player.mp + mp, battleState.player.maxMp);\n  const actualRestore = battleState.player.mp - oldMp;\n  logBattleAction(`灵力恢复触发！恢复 ${actualRestore} 点灵力值！`);\n}\n\nfunction handleHealOverTime(params) {\n  const duration = parseInt(params[0]);\n  const heal = parseInt(params[1]);\n  battleState.playerBuffs.push({\n    name: '持续恢复',\n    type: 'healOverTime',\n    value: heal,\n    duration: duration,\n    isPositive: true,\n  });\n  logBattleAction(`持续恢复效果触发！将在 ${duration} 回合内每回合恢复 ${heal} 点生命值！`);\n}\n\nconst handleStrengthBoost = params =&gt; BuffManager.handleAttributeBoost(params, 'strBoost', '力量', true);\nconst handleAgilityBoost = params =&gt; BuffManager.handleAttributeBoost(params, 'agiBoost', '敏捷', true);\nconst handleIntelligenceBoost = params =&gt; BuffManager.handleAttributeBoost(params, 'intBoost', '智力', true);\nconst handleEnduranceBoost = params =&gt; BuffManager.handleAttributeBoost(params, 'endBoost', '耐力', true);\n\nfunction handleVulnerabilityMark(params, enemy) {\n  const bonus = parseInt(params[0].replace('%', ''));\n  enemy.marks = enemy.marks || {};\n  enemy.marks.vulnerability = bonus;\n  logBattleAction(`易伤标记施加！${enemy.name} 下次受到攻击将额外承受 ${bonus}% 伤害！`);\n}\nfunction handleWeaknessMark(params, enemy) {\n  const bonus = parseInt(params[0].replace('%', ''));\n  enemy.marks = enemy.marks || {};\n  enemy.marks.weakness = bonus;\n  logBattleAction(`破绽标记施加！${enemy.name} 下次受到攻击暴击率额外提升 ${bonus}%！`);\n}\nfunction handleDeathMark(params, enemy) {\n  const bonus = parseInt(params[0].replace('%', ''));\n  enemy.marks = enemy.marks || {};\n  enemy.marks.death = bonus;\n  logBattleAction(`死点标记施加！${enemy.name} 下次受到攻击暴击伤害额外提升 ${bonus}%！`);\n}\n\nfunction handleTraumaStack(params, enemy) {\n  const stacks = parseInt(params[0]);\n  const damage = parseInt(params[1]);\n  enemy.stacks = enemy.stacks || {};\n  enemy.stacks.trauma = (enemy.stacks.trauma || 0) + stacks;\n  logBattleAction(\n    `创伤叠加！${enemy.name} 获得 ${stacks} 层创伤效果（总计 ${enemy.stacks.trauma} 层），每层每回合造成 ${damage} 点伤害！`,\n  );\n}\nfunction handleCorrosionStack(params, enemy) {\n  const stacks = parseInt(params[0]);\n  const bonus = parseInt(params[1].replace('%', ''));\n  enemy.stacks = enemy.stacks || {};\n  enemy.stacks.corrosion = (enemy.stacks.corrosion || 0) + stacks;\n  logBattleAction(\n    `腐蚀叠加！${enemy.name} 获得 ${stacks} 层腐蚀效果（总计 ${enemy.stacks.corrosion} 层），每层使受到伤害增加 ${bonus}%！`,\n  );\n}\n\nfunction handlePermanentShield(params, target = battleState.player, targetName = null) {\n  const shieldValue = parseInt(params[0]);\n  const name = targetName || (target === battleState.player ? '你' : target.name);\n\n  if (!target.shield) {\n    target.shield = 0;\n    target.maxShield = shieldValue;\n  }\n\n  target.shield = target.maxShield;\n  logBattleAction(`${name}的固化护盾触发！护盾值恢复至 ${target.maxShield} 点！`);\n}\n\nfunction handleTemporaryShield(params, target = battleState.player, targetName = null) {\n  const shieldValue = parseInt(params[0]);\n  const name = targetName || (target === battleState.player ? '你' : target.name);\n\n  if (!target.tempShield) {\n    target.tempShield = 0;\n  }\n\n  target.tempShield += shieldValue;\n  logBattleAction(`${name}的瞬发护盾触发！获得 ${shieldValue} 点临时护盾（总计 ${target.tempShield} 点）！`);\n}\n\nfunction handleShieldOverTime(params, buffsArray = battleState.playerBuffs, targetName = null) {\n  const duration = parseInt(params[0]);\n  const shieldPerRound = parseInt(params[1]);\n  const name = targetName || '你';\n\n  const existingBuff = buffsArray.find(buff =&gt; buff.type === 'shieldOverTime');\n\n  if (existingBuff) {\n\n    existingBuff.value += shieldPerRound;\n    existingBuff.duration = Math.max(existingBuff.duration, duration); \n    logBattleAction(\n      `${name}的护盾持续效果叠加！每回合获得护盾值增加至 ${existingBuff.value} 点，持续 ${existingBuff.duration} 回合！`,\n    );\n  } else {\n\n    buffsArray.push({\n      name: '护盾持续',\n      type: 'shieldOverTime',\n      value: shieldPerRound,\n      duration: duration,\n      isPositive: true,\n    });\n    logBattleAction(`${name}的护盾持续效果触发！将在 ${duration} 回合内每回合获得 ${shieldPerRound} 点护盾！`);\n  }\n}\n\nfunction getPlayerActualStats() {\n  let str = battleState.player.str || 0;\n  let agi = battleState.player.agi || 0;\n  let int = battleState.player.int || 0;\n  let end = battleState.player.vit || 0; \n\n  battleState.playerBuffs.forEach(buff =&gt; {\n    switch (buff.type) {\n      case 'strBoost':\n        str += buff.value;\n        break;\n      case 'agiBoost':\n        agi += buff.value;\n        break;\n      case 'intBoost':\n        int += buff.value;\n        break;\n      case 'endBoost':\n        end += buff.value;\n        break;\n    }\n  });\n\n  const derivedStats = calculateDerivedStats(str, agi, int, end);\n  return {\n    str,\n    agi,\n    int,\n    end,\n    hpRegen: derivedStats.hpRegen,\n    mpRegen: derivedStats.mpRegen,\n    actionPoints: derivedStats.actionPoints,\n    speed: derivedStats.speed,\n    evasionRate: derivedStats.evasionRate,\n    damageBonus: derivedStats.damageBonus,\n    physicalReduction: derivedStats.physicalReduction,\n    damageTakenRate: derivedStats.damageTakenRate,\n    extraHitRate: derivedStats.extraHitRate,\n    extraCritRate: derivedStats.extraCritRate,\n    baseCritMultiplier: derivedStats.baseCritMultiplier,\n    critRateResistance: derivedStats.critRateResistance,\n    critDamageResistance: derivedStats.critDamageResistance,\n  };\n}\n\nfunction getTeammateActualStats(teammate) {\n  let str = teammate.str || 0;\n  let agi = teammate.agi || 0;\n  let int = teammate.int || 0;\n  let end = teammate.vit || 0; \n\n  if (teammate.buffs) {\n    teammate.buffs.forEach(buff =&gt; {\n      switch (buff.type) {\n        case 'strBoost':\n          str += buff.value;\n          break;\n        case 'agiBoost':\n          agi += buff.value;\n          break;\n        case 'intBoost':\n          int += buff.value;\n          break;\n        case 'endBoost':\n          end += buff.value;\n          break;\n      }\n    });\n  }\n\n  const derivedStats = calculateDerivedStats(str, agi, int, end);\n  return {\n    str,\n    agi,\n    int,\n    end,\n    hpRegen: derivedStats.hpRegen,\n    mpRegen: derivedStats.mpRegen,\n    actionPoints: derivedStats.actionPoints,\n    speed: derivedStats.speed,\n    evasionRate: derivedStats.evasionRate,\n    damageBonus: derivedStats.damageBonus,\n    physicalReduction: derivedStats.physicalReduction,\n    damageTakenRate: derivedStats.damageTakenRate,\n    extraHitRate: derivedStats.extraHitRate,\n    extraCritRate: derivedStats.extraCritRate,\n    baseCritMultiplier: derivedStats.baseCritMultiplier,\n    critRateResistance: derivedStats.critRateResistance,\n    critDamageResistance: derivedStats.critDamageResistance,\n  };\n}\n\nfunction getEnemyActualStats(enemy) {\n  let str = enemy.str || 0;\n  let agi = enemy.agi || 0;\n  let int = enemy.int || 0;\n  let vit = enemy.vit || 0;\n\n  if (enemy.buffs) {\n    enemy.buffs.forEach(buff =&gt; {\n      switch (buff.type) {\n        case 'strBoost':\n          str += buff.value;\n          break;\n        case 'agiBoost':\n          agi += buff.value;\n          break;\n        case 'intBoost':\n          int += buff.value;\n          break;\n        case 'endBoost':\n          vit += buff.value;\n          break;\n      }\n    });\n  }\n\n  const derivedStats = calculateDerivedStats(str, agi, int, vit);\n  return {\n    str,\n    agi,\n    int,\n    vit,\n    speed: derivedStats.speed,\n    evasionRate: derivedStats.evasionRate,\n    damageBonus: derivedStats.damageBonus,\n    physicalReduction: derivedStats.physicalReduction,\n    damageTakenRate: derivedStats.damageTakenRate,\n    extraHitRate: derivedStats.extraHitRate,\n    extraCritRate: derivedStats.extraCritRate,\n    baseCritMultiplier: derivedStats.baseCritMultiplier,\n    critRateResistance: derivedStats.critRateResistance,\n    critDamageResistance: derivedStats.critDamageResistance,\n  };\n}\n\nfunction processTeammateEnchantmentEffects(weapon, enemy, damage, isCrit, teammate) {\n  if (!weapon.codes) return 0;\n  let totalExtraDamage = 0;\n  weapon.codes.forEach(code =&gt; {\n    if (!code.startsWith('EN:B')) return;\n    const match = code.match(/EN:(B\\d+),(.+)/);\n    if (!match) return;\n    const effectType = match[1];\n    const params = match[2].split(',');\n    switch (effectType) {\n      case 'B1': \n        handleTeammateLifeSteal(params, damage, teammate);\n        break;\n      case 'B2': \n        handleHitRateDebuff(params, enemy);\n        break;\n      case 'B3': \n        if (isCrit) handleTeammateCritBoost(params, teammate);\n        break;\n      case 'B4': \n        if (isCrit) handleFreeze(params, enemy);\n        break;\n      case 'B5': \n        handleDOT(params, enemy);\n        break;\n      case 'B6': \n        handleChanceFreeze(params, enemy);\n        break;\n      case 'B7': \n        totalExtraDamage += handleChanceExtraDamage(params, damage);\n        break;\n      case 'B8': \n        handleVulnerability(params, enemy);\n        break;\n      case 'B9': \n        handleTeammateManaRestoreEffect(params, teammate);\n        break;\n      case 'B10': \n        handleTeammateHealOverTime(params, teammate);\n        break;\n      case 'B11': \n        handleTeammateStrengthBoost(params, teammate);\n        break;\n      case 'B12': \n        handleTeammateAgilityBoost(params, teammate);\n        break;\n      case 'B13': \n        handleTeammateIntelligenceBoost(params, teammate);\n        break;\n      case 'B14': \n        handleTeammateVitalityBoost(params, teammate);\n        break;\n      case 'B15': \n        handleVulnerabilityMark(params, enemy);\n        break;\n      case 'B16': \n        handleWeaknessMark(params, enemy);\n        break;\n      case 'B17': \n        handleDeathMark(params, enemy);\n        break;\n      case 'B18': \n        handleTraumaStack(params, enemy);\n        break;\n      case 'B19': \n        handleCorrosionStack(params, enemy);\n        break;\n      case 'B20': \n        handlePermanentShield(params, teammate, teammate.name);\n        break;\n      case 'B21': \n        handleTemporaryShield(params, teammate, teammate.name);\n        break;\n      case 'B22': \n        if (!teammate.buffs) teammate.buffs = [];\n        handleShieldOverTime(params, teammate.buffs, teammate.name);\n        break;\n    }\n  });\n  return totalExtraDamage;\n}\n\nconst handleTeammateLifeSteal = (params, damage, teammate) =&gt;\n  BuffManager.handleLifeSteal(params, damage, teammate, false);\nconst handleTeammateCritBoost = (params, teammate) =&gt; BuffManager.handleCritBoost(params, teammate, false);\nfunction handleTeammateManaRestoreEffect(params, teammate) {\n  const mp = parseInt(params[0]);\n  const oldMp = teammate.mp;\n  teammate.mp = Math.min(teammate.mp + mp, teammate.maxMp);\n  const actualRestore = teammate.mp - oldMp;\n  logBattleAction(`${teammate.name} 灵力恢复触发！恢复 ${actualRestore} 点灵力值！`);\n}\nfunction handleTeammateHealOverTime(params, teammate) {\n  const duration = parseInt(params[0]);\n  const heal = parseInt(params[1]);\n  teammate.buffs = teammate.buffs || [];\n  teammate.buffs.push({\n    name: '持续恢复',\n    type: 'healOverTime',\n    value: heal,\n    duration: duration,\n    isPositive: true,\n  });\n  logBattleAction(`${teammate.name} 持续恢复效果触发！将在 ${duration} 回合内每回合恢复 ${heal} 点生命值！`);\n}\n\nconst handleTeammateStrengthBoost = (params, teammate) =&gt;\n  BuffManager.handleAttributeBoost(params, 'strBoost', '力量', false, teammate);\nconst handleTeammateAgilityBoost = (params, teammate) =&gt;\n  BuffManager.handleAttributeBoost(params, 'agiBoost', '敏捷', false, teammate);\nconst handleTeammateIntelligenceBoost = (params, teammate) =&gt;\n  BuffManager.handleAttributeBoost(params, 'intBoost', '智力', false, teammate);\nconst handleTeammateVitalityBoost = (params, teammate) =&gt;\n  BuffManager.handleAttributeBoost(params, 'vitBoost', '体力', false, teammate);\n\n      function performEnemyTurn() {\n        battleState.waitingForNextRound = false;\n        logBattleAction(`敌人回合！`);\n\n        for (const enemy of battleState.enemies) {\n\n          if (enemy.pendingFreeze) {\n            logBattleAction(`${enemy.name} 被晕眩，无法行动！`);\n            enemy.pendingFreezeCount--;\n            if (enemy.pendingFreezeCount &lt;= 0) {\n              enemy.pendingFreeze = false;\n              enemy.pendingFreezeCount = 0;\n              logBattleAction(`${enemy.name} 解除了晕眩状态！`);\n            }\n            continue;\n          }\n\n          let totalBurnDamage = 0;\n          const burnBuffs = enemy.buffs ? enemy.buffs.filter(buff =&gt; buff.type === 'burnOverTime') : [];\n          if (burnBuffs.length &gt; 0) {\n\n            burnBuffs.forEach(burnBuff =&gt; {\n              totalBurnDamage += burnBuff.value;\n            });\n            if (totalBurnDamage &gt; 0) {\n              enemy.hp = Math.max(0, enemy.hp - totalBurnDamage);\n              logBattleAction(`${enemy.name} 受到余烬效果，损失 ${totalBurnDamage} 点生命值！`);\n\n              showDamageNumber('enemy', totalBurnDamage, false, enemy.id);\n\n              addHpChangeAnimation('enemy', enemy.id);\n\n              if (StateValidator.isDead(enemy)) {\n                logBattleAction(`${enemy.name} 被余烬效果击败了！`);\n\n                const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemy.id}\"]`);\n                createDeathEffect(enemyElement);\n                battleState.enemies = battleState.enemies.filter(e =&gt; e.id !== enemy.id);\n                if (StateValidator.areAllEnemiesDead()) {\n                  endBattle(true);\n                  return;\n                }\n\n                continue;\n              }\n            }\n          }\n\n          const attackName = enemy.attackPattern[enemy.nextAttackIndex];\n          const skill = enemy.skills.find(s =&gt; s.name === attackName);\n          if (skill) {\n            logBattleAction(`${enemy.name} 使用 ${skill.name} 攻击！`);\n\n            const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemy.id}\"]`);\n            enemyElement.classList.add('attack-animation-backward');\n\n            setTimeout(() =&gt; {\n\n              const effectiveHitRate = getEffectiveHitRate(skill.hitRate, enemy);\n\n              const maxTargets = skill.targetsPerAttack || 1;\n              const targets = getEnemyTargetsByHate(enemy.id, maxTargets);\n              if (targets.length === 0) {\n                logBattleAction(`${enemy.name} 找不到可攻击的目标！`);\n\n                setTimeout(() =&gt; {\n                  enemyElement.classList.remove('attack-animation-backward');\n                }, 500);\n                return;\n              }\n              if (maxTargets &gt; 1) {\n                logBattleAction(\n                  `${enemy.name} 的 ${skill.name} 瞄准了 ${targets.length} 个目标：${targets\n                    .map(t =&gt; t.name)\n                    .join(', ')}`,\n                );\n              }\n\n              targets.forEach((target, targetIndex) =&gt; {\n\n                const enemyStats = getEnemyActualStats(enemy);\n                let targetStats;\n                if (target.entity === battleState.player) {\n                  targetStats = getPlayerActualStats();\n                } else {\n\n                  targetStats = getTeammateActualStats(target.entity);\n                }\n\n                const finalHitRate = calculateFinalHitRate(effectiveHitRate, enemyStats, targetStats);\n                const hitRoll = Math.random();\n\n                if (hitRoll &lt;= Math.min(1.0, finalHitRate)) {\n\n                  logBattleAction(`攻击命中 ${target.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n\n                  const targetElement =\n                    target.type === 'player'\n                      ? document.querySelector('.combat-entity.player')\n                      : document.querySelector(`.combat-entity.teammate[data-teammate-id=\"${target.entity.id}\"]`);\n                  if (targetElement) {\n                    targetElement.classList.add('shake-animation');\n                  }\n\n                  const finalCritRate = calculateFinalCritRate(skill.critRate, enemyStats, targetStats, finalHitRate);\n                  const critRoll = Math.random();\n\n                  const isCrit = critRoll &lt;= Math.min(1.0, finalCritRate);\n\n                  const finalCritMultiplier = isCrit\n                    ? calculateFinalCritMultiplier(enemyStats, targetStats, finalCritRate)\n                    : 1.0;\n\n                  let damage = calculateFinalDamage(skill.attack, enemyStats, targetStats, isCrit, finalCritMultiplier);\n\n                  if (isCrit) {\n                    logBattleAction(\n                      `暴击！造成 ${damage} 点伤害！(暴击率: ${(finalCritRate * 100).toFixed(\n                        1,\n                      )}%, 暴击倍率: ${finalCritMultiplier.toFixed(2)}x)`,\n                    );\n                    if (target.type === 'player') {\n                      showDamageNumber('player', damage, true);\n                    } else {\n\n                      showDamageNumber('teammate', damage, true, null, target.entity.id);\n                    }\n                  } else {\n                    logBattleAction(`造成 ${damage} 点伤害！`);\n                    if (target.type === 'player') {\n                      showDamageNumber('player', damage, false);\n                    } else {\n\n                      showDamageNumber('teammate', damage, false, null, target.entity.id);\n                    }\n                  }\n\n                  let remainingDamage = damage;\n\n                  if (target.entity.tempShield &amp;&amp; target.entity.tempShield &gt; 0) {\n                    const tempShieldAbsorbed = Math.min(target.entity.tempShield, remainingDamage);\n                    target.entity.tempShield -= tempShieldAbsorbed;\n                    remainingDamage -= tempShieldAbsorbed;\n                    if (tempShieldAbsorbed &gt; 0) {\n                      logBattleAction(`临时护盾吸收 ${tempShieldAbsorbed} 点伤害！（剩余临时护盾 ${target.entity.tempShield} 点）`);\n                    }\n                  }\n\n                  if (remainingDamage &gt; 0 &amp;&amp; target.entity.shield &amp;&amp; target.entity.shield &gt; 0) {\n                    const shieldAbsorbed = Math.min(target.entity.shield, remainingDamage);\n                    target.entity.shield -= shieldAbsorbed;\n                    remainingDamage -= shieldAbsorbed;\n                    if (shieldAbsorbed &gt; 0) {\n                      logBattleAction(`护盾吸收 ${shieldAbsorbed} 点伤害！（剩余护盾 ${target.entity.shield} 点）`);\n                    }\n                  }\n\n                  const oldHp = target.entity.hp;\n                  target.entity.hp = Math.max(0, target.entity.hp - remainingDamage);\n\n                  if (target.type === 'player') {\n                    addHpChangeAnimation('player');\n                  } else {\n                    addHpChangeAnimation('teammate', target.entity.id);\n                  }\n\n                  setTimeout(() =&gt; {\n                    if (targetElement) {\n                      targetElement.classList.remove('shake-animation');\n                    }\n                  }, 800);\n\n                  if (StateValidator.isDead(target.entity)) {\n                    if (target.type === 'player') {\n\n                      battleState.lastKilledBy = skill.name;\n                      endBattle(false);\n                      return;\n                    } else {\n\n                      logBattleAction(`${target.name} 被击败了！`);\n\n                      createDeathEffect(targetElement);\n\n                      hateSystem.clearTargetHate(target.entity.id);\n\n                      battleState.teammates = battleState.teammates.filter(t =&gt; t.id !== target.entity.id);\n\n                      cleanupActionOrder('teammate', target.entity.id);\n\n                      updatePlayerPanel();\n                    }\n                  }\n                } else {\n\n                  logBattleAction(`攻击未命中 ${target.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n                }\n              }); \n\n              enemy.nextAttackIndex = (enemy.nextAttackIndex + 1) % enemy.attackPattern.length;\n\n              enemyElement.classList.remove('attack-animation-backward');\n            }, 500);\n          }\n        }\n\n        setTimeout(() =&gt; {\n\n          updatePlayerPanel();\n          updateEnemyPanel();\n          updateHateDisplay(); \n\n          startNextRound();\n        }, 1500); \n      }\n\n      function forceUpdateUI() {\n\n        updateActionOrderDisplay();\n\n        const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n        if (!currentAction) {\n          return;\n        }\n\n        document.querySelectorAll('.combat-entity').forEach(entity =&gt; {\n          entity.classList.remove('current-actor');\n        });\n        if (currentAction.type === 'player') {\n          const playerEntity = document.querySelector('.combat-entity.player');\n          if (playerEntity) {\n            playerEntity.classList.add('current-actor');\n          }\n        } else if (currentAction.type === 'teammate') {\n          const teammateEntity = document.querySelector(\n            `.combat-entity.teammate[data-teammate-id=\"${currentAction.id}\"]`,\n          );\n          if (teammateEntity) {\n            teammateEntity.classList.add('current-actor');\n          }\n\n          battleState.currentTeammate = currentAction.entity;\n          updateTeammateWeaponsList(); \n        } else if (currentAction.type === 'enemy') {\n          const enemyEntity = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${currentAction.id}\"]`);\n          if (enemyEntity) {\n            enemyEntity.classList.add('current-actor');\n          }\n        }\n\n        setupSkipButton();\n\n        updateBattleUI({ player: true, enemy: true, weapons: false });\n        updateHateDisplay(); \n      }\n\n      function updateBattleUI(options = {}) {\n        const {\n          player = true,\n          enemy = true,\n          weapons = true,\n          items = false,\n          teammates = false,\n          force = false,\n        } = options;\n\n        if (force || lazyRenderManager.shouldRenderCombat()) {\n          if (player) updatePlayerPanel();\n          if (enemy) updateEnemyPanel();\n          if (weapons) updateWeaponsList();\n          if (items) updateItemsList();\n          if (teammates) updateTeammateWeaponsList();\n        }\n      }\n\n      function startNextRound() {\n\n        battleState.round++;\n\n        battleState.currentItemUsed = false;\n\n        battleState.player.weapons.forEach(weapon =&gt; {\n          weapon.used = false;\n          if (weapon.currentCooldown &gt; 0) {\n            weapon.currentCooldown--;\n          }\n        });\n        battleState.player.items.forEach(item =&gt; {\n          item.used = false;\n        });\n\n        battleState.teammates.forEach(teammate =&gt; {\n          teammate.skillUsed = false;\n          teammate.weapons.forEach(weapon =&gt; {\n            weapon.used = false;\n\n            if (weapon.currentCooldown &gt; 0) {\n              weapon.currentCooldown--;\n            }\n          });\n        });\n\n        const currentPlayerStats = getPlayerActualStats();\n        battleState.player.hp = Math.min(battleState.player.hp + currentPlayerStats.hpRegen, battleState.player.maxHp);\n        battleState.player.mp = Math.min(battleState.player.mp + currentPlayerStats.mpRegen, battleState.player.maxMp);\n\n        battleState.teammates.forEach(teammate =&gt; {\n          const currentTeammateStats = getTeammateActualStats(teammate);\n\n          teammate.hp = Math.min(teammate.hp + (teammate.hpRegen || 0), teammate.maxHp);\n          teammate.mp = Math.min(teammate.mp + currentTeammateStats.mpRegen, teammate.maxMp);\n\n          if (teammate.buffs &amp;&amp; teammate.buffs.length &gt; 0) {\n            teammate.buffs.forEach(buff =&gt; {\n              if (buff.type === 'healOverTime') {\n                const healAmount = buff.value;\n                const oldHp = teammate.hp;\n                teammate.hp = Math.min(teammate.hp + healAmount, teammate.maxHp);\n                const actualHeal = teammate.hp - oldHp;\n                if (actualHeal &gt; 0) {\n                  logBattleAction(`${teammate.name} 持续恢复效果触发，恢复 ${actualHeal} 点生命值！`);\n                  showHealNumber(actualHeal);\n                }\n              }\n\n              if (buff.type === 'shieldOverTime') {\n                const shieldAmount = buff.value;\n\n                if (!teammate.shield) {\n                  teammate.shield = 0;\n                  teammate.maxShield = 0;\n                }\n\n                teammate.shield += shieldAmount;\n                logBattleAction(`${teammate.name}的护盾持续效果触发，获得 ${shieldAmount} 点护盾（当前护盾 ${teammate.shield} 点）！`);\n              }\n            });\n          }\n\n          if (teammate.tempShield) {\n            logBattleAction(`${teammate.name}的临时护盾消散，失去 ${teammate.tempShield} 点临时护盾！`);\n            teammate.tempShield = 0;\n          }\n        });\n\n        const healOTBuff = battleState.playerBuffs.find(buff =&gt; buff.type === 'healOverTime');\n        if (healOTBuff) {\n          const healAmount = healOTBuff.value;\n          const oldHp = battleState.player.hp;\n          battleState.player.hp = Math.min(battleState.player.hp + healAmount, battleState.player.maxHp);\n          const actualHeal = battleState.player.hp - oldHp;\n          if (actualHeal &gt; 0) {\n            logBattleAction(`持续恢复效果触发，恢复 ${actualHeal} 点生命值！`);\n            showHealNumber(actualHeal);\n\n            addHpChangeAnimation('player');\n\n            const playerEntity = document.querySelector('.combat-entity.player');\n            playerEntity.classList.add('heal-pulse-animation');\n            setTimeout(() =&gt; {\n              playerEntity.classList.remove('heal-pulse-animation');\n            }, 800);\n          }\n        }\n\n        const shieldOTBuff = battleState.playerBuffs.find(buff =&gt; buff.type === 'shieldOverTime');\n        if (shieldOTBuff) {\n          const shieldAmount = shieldOTBuff.value;\n\n          if (!battleState.player.shield) {\n            battleState.player.shield = 0;\n            battleState.player.maxShield = 0;\n          }\n\n          battleState.player.shield += shieldAmount;\n          logBattleAction(`护盾持续效果触发，获得 ${shieldAmount} 点护盾（当前护盾 ${battleState.player.shield} 点）！`);\n        }\n\n        if (battleState.player.tempShield) {\n          logBattleAction(`临时护盾消散，失去 ${battleState.player.tempShield} 点临时护盾！`);\n          battleState.player.tempShield = 0;\n        }\n\n        battleState.enemies.forEach(enemy =&gt; {\n\n          if (enemy.buffs &amp;&amp; enemy.buffs.length &gt; 0) {\n            enemy.buffs.forEach(buff =&gt; {\n              if (buff.type === 'dot') {\n                const damage = buff.value;\n                enemy.hp = Math.max(0, enemy.hp - damage);\n                logBattleAction(`${enemy.name} 受到持续伤害 ${damage} 点！`);\n                if (StateValidator.isDead(enemy)) {\n                  logBattleAction(`${enemy.name} 因持续伤害死亡！`);\n                }\n              }\n            });\n          }\n\n          if (enemy.stacks &amp;&amp; enemy.stacks.trauma) {\n\n            const traumaDamagePerStack = 3; \n            const traumaDamage = enemy.stacks.trauma * traumaDamagePerStack;\n            enemy.hp = Math.max(0, enemy.hp - traumaDamage);\n            logBattleAction(`${enemy.name} 受到创伤伤害 ${traumaDamage} 点（${enemy.stacks.trauma} 层）！`);\n            if (StateValidator.isDead(enemy)) {\n              logBattleAction(`${enemy.name} 因创伤死亡！`);\n            }\n          }\n        });\n\n        if (battleState.playerBuffs.length &gt; 0) {\n          battleState.playerBuffs.forEach(buff =&gt; {\n            if (buff.type === 'healOverTime') {\n              const healAmount = buff.value;\n              const oldHp = battleState.player.hp;\n              battleState.player.hp = Math.min(battleState.player.hp + healAmount, battleState.player.maxHp);\n              const actualHeal = battleState.player.hp - oldHp;\n              if (actualHeal &gt; 0) {\n                logBattleAction(`持续恢复效果触发，恢复 ${actualHeal} 点生命值！`);\n                showHealNumber(actualHeal);\n              }\n            }\n          });\n        }\n\n        if (battleState.playerBuffs.length &gt; 0) {\n          battleState.playerBuffs.forEach(buff =&gt; {\n            buff.duration--;\n          });\n\n          battleState.playerBuffs = battleState.playerBuffs.filter(buff =&gt; buff.duration &gt; 0);\n        }\n        battleState.enemies.forEach(enemy =&gt; {\n          if (enemy.buffs &amp;&amp; enemy.buffs.length &gt; 0) {\n            enemy.buffs.forEach(buff =&gt; {\n              buff.duration--;\n            });\n\n            enemy.buffs = enemy.buffs.filter(buff =&gt; buff.duration &gt; 0);\n          }\n        });\n\n        battleState.teammates.forEach(teammate =&gt; {\n          if (teammate.buffs &amp;&amp; teammate.buffs.length &gt; 0) {\n            teammate.buffs.forEach(buff =&gt; {\n              buff.duration--;\n            });\n\n            teammate.buffs = teammate.buffs.filter(buff =&gt; buff.duration &gt; 0);\n          }\n        });\n\n        const deadEnemies = battleState.enemies.filter(enemy =&gt; StateValidator.isDead(enemy));\n        if (deadEnemies.length &gt; 0) {\n          battleState.enemies = battleState.enemies.filter(enemy =&gt; !StateValidator.isDead(enemy));\n          deadEnemies.forEach(enemy =&gt; {\n            logBattleAction(`${enemy.name} 已死亡！`);\n          });\n        }\n\n        if (StateValidator.areAllEnemiesDead()) {\n          logBattleAction('所有敌人已被击败！战斗胜利！');\n          endBattle(true);\n          return;\n        }\n\n        battleState.currentWeapon = null;\n        battleState.selectedEnemies = [];\n        battleState.selectedHealTargets = []; \n        battleState.healTarget = null;\n        battleState.selfTargetMode = false;\n        battleState.sacrificeBoostActive = null; \n\n        updateBattleUI({ player: true, enemy: true, weapons: false });\n        updateWeaponsList();\n\n        logBattleAction(`第 ${battleState.round} 回合开始！`);\n\n        calculateActionOrder();\n\n        battleState.currentActionIndex = 0;\n\n        forceUpdateUI();\n\n        showCurrentActor();\n      }\n\n      function endBattle(isVictory) {\n\n        document\n          .querySelectorAll('.weapon-button, .attack-button, .next-round-button, .mid-action-button, .item-button')\n          .forEach(button =&gt; {\n            button.disabled = true;\n          });\n\n        hateSystem.enemyHateLists = {};\n\n        if (isVictory) {\n          logBattleAction(`战斗胜利！你击败了所有敌人！`);\n\n          const allEnemyNames = battleState.initialEnemies.map(enemy =&gt; enemy.name).join('、');\n\n          const defeatedEnemies = battleState.initialEnemies;\n          // 经验值系统已禁用\n          // const expResult = calculateTeamExperience(battleState.player, battleState.teammates, defeatedEnemies);\n          let victoryHtml = `\n                      &lt;h3 class=\"victory\"&gt;战斗胜利！&lt;/h3&gt;\n                      &lt;p&gt;你击败了所有敌人！&lt;/p&gt;\n                      &lt;p&gt;剩余HP: ${battleState.player.hp}/${battleState.player.maxHp}&lt;/p&gt;\n                      &lt;p&gt;剩余MP: ${battleState.player.mp}/${battleState.player.maxMp}&lt;/p&gt;\n                      &lt;p&gt;伤害最高武器: ${battleState.highestDamageWeapon.name || '无'}&lt;/p&gt;\n          `;\n\n          // 经验值系统已禁用\n          // victoryHtml += `\n          //             &lt;div style=\"margin-top: 15px; padding: 10px; background: rgba(6, 182, 212, 0.1); border-radius: 8px; border: 1px solid var(--accent-color);\"&gt;\n          //                 &lt;h4 style=\"color: var(--accent-color); margin: 0 0 10px 0;\"&gt;📈 经验值获得&lt;/h4&gt;\n          //                 &lt;p&gt;&lt;strong&gt;${battleState.player.name || 'User'}&lt;/strong&gt; (等级${\n          //   battleState.player.grade || 1\n          // }) 获得经验值: &lt;span style=\"color: var(--accent-color); font-weight: bold;\"&gt;${\n          //   expResult.playerExp\n          // } EXP&lt;/span&gt;&lt;/p&gt;\n          // `;\n          // if (expResult.teammateResults &amp;&amp; expResult.teammateResults.length &gt; 0) {\n          //   expResult.teammateResults.forEach(teammate =&gt; {\n          //     victoryHtml += `&lt;p&gt;&lt;strong&gt;${teammate.name}&lt;/strong&gt; (等级${teammate.level}) 获得经验值: &lt;span style=\"color: var(--accent-color); font-weight: bold;\"&gt;${teammate.exp} EXP&lt;/span&gt;&lt;/p&gt;`;\n          //   });\n          // }\n          // victoryHtml += `&lt;/div&gt;`;\n          resultSummary.innerHTML = victoryHtml;\n        } else {\n          logBattleAction(`战斗失败！你被击败了！`);\n          resultSummary.innerHTML = `\n                      &lt;h3 class=\"defeat\"&gt;战斗失败！&lt;/h3&gt;\n                      &lt;p&gt;你被${battleState.lastKilledBy ? ' ' + battleState.lastKilledBy + ' ' : ''}击败了！&lt;/p&gt;\n                      &lt;p&gt;HP变为0&lt;/p&gt;\n                  `;\n        }\n\n        const battleStats = collectBattleStatistics();\n\n        resultModal.style.display = 'flex';\n\n        closeResultBtn.removeEventListener('click', closeResultHandler);\n        sendResultBtn.removeEventListener('click', sendResultHandler);\n\n        closeResultBtn.addEventListener('click', function () {\n          resultModal.style.display = 'none';\n          combatInterface.style.display = 'none';\n          document.querySelector('.container').style.display = 'block';\n          battleState.isActive = false;\n\n          extraResultText.value = '';\n          updatePlayerStatus(battleState.player);\n          createBattleButton();\n        });\n\n        sendResultBtn.addEventListener('click', function () {\n\n          const extraText = extraResultText.value.trim();\n\n          let message = '';\n\n          let battleLogText = '';\n          if (battleState.fullCombatLog &amp;&amp; battleState.fullCombatLog.length &gt; 0) {\n            battleLogText = '，战斗记录：' + battleState.fullCombatLog.join(' → ');\n          }\n          if (isVictory) {\n\n            const allEnemyNames = battleState.initialEnemies.map(enemy =&gt; enemy.name).join('、');\n\n            let itemUsageStats = '';\n            if (battleStats.itemUsage &amp;&amp; battleStats.itemUsage.length &gt; 0) {\n              itemUsageStats =\n                '，使用丹药: ' + battleStats.itemUsage.map(item =&gt; `${item.name} ${item.count}个`).join('、');\n            }\n\n            let playerStatus = `李白血量${battleState.player.hp}/${battleState.player.maxHp}，MP值${battleState.player.mp}/${battleState.player.maxMp}`;\n\n            let teammatesStatus = '';\n            if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n              teammatesStatus =\n                '，队友状态: ' +\n                battleState.teammates\n                  .map(\n                    teammate =&gt;\n                      `${teammate.name}血量${teammate.hp}/${teammate.maxHp}，MP值${teammate.mp}/${teammate.maxMp}`,\n                  )\n                  .join('；');\n            }\n\n            let expInfo = '';\n            const defeatedEnemies = battleState.initialEnemies;\n            // 经验值系统已禁用\n            // const expResult = calculateTeamExperience(battleState.player, battleState.teammates, defeatedEnemies);\n            // expInfo = `，李白获得${expResult.playerExp}经验值`;\n            // if (expResult.teammateResults &amp;&amp; expResult.teammateResults.length &gt; 0) {\n            //   const teammateExpInfo = expResult.teammateResults\n            //     .map(teammate =&gt; `${teammate.name}获得${teammate.exp}经验值`)\n            //     .join('，');\n            //   expInfo += `，${teammateExpInfo}`;\n            // }\n            message = `&lt;request:李白赢得了战斗，${playerStatus}${teammatesStatus}，伤害最高武器为${\n              battleState.highestDamageWeapon.name || '无'\n            }，击败了${allEnemyNames}${itemUsageStats}${expInfo}${extraText ? '，' + extraText : ''}${battleLogText}&gt;`;\n          } else {\n\n            let itemUsageStats = '';\n            if (battleStats.itemUsage &amp;&amp; battleStats.itemUsage.length &gt; 0) {\n              itemUsageStats =\n                '，使用丹药: ' + battleStats.itemUsage.map(item =&gt; `${item.name} ${item.count}个`).join('、');\n            }\n\n            let defeatedEnemies = '';\n            if (battleStats.killedEnemies &amp;&amp; battleStats.killedEnemies.length &gt; 0) {\n              defeatedEnemies = `，击败了${battleStats.killedEnemies.join('、')}`;\n            }\n\n            let teammatesStatus = '';\n            if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n              teammatesStatus =\n                '，队友状态: ' +\n                battleState.teammates\n                  .map(\n                    teammate =&gt;\n                      `${teammate.name}血量${teammate.hp}/${teammate.maxHp}，MP值${teammate.mp}/${teammate.maxMp}`,\n                  )\n                  .join('；');\n            }\n            message = `&lt;request:李白被击败了，李白血量变为0/${battleState.player.maxHp}，MP值${\n              battleState.player.mp\n            }/${battleState.player.maxMp}${teammatesStatus}${\n              battleState.lastKilledBy ? '，被' + battleState.lastKilledBy + '击败' : ''\n            }${defeatedEnemies}${itemUsageStats}${extraText ? '，' + extraText : ''}${battleLogText}&gt;`;\n          }\n\n          sendBattleResult(message)\n            .then(success =&gt; {\n              if (success) {\n                logBattleAction('已发送战斗结果！');\n              } else {\n                logBattleAction('发送失败，结果已复制到剪贴板！');\n              }\n            })\n            .catch(e =&gt; {\n              console.error('发送战斗结果失败:', e);\n              logBattleAction('发送失败！');\n            });\n\n          resultModal.style.display = 'none';\n          combatInterface.style.display = 'none';\n          document.querySelector('.container').style.display = 'block';\n          battleState.isActive = false;\n\n          extraResultText.value = '';\n          updatePlayerStatus(battleState.player);\n          createBattleButton();\n        });\n      }\n\n      function logBattleAction(message) {\n\n        let logEntry;\n        if (memoryManager.logEntryPool.length &gt; 0) {\n          logEntry = memoryManager.logEntryPool.pop();\n          logEntry.textContent = message;\n        } else {\n          logEntry = document.createElement('div');\n          logEntry.className = 'log-entry';\n          logEntry.textContent = message;\n        }\n\n        combatLog.appendChild(logEntry);\n        combatLog.scrollTop = combatLog.scrollHeight;\n\n        const COMBAT_LOG_MAX_LINES = 10;\n        while (combatLog.children.length &gt; COMBAT_LOG_MAX_LINES) {\n          const removedEntry = combatLog.removeChild(combatLog.firstChild);\n\n          if (memoryManager.logEntryPool.length &lt; 20) {\n            removedEntry.textContent = '';\n            memoryManager.logEntryPool.push(removedEntry);\n          }\n        }\n\n        if (battleState &amp;&amp; battleState.fullCombatLog) {\n          battleState.fullCombatLog.push(message);\n\n          if (battleState.fullCombatLog.length &gt; 200) {\n            battleState.fullCombatLog = battleState.fullCombatLog.slice(-100); \n          }\n        }\n      }\n\n      function showDamageNumber(target, amount, isCrit = false, enemyId = null, teammateId = null) {\n        const damageElement = memoryManager.getDamageNumber();\n        damageElement.className = `damage-number ${isCrit ? 'critical' : ''}`;\n        damageElement.textContent = amount;\n        let targetElement;\n        if (target === 'player') {\n          targetElement = document.querySelector('.combat-entity.player');\n        } else if (target === 'enemy') {\n          targetElement = document.querySelector(\n            `.combat-entity.enemy[data-enemy-id=\"${enemyId || battleState.selectedEnemies[0]}\"]`,\n          );\n        } else if (target === 'teammate') {\n          targetElement = document.querySelector(`.combat-entity.teammate[data-teammate-id=\"${teammateId}\"]`);\n        }\n        if (targetElement) {\n          targetElement.appendChild(damageElement);\n          memoryManager.activeDamageNumbers.add(damageElement);\n\n          const randomX = Math.floor(Math.random() * 30) - 15;\n          const randomY = Math.floor(Math.random() * 15) - 5;\n          damageElement.style.position = 'absolute';\n          damageElement.style.top = `${50 + randomY}%`;\n          damageElement.style.left = `${50 + randomX}%`;\n\n          memoryManager.safeSetTimeout(() =&gt; {\n            if (damageElement.parentNode) {\n              damageElement.parentNode.removeChild(damageElement);\n            }\n            memoryManager.recycleDamageNumber(damageElement);\n          }, 1200);\n        }\n      }\n\n      function createDeathEffect(targetElement) {\n        if (!targetElement) return;\n\n        const flash = document.createElement('div');\n        flash.className = 'death-flash';\n        targetElement.appendChild(flash);\n\n        const particleCount = Math.min(10, 50 - memoryManager.activeParticles.size);\n        for (let i = 0; i &lt; particleCount; i++) {\n          const particle = memoryManager.getParticle();\n\n          const randomX = Math.random() * 100;\n          const randomY = Math.random() * 100;\n          particle.style.left = `${randomX}%`;\n          particle.style.top = `${randomY}%`;\n\n          const size = Math.random() * 8 + 4;\n          particle.style.width = `${size}px`;\n          particle.style.height = `${size}px`;\n\n          const delay = Math.random() * 0.5;\n          particle.style.animationDelay = `${delay}s`;\n          targetElement.appendChild(particle);\n          memoryManager.activeParticles.add(particle);\n\n          memoryManager.safeSetTimeout(() =&gt; {\n            if (particle.parentNode) {\n              particle.parentNode.removeChild(particle);\n            }\n            memoryManager.recycleParticle(particle);\n          }, 2000 + delay * 1000);\n        }\n      }\n\n      function addHpChangeAnimation(targetType, targetId = null) {\n        let hpBar;\n        if (targetType === 'player') {\n          hpBar = document.querySelector('.combat-entity.player .hp-fill-combat');\n        } else if (targetType === 'enemy') {\n          hpBar = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${targetId}\"] .hp-fill-combat`);\n        } else if (targetType === 'teammate') {\n          hpBar = document.querySelector(`.combat-entity.teammate[data-teammate-id=\"${targetId}\"] .hp-fill-combat`);\n        }\n        if (hpBar) {\n          hpBar.classList.add('hp-change-animation');\n          setTimeout(() =&gt; {\n            hpBar.classList.remove('hp-change-animation');\n          }, 800);\n        }\n      }\nconst BuffManager = {\n\n  addBuff(target, buffData, isPlayer = false) {\n    if (isPlayer) {\n      battleState.playerBuffs.push(buffData);\n    } else {\n      target.buffs = target.buffs || [];\n      target.buffs.push(buffData);\n    }\n  },\n\n  handleAttributeBoost(params, buffType, attributeName, isPlayer, target = null) {\n    const duration = parseInt(params[0]);\n    const value = parseInt(params[1]);\n    const buffData = {\n      name: `${attributeName}提升`,\n      type: buffType,\n      value: value,\n      duration: duration,\n      isPositive: true,\n    };\n    this.addBuff(target || battleState.player, buffData, isPlayer);\n    const targetName = isPlayer ? battleState.player.name || 'User' : target ? target.name : '目标';\n    logBattleAction(`${targetName} ${attributeName}提升效果触发！${attributeName}+${value} 持续 ${duration} 回合！`);\n  },\n\n  handleLifeSteal(params, damage, target, isPlayer = false) {\n    const percent = parseInt(params[0]);\n    const healAmount = Math.floor(damage * (percent / 100));\n    if (healAmount &gt; 0) {\n      const oldHp = target.hp;\n      target.hp = Math.min(target.hp + healAmount, target.maxHp);\n      const actualHeal = target.hp - oldHp;\n      const targetName = isPlayer ? battleState.player.name || 'User' : target.name;\n      logBattleAction(`${targetName} 生命窃取触发！恢复 ${actualHeal} 点生命值！`);\n      if (isPlayer) {\n        showHealNumber(actualHeal);\n      }\n    }\n  },\n\n  handleManaRestore(params, target, isPlayer = false) {\n    const mp = parseInt(params[0]);\n    const oldMp = target.mp;\n    target.mp = Math.min(target.mp + mp, target.maxMp);\n    const actualRestore = target.mp - oldMp;\n    const targetName = isPlayer ? battleState.player.name || 'User' : target.name;\n    logBattleAction(`${targetName} 灵力恢复触发！恢复 ${actualRestore} 点灵力值！`);\n  },\n\n  handleHealOverTime(params, target, isPlayer = false) {\n    const duration = parseInt(params[0]);\n    const heal = parseInt(params[1]);\n    const buffData = {\n      name: '持续恢复',\n      type: 'healOverTime',\n      value: heal,\n      duration: duration,\n      isPositive: true,\n    };\n    this.addBuff(target, buffData, isPlayer);\n    const targetName = isPlayer ? battleState.player.name || 'User' : target.name;\n    logBattleAction(`${targetName} 持续恢复效果触发！将在 ${duration} 回合内每回合恢复 ${heal} 点生命值！`);\n  },\n\n  handleCritBoost(params, target, isPlayer = false) {\n    const duration = parseInt(params[0]);\n    const value = parseInt(params[1].replace('%', ''));\n    const buffData = {\n      name: '暴击提升',\n      type: 'critBoost',\n      value: value,\n      duration: duration,\n      isPositive: true,\n    };\n    this.addBuff(target, buffData, isPlayer);\n    const targetName = isPlayer ? battleState.player.name || 'User' : target.name;\n    logBattleAction(`${targetName} 暴击提升效果触发！暴击率提升 ${value}% 持续 ${duration} 回合！`);\n  },\n};\n\nconst EventManager = {\n\n  listeners: new Map(),\n\n  removeListener(element, event, handler) {\n    if (element &amp;&amp; handler) {\n      element.removeEventListener(event, handler);\n    }\n  },\n\n  addListener(element, event, handler, key = null) {\n    if (!element) return;\n\n    if (key &amp;&amp; this.listeners.has(key)) {\n      const oldHandler = this.listeners.get(key);\n      this.removeListener(element, event, oldHandler);\n    }\n    element.addEventListener(event, handler);\n\n    if (key) {\n      this.listeners.set(key, handler);\n    }\n  },\n\n  clearAll() {\n    this.listeners.clear();\n  },\n\n  bindWeaponButtons(weapons, isTeammate = false) {\n    const selector = isTeammate ? '.teammate-weapon:not(.used)' : '.weapon-button:not(.used)';\n    document.querySelectorAll(selector).forEach(button =&gt; {\n      const weaponIndex = parseInt(button.getAttribute('data-weapon-index'));\n      const weapon = weapons[weaponIndex];\n      if (!weapon) return;\n      this.addListener(button, 'click', () =&gt; {\n        this.handleWeaponSelection(weapon, weaponIndex, isTeammate);\n      });\n    });\n  },\n\n  handleWeaponSelection(weapon, weaponIndex, isTeammate = false) {\n\n    document.querySelectorAll('.weapon-button, .item-button').forEach(btn =&gt; {\n      btn.classList.remove('selected');\n    });\n    document.querySelectorAll('.combat-entity').forEach(entity =&gt; {\n      entity.classList.remove('selected');\n    });\n\n    battleState.currentWeapon = weapon;\n    battleState.currentItem = null;\n    battleState.selectedEnemies = [];\n    battleState.selectedHealTargets = [];\n    battleState.healTarget = null;\n    battleState.maxAttackCount = weapon.attacksPerTurn;\n    battleState.currentAttackCount = 0;\n\n    const weaponTemplate = weapon.codes?.find(code =&gt; code.startsWith('WN:A'))?.match(/WN:(A[1-4])/)?.[1];\n    battleState.selfTargetMode =\n      weaponTemplate === 'A2' || weaponTemplate === 'A3' || weaponTemplate === 'A4' || weapon.isHealing;\n\n    updatePlayerPanel();\n    document.querySelector(`[data-weapon-index=\"${weaponIndex}\"]`).classList.add('selected');\n    updateAttackButton();\n  },\n\n  bindItemButtons(items) {\n    document.querySelectorAll('.item-button:not(.used)').forEach(button =&gt; {\n      const itemIndex = parseInt(button.getAttribute('data-item-index'));\n      const item = items[itemIndex];\n      if (!item) return;\n      this.addListener(button, 'click', () =&gt; {\n        this.handleItemSelection(item, itemIndex);\n      });\n    });\n  },\n\n  handleItemSelection(item, itemIndex) {\n\n    document.querySelectorAll('.weapon-button, .item-button').forEach(btn =&gt; {\n      btn.classList.remove('selected');\n    });\n    document.querySelectorAll('.combat-entity').forEach(entity =&gt; {\n      entity.classList.remove('selected');\n    });\n\n    battleState.currentWeapon = null;\n    battleState.currentItem = item;\n    battleState.selectedEnemies = [];\n\n    const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n    if (currentAction &amp;&amp; currentAction.type === 'teammate') {\n\n      battleState.selfTargetMode = false;\n      battleState.healTarget = currentAction.id;\n      const teammateElement = document.querySelector(`.combat-entity.teammate[data-teammate-id=\"${currentAction.id}\"]`);\n      if (teammateElement) {\n        teammateElement.classList.add('selected');\n      }\n    } else {\n\n      battleState.selfTargetMode = true;\n      battleState.healTarget = 'player';\n      document.querySelector('.combat-entity.player').classList.add('selected');\n    }\n\n    updatePlayerPanel();\n    document.querySelector(`[data-item-index=\"${itemIndex}\"]`).classList.add('selected');\n\n    const attackBtn = document.getElementById('attack-btn');\n    if (attackBtn) {\n      attackBtn.disabled = false;\n      attackBtn.innerHTML = \"&lt;i class='fas fa-pills'&gt;&lt;/i&gt; 使用丹药\";\n    }\n  },\n};\n\nconst StateValidator = {\n\n  isDead(entity) {\n    return entity &amp;&amp; entity.hp &lt;= 0;\n  },\n\n  isPlayerDead() {\n    return this.isDead(battleState.player);\n  },\n\n  areAllEnemiesDead() {\n    return battleState.enemies.length === 0;\n  },\n\n  isBattleOver() {\n    return this.isPlayerDead() || this.areAllEnemiesDead();\n  },\n\n  isVictory() {\n    return !this.isPlayerDead() &amp;&amp; this.areAllEnemiesDead();\n  },\n\n  isDefeat() {\n    return this.isPlayerDead();\n  },\n\n  shouldEndAttack(currentCount, maxCount, hasTargets = true) {\n    return currentCount &gt;= maxCount || !hasTargets || this.areAllEnemiesDead();\n  },\n\n  isValidTarget(target) {\n    return target &amp;&amp; target.hp &gt; 0;\n  },\n\n  processDeadEnemies() {\n    const deadEnemies = battleState.enemies.filter(enemy =&gt; this.isDead(enemy));\n    if (deadEnemies.length &gt; 0) {\n\n      deadEnemies.forEach(enemy =&gt; {\n        logBattleAction(`${enemy.name} 被击败了！`);\n        const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemy.id}\"]`);\n        createDeathEffect(enemyElement);\n\n        if (typeof hateSystem !== 'undefined') {\n          hateSystem.clearEnemyHate(enemy.id);\n        }\n      });\n\n      battleState.enemies = battleState.enemies.filter(enemy =&gt; !this.isDead(enemy));\n\n      if (this.areAllEnemiesDead()) {\n        endBattle(true);\n        return true; \n      }\n    }\n    return false; \n  },\n\n  checkEnemyDeath(enemy) {\n    if (this.isDead(enemy)) {\n      logBattleAction(`${enemy.name} 被击败了！`);\n      const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemy.id}\"]`);\n      createDeathEffect(enemyElement);\n\n      battleState.enemies = battleState.enemies.filter(e =&gt; e.id !== enemy.id);\n\n      if (typeof hateSystem !== 'undefined') {\n        hateSystem.clearEnemyHate(enemy.id);\n      }\n\n      if (this.areAllEnemiesDead()) {\n        endBattle(true);\n        return true; \n      }\n    }\n    return false; \n  },\n};\n\nwindow.TooltipGenerator = {\n\n  generateWeaponEffectTooltip(effectKey, parts) {\n    if (weaponSpecialEffects[effectKey]) {\n      switch (effectKey) {\n        case 'A1':\n        case 'A2':\n        case 'A3':\n        case 'A4':\n          return weaponSpecialEffects[effectKey]();\n        default:\n          return weaponSpecialEffects[effectKey] || effectKey;\n      }\n    }\n    return '';\n  },\n\n  generateEnchantmentTooltip(effectKey, parts) {\n    if (!enchantmentEffects[effectKey]) return '';\n    switch (effectKey) {\n      case 'B1':\n      case 'B4':\n      case 'B9':\n      case 'B15':\n      case 'B16':\n      case 'B17':\n        return parts.length &gt;= 2 ? enchantmentEffects[effectKey](parts[1]) : '';\n      case 'B2':\n      case 'B3':\n      case 'B5':\n      case 'B6':\n      case 'B7':\n      case 'B8':\n      case 'B10':\n      case 'B11':\n      case 'B12':\n      case 'B13':\n      case 'B14':\n      case 'B18':\n      case 'B19':\n      case 'B22':\n        return parts.length &gt;= 3 ? enchantmentEffects[effectKey](parts[1], parts[2]) : '';\n      case 'B20':\n      case 'B21':\n        return parts.length &gt;= 2 ? enchantmentEffects[effectKey](parts[1]) : '';\n      default:\n        return enchantmentEffects[effectKey] || effectKey;\n    }\n  },\n\n  generateEffectCodeHtml(codes) {\n    let effectsHtml = '';\n    codes.forEach(code =&gt; {\n      const [codeType, codeValue] = code.split(':');\n      const parts = codeValue.split(',');\n      const effectKey = parts[0];\n      let tooltipText = '';\n      if (codeType === 'WN') {\n        tooltipText = this.generateWeaponEffectTooltip(effectKey, parts);\n      } else if (codeType === 'EN') {\n        tooltipText = this.generateEnchantmentTooltip(effectKey, parts);\n      }\n      if (tooltipText) {\n        effectsHtml += `&lt;div class=\"weapon-effect-code status-effect\"&gt;${effectKey}\n                            &lt;span class=\"effect-tooltip\"&gt;${tooltipText}&lt;/span&gt;\n                        &lt;/div&gt;`;\n      }\n    });\n    return effectsHtml;\n  },\n\n  generateAttributeTooltip(attribute) {\n    const tooltips = {\n      str: '物理伤害+生命恢复',\n      agi: '速度+闪避+暴击',\n      int: '暴击+灵力恢复',\n      vit: '行动点+生命恢复',\n    };\n    return tooltips[attribute] || '';\n  },\n};\n\nfunction showHealNumber(amount) {\n  const healElement = memoryManager.getHealNumber();\n  healElement.className = 'heal-number';\n  healElement.textContent = `+${amount}`;\n  const targetElement = document.querySelector('.combat-entity.player');\n  if (targetElement) {\n    targetElement.appendChild(healElement);\n    memoryManager.activeHealNumbers.add(healElement);\n\n    const randomX = Math.floor(Math.random() * 30) - 15;\n    healElement.style.position = 'absolute';\n    healElement.style.top = '40%';\n    healElement.style.left = `${50 + randomX}%`;\n\n    memoryManager.safeSetTimeout(() =&gt; {\n      if (healElement.parentNode) {\n        healElement.parentNode.removeChild(healElement);\n      }\n      memoryManager.recycleHealNumber(healElement);\n    }, 1200);\n  }\n}\n\nfunction showHealNumberOnEnemy(amount, enemyId) {\n  const healElement = memoryManager.getHealNumber();\n  healElement.className = 'heal-number';\n  healElement.textContent = `+${amount}`;\n  const targetElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemyId}\"]`);\n  if (targetElement) {\n    targetElement.appendChild(healElement);\n    memoryManager.activeHealNumbers.add(healElement);\n\n    const randomX = Math.floor(Math.random() * 30) - 15;\n    healElement.style.position = 'absolute';\n    healElement.style.top = '40%';\n    healElement.style.left = `${50 + randomX}%`;\n\n    memoryManager.safeSetTimeout(() =&gt; {\n      if (healElement.parentNode) {\n        healElement.parentNode.removeChild(healElement);\n      }\n      memoryManager.recycleHealNumber(healElement);\n    }, 1200);\n  }\n}\n\nfunction applyDamageWithShield(target, damage, targetName) {\n  let remainingDamage = damage;\n  let shieldDamage = 0;\n  let tempShieldDamage = 0;\n  let hpDamage = 0;\n\n  if (target.tempShield &amp;&amp; target.tempShield &gt; 0) {\n    tempShieldDamage = Math.min(target.tempShield, remainingDamage);\n    target.tempShield -= tempShieldDamage;\n    remainingDamage -= tempShieldDamage;\n\n    if (tempShieldDamage &gt; 0) {\n      logBattleAction(`${targetName}的临时护盾抵挡了 ${tempShieldDamage} 点伤害！剩余临时护盾: ${target.tempShield}`);\n    }\n  }\n\n  if (remainingDamage &gt; 0 &amp;&amp; target.shield &amp;&amp; target.shield &gt; 0) {\n    shieldDamage = Math.min(target.shield, remainingDamage);\n    target.shield -= shieldDamage;\n    remainingDamage -= shieldDamage;\n\n    if (shieldDamage &gt; 0) {\n      logBattleAction(`${targetName}的护盾抵挡了 ${shieldDamage} 点伤害！剩余护盾: ${target.shield}`);\n    }\n  }\n\n  if (remainingDamage &gt; 0) {\n    hpDamage = remainingDamage;\n    target.hp = Math.max(0, target.hp - hpDamage);\n    logBattleAction(`${targetName}受到 ${hpDamage} 点伤害！当前HP: ${target.hp}/${target.maxHp}`);\n  }\n\n  return {\n    totalDamage: damage,\n    tempShieldDamage: tempShieldDamage,\n    shieldDamage: shieldDamage,\n    hpDamage: hpDamage,\n    blocked: damage - hpDamage\n  };\n}\n\nfunction applyHealingEffect(item, userEntity, isPlayer) {\n  const oldHp = userEntity.hp;\n  userEntity.hp = Math.min(userEntity.hp + item.value, userEntity.maxHp);\n  const actualHeal = userEntity.hp - oldHp;\n  logBattleAction(`${isPlayer ? '' : userEntity.name + ' '}恢复了 ${actualHeal} 点生命值！`);\n  if (isPlayer) {\n    showHealNumber(actualHeal);\n\n    addHpChangeAnimation('player');\n\n    const playerEntity = document.querySelector('.combat-entity.player');\n    if (playerEntity) {\n      playerEntity.classList.add('heal-pulse-animation');\n      memoryManager.safeSetTimeout(() =&gt; playerEntity.classList.remove('heal-pulse-animation'), 800);\n    }\n  } else {\n\n    const healElement = memoryManager.getHealNumber();\n    healElement.className = 'heal-number';\n    healElement.textContent = `+${actualHeal}`;\n    const teammateElement = document.querySelector(`.combat-entity.teammate[data-teammate-id=\"${userEntity.id}\"]`);\n    if (teammateElement) {\n      teammateElement.appendChild(healElement);\n      memoryManager.activeHealNumbers.add(healElement);\n      const randomX = Math.floor(Math.random() * 30) - 15;\n      healElement.style.position = 'absolute';\n      healElement.style.top = '40%';\n      healElement.style.left = `${50 + randomX}%`;\n      memoryManager.safeSetTimeout(() =&gt; {\n        if (healElement.parentNode) {\n          healElement.parentNode.removeChild(healElement);\n        }\n        memoryManager.recycleHealNumber(healElement);\n      }, 1200);\n\n      const teammateId = teammateElement.getAttribute('data-teammate-id');\n      if (teammateId) {\n        addHpChangeAnimation('teammate', teammateId);\n      }\n      teammateElement.classList.add('heal-pulse-animation');\n      memoryManager.safeSetTimeout(() =&gt; teammateElement.classList.remove('heal-pulse-animation'), 800);\n    }\n  }\n}\nfunction applyManaRestoreEffect(item, userEntity, isPlayer) {\n  const oldMp = userEntity.mp;\n  userEntity.mp = Math.min(userEntity.mp + item.value, userEntity.maxMp);\n  const actualRestore = userEntity.mp - oldMp;\n  logBattleAction(`${isPlayer ? '' : userEntity.name + ' '}恢复了 ${actualRestore} 点灵力值！`);\n\n  const selector = isPlayer ? '.combat-entity.player' : `.combat-entity.teammate[data-teammate-id=\"${userEntity.id}\"]`;\n  const entityElement = document.querySelector(selector);\n  if (entityElement) {\n    const mpBar = entityElement.querySelector('.mp-fill-combat');\n    if (mpBar) {\n      mpBar.classList.add('hp-change-animation');\n      setTimeout(() =&gt; mpBar.classList.remove('hp-change-animation'), 800);\n    }\n  }\n}\nfunction applyAttributeBoost(item, userEntity, boostType, itemName, isPlayer) {\n  const buffTarget = isPlayer ? battleState.playerBuffs : (userEntity.buffs = userEntity.buffs || []);\n  buffTarget.push({\n    name: itemName,\n    type: boostType,\n    value: item.value,\n    duration: item.duration,\n    isPositive: true,\n  });\n  const attributeName = boostType\n    .replace('Boost', '')\n    .replace('str', '力量')\n    .replace('agi', '敏捷')\n    .replace('int', '智力')\n    .replace('end', '耐力');\n  logBattleAction(\n    `${isPlayer ? '' : userEntity.name + ' '}${attributeName}增加 ${item.value} 点，持续 ${item.duration} 回合！`,\n  );\n}\n\nfunction useItem(item, user = null) {\n  const isPlayer = !user;\n  const userName = isPlayer ? battleState.player.name || 'User' : user.name;\n  const userEntity = isPlayer ? battleState.player : user;\n  logBattleAction(`${userName} 使用了 ${item.name}`);\n\n  switch (item.type) {\n    case 1: \n      applyHealingEffect(item, userEntity, isPlayer);\n      break;\n    case 2: \n      applyManaRestoreEffect(item, userEntity, isPlayer);\n      break;\n    case 3: \n      applyAttributeBoost(item, userEntity, 'strBoost', '根骨丹', isPlayer);\n      break;\n    case 4: \n      applyAttributeBoost(item, userEntity, 'agiBoost', '身法丹', isPlayer);\n      break;\n    case 5: \n      applyAttributeBoost(item, userEntity, 'intBoost', '神识丹', isPlayer);\n      break;\n    case 6: \n      if (!isPlayer) {\n        logBattleAction(`${userName} 无法使用淬体增益丹药！`);\n        return; \n      }\n      applyAttributeBoost(item, userEntity, 'endBoost', '淬体丹', isPlayer);\n      break;\n    default:\n      logBattleAction(`${userName} 使用了未知效果的丹药：${item.type}`);\n  }\n\n  if (!battleState.itemUsageStats) {\n    battleState.itemUsageStats = {};\n  }\n  if (!battleState.itemUsageStats[item.name]) {\n    battleState.itemUsageStats[item.name] = 0;\n  }\n  battleState.itemUsageStats[item.name]++;\n\n  item.count--;\n\n  if (item.count &lt;= 0) {\n    battleState.player.items = battleState.player.items.filter(i =&gt; i !== item);\n  }\n\n  battleState.currentItemUsed = true;\n\n  battleState.currentItem = null;\n\n  updateBattleUI({ player: true, enemy: false, weapons: true });\n}\n\nfunction setupDetailsAnimation() {\n  const detailsElement = document.getElementById('preparation-details');\n  const content = detailsElement.querySelector('#preparation-screen');\n\n  let contentHeight;\n\n  const calculateHeight = () =&gt; {\n    content.style.maxHeight = 'none';\n    contentHeight = content.offsetHeight + 'px';\n    content.style.maxHeight = detailsElement.open ? contentHeight : '0';\n  };\n\n  calculateHeight();\n  window.addEventListener('resize', calculateHeight);\n\n  detailsElement.addEventListener('toggle', () =&gt; {\n    if (detailsElement.open) {\n\n      content.style.maxHeight = contentHeight;\n    } else {\n\n      content.style.maxHeight = '0';\n    }\n  });\n}\n\nfunction setupLazyRendering() {\n  const preparationDetails = document.getElementById('preparation-details');\n  if (!preparationDetails || lazyRenderManager.isPreparationRendered) return;\n\n  preparationDetails.addEventListener('toggle', function () {\n    if (this.open &amp;&amp; !lazyRenderManager.isPreparationRendered &amp;&amp; battleData) {\n\n      lazyRenderManager.safeUpdateInterface(() =&gt; {\n        initializeInterface(battleData);\n        lazyRenderManager.isPreparationRendered = true;\n      }, 'preparation');\n    }\n  });\n\n  if (preparationDetails.hasAttribute('open')) {\n    lazyRenderManager.isPreparationRendered = true;\n  }\n}\n\nfunction setupDataUpdateListener() {\n  let lastDataContent = statusDataSource.textContent;\n  let isRendered = false;\n\n  const observer = new MutationObserver(function (mutations) {\n    const currentData = statusDataSource.textContent;\n    if (currentData !== lastDataContent) {\n      lastDataContent = currentData;\n\n      if (currentData) {\n        battleData = parseStatusData(currentData);\n\n        const preparationDetails = document.getElementById('preparation-details');\n        if (preparationDetails &amp;&amp; preparationDetails.open) {\n\n          initializeInterface(battleData);\n        } else {\n\n        }\n      }\n    }\n  });\n\n  observer.observe(statusDataSource, {\n    childList: true,\n    subtree: true,\n    characterData: true,\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const initialData = statusDataSource.textContent;\n  if (initialData) {\n    battleData = parseStatusData(initialData);\n\n    const preparationDetails = document.getElementById('preparation-details');\n    const shouldExpand = battleData.enemies &amp;&amp; battleData.enemies.length &gt; 0;\n    if (preparationDetails &amp;&amp; shouldExpand) {\n      preparationDetails.setAttribute('open', '');\n\n      initializeInterface(battleData);\n    } else {\n      preparationDetails.removeAttribute('open');\n\n    }\n\n    setupDetailsAnimation();\n    setupLazyRendering();\n\n    setupDataUpdateListener();\n  }\n});\n\nfunction updateActionOrderDisplay() {\n\n  if (!lazyRenderManager.shouldRenderCombat()) {\n    return;\n  }\n  const actionOrderDisplay = document.getElementById('action-order-display');\n  if (!actionOrderDisplay) return;\n\n  actionOrderDisplay.innerHTML = '';\n\n  if (battleState.currentActionIndex &gt;= battleState.actionOrder.length) {\n    battleState.currentActionIndex = 0;\n  }\n\n  battleState.actionOrder.forEach((action, index) =&gt; {\n    const isCurrentAction = index === battleState.currentActionIndex;\n    const actionItem = document.createElement('div');\n    actionItem.className = `action-order-item ${action.type} ${isCurrentAction ? 'current' : ''}`;\n    actionItem.setAttribute('data-action-index', index);\n\n    const nameElement = document.createElement('div');\n    nameElement.className = 'action-order-name';\n    nameElement.textContent = action.name;\n    actionItem.appendChild(nameElement);\n\n    const speedElement = document.createElement('div');\n    speedElement.className = 'action-order-speed';\n\n    speedElement.textContent = `速度: ${action.speed || action.entity.speed}`;\n    actionItem.appendChild(speedElement);\n\n    const numberElement = document.createElement('div');\n    numberElement.className = 'action-order-number';\n    numberElement.textContent = `#${action.actionNumber || index + 1}`;\n    actionItem.appendChild(numberElement);\n\n    actionOrderDisplay.appendChild(actionItem);\n\n    if (index &lt; battleState.actionOrder.length - 1) {\n      const arrowElement = document.createElement('div');\n      arrowElement.className = 'action-order-arrow';\n      arrowElement.innerHTML = '&lt;i class=\"fas fa-chevron-right\"&gt;&lt;/i&gt;';\n      actionOrderDisplay.appendChild(arrowElement);\n    }\n  });\n\n  if (battleState.actionOrder.length &gt; 0) {\n    const currentItem = actionOrderDisplay.querySelector('.action-order-item.current');\n    if (currentItem) {\n      actionOrderDisplay.scrollLeft =\n        currentItem.offsetLeft - actionOrderDisplay.clientWidth / 2 + currentItem.clientWidth / 2;\n\n      setupSkipButton();\n    }\n  }\n}\n\nfunction updateHateDisplay() {\n\n  if (!lazyRenderManager.shouldRenderCombat()) {\n    return;\n  }\n\n  updateEnemyPanel();\n}\n\nfunction enablePlayerControls() {\n\n  updateWeaponsList();\n\n  const attackBtn = document.getElementById('attack-btn');\n  if (attackBtn) {\n    attackBtn.disabled = true;\n    attackBtn.innerHTML = \"&lt;i class='fas fa-magic'&gt;&lt;/i&gt; 施展神通\";\n  }\n\n  setupSkipButton();\n}\n\nfunction performEnemyAction(enemy) {\n\n  disablePlayerControls();\n\n  setTimeout(() =&gt; {\n\n    if (enemy.pendingFreeze) {\n      logBattleAction(`${enemy.name} 被晕眩，无法行动！`);\n      enemy.pendingFreezeCount--;\n      if (enemy.pendingFreezeCount &lt;= 0) {\n        enemy.pendingFreeze = false;\n        enemy.pendingFreezeCount = 0;\n        logBattleAction(`${enemy.name} 解除了晕眩状态！`);\n      }\n\n      moveToNextAction();\n      return;\n    }\n\n    let totalBurnDamage = 0;\n    const burnBuffs = enemy.buffs ? enemy.buffs.filter(buff =&gt; buff.type === 'burnOverTime') : [];\n    if (burnBuffs.length &gt; 0) {\n\n      burnBuffs.forEach(burnBuff =&gt; {\n        totalBurnDamage += burnBuff.value;\n      });\n      if (totalBurnDamage &gt; 0) {\n        enemy.hp = Math.max(0, enemy.hp - totalBurnDamage);\n        logBattleAction(`${enemy.name} 受到余烬效果，损失 ${totalBurnDamage} 点生命值！`);\n\n        showDamageNumber('enemy', totalBurnDamage, false, enemy.id);\n\n        const enemyHpBar = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemy.id}\"] .hp-fill-combat`);\n        if (enemyHpBar) {\n\n          const enemyElement = enemyHpBar.closest('.combat-entity.enemy');\n          const enemyId = enemyElement ? enemyElement.getAttribute('data-enemy-id') : null;\n          if (enemyId) {\n            addHpChangeAnimation('enemy', enemyId);\n          }\n        }\n\n        if (StateValidator.isDead(enemy)) {\n          logBattleAction(`${enemy.name} 被余烬效果击败了！`);\n\n          const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemy.id}\"]`);\n          createDeathEffect(enemyElement);\n\n          battleState.enemies = battleState.enemies.filter(e =&gt; e.id !== enemy.id);\n\n          updateEnemyPanel();\n\n          if (StateValidator.areAllEnemiesDead()) {\n            endBattle(true);\n            return;\n          }\n\n          moveToNextAction();\n          return;\n        }\n      }\n    }\n\n    const attackName = enemy.attackPattern[enemy.nextAttackIndex];\n    const skill = enemy.skills.find(s =&gt; s.name === attackName);\n    if (skill) {\n      logBattleAction(`${enemy.name} 使用 ${skill.name} 攻击！`);\n\n      const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemy.id}\"]`);\n      enemyElement.classList.add('attack-animation-backward');\n\n      setTimeout(() =&gt; {\n\n        const effectiveHitRate = getEffectiveHitRate(skill.hitRate, enemy);\n\n        const maxTargets = skill.targetsPerAttack || 1;\n        const targets = getEnemyTargetsByHate(enemy.id, maxTargets);\n        if (targets.length === 0) {\n          logBattleAction(`${enemy.name} 找不到可攻击的目标！`);\n\n          setTimeout(() =&gt; {\n            enemyElement.classList.remove('attack-animation-backward');\n          }, 500);\n          return;\n        }\n        if (maxTargets &gt; 1) {\n          logBattleAction(\n            `${enemy.name} 的 ${skill.name} 瞄准了 ${targets.length} 个目标：${targets.map(t =&gt; t.name).join(', ')}`,\n          );\n        }\n\n        targets.forEach((target, targetIndex) =&gt; {\n\n          const enemyStats = getEnemyActualStats(enemy);\n          let targetStats;\n          if (target.entity === battleState.player) {\n            targetStats = getPlayerActualStats();\n          } else {\n\n            targetStats = getTeammateActualStats(target.entity);\n          }\n\n          const finalHitRate = calculateFinalHitRate(effectiveHitRate, enemyStats, targetStats);\n          const hitRoll = Math.random();\n\n          if (hitRoll &lt;= Math.min(1.0, finalHitRate)) {\n\n            logBattleAction(`攻击命中 ${target.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n\n            const targetElement =\n              target.type === 'player'\n                ? document.querySelector('.combat-entity.player')\n                : document.querySelector(`.combat-entity.teammate[data-teammate-id=\"${target.entity.id}\"]`);\n            if (targetElement) {\n              targetElement.classList.add('shake-animation');\n            }\n\n            const finalCritRate = calculateFinalCritRate(skill.critRate, enemyStats, targetStats, finalHitRate);\n            const critRoll = Math.random();\n\n            const isCrit = critRoll &lt;= Math.min(1.0, finalCritRate);\n\n            const finalCritMultiplier = isCrit\n              ? calculateFinalCritMultiplier(enemyStats, targetStats, finalCritRate)\n              : 1.0;\n\n            let damage = calculateFinalDamage(skill.attack, enemyStats, targetStats, isCrit, finalCritMultiplier);\n\n            if (isCrit) {\n              logBattleAction(\n                `暴击！造成 ${damage} 点伤害！(暴击率: ${(finalCritRate * 100).toFixed(\n                  1,\n                )}%, 暴击倍率: ${finalCritMultiplier.toFixed(2)}x)`,\n              );\n              if (target.type === 'player') {\n                showDamageNumber('player', damage, true);\n              } else {\n\n                showDamageNumber('teammate', damage, true, null, target.entity.id);\n              }\n            } else {\n              logBattleAction(`造成 ${damage} 点伤害！`);\n              if (target.type === 'player') {\n                showDamageNumber('player', damage, false);\n              } else {\n\n                showDamageNumber('teammate', damage, false, null, target.entity.id);\n              }\n            }\n\n            const damageResult = applyDamageWithShield(target.entity, damage, target.type === 'player' ? '你' : target.entity.name);\n\n            if (target.type === 'player') {\n              addHpChangeAnimation('player');\n            } else {\n              addHpChangeAnimation('teammate', target.entity.id);\n            }\n\n            setTimeout(() =&gt; {\n              if (targetElement) {\n                targetElement.classList.remove('shake-animation');\n              }\n            }, 800);\n\n            if (StateValidator.isDead(target.entity)) {\n              if (target.type === 'player') {\n\n                battleState.lastKilledBy = skill.name;\n                endBattle(false);\n                return;\n              } else {\n\n                logBattleAction(`${target.name} 被击败了！`);\n\n                createDeathEffect(targetElement);\n\n                hateSystem.clearTargetHate(target.entity.id);\n\n                battleState.teammates = battleState.teammates.filter(t =&gt; t.id !== target.entity.id);\n\n                cleanupActionOrder('teammate', target.entity.id);\n\n                updatePlayerPanel();\n              }\n            }\n          } else {\n\n            logBattleAction(`攻击未命中 ${target.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n          }\n        }); \n\n        enemy.nextAttackIndex = (enemy.nextAttackIndex + 1) % enemy.attackPattern.length;\n\n        enemyElement.classList.remove('attack-animation-backward');\n\n        memoryManager.safeSetTimeout(() =&gt; {\n          updatePlayerPanel();\n          updateEnemyPanel();\n          updateHateDisplay(); \n        }, 1500); \n\n        setTimeout(() =&gt; {\n          moveToNextAction();\n        }, 500);\n      }, 500);\n    } else {\n\n      moveToNextAction();\n    }\n  }, 800);\n}\n\nfunction disablePlayerControls() {\n  document.querySelectorAll('.weapon-button, .item-button').forEach(button =&gt; {\n    button.disabled = true;\n  });\n  const attackBtn = document.getElementById('attack-btn');\n  if (attackBtn) {\n    attackBtn.disabled = true;\n  }\n  const nextRoundBtn = document.getElementById('next-round-btn');\n  if (nextRoundBtn) {\n    nextRoundBtn.disabled = true;\n  }\n  const midActionBtn = document.getElementById('mid-action-btn');\n  if (midActionBtn) {\n    midActionBtn.disabled = true;\n  }\n}\n\nfunction setupSkipButton() {\n\n  const skipButton = document.getElementById('next-round-btn');\n  if (!skipButton) return;\n\n  const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n  if (!currentAction) return;\n\n  skipButton.onclick = null;\n\n  if (currentAction.type === 'player' || currentAction.type === 'teammate') {\n\n    skipButton.innerHTML = \"&lt;i class='fas fa-forward'&gt;&lt;/i&gt; 跳过当前行动\";\n    skipButton.className = 'next-round-button';\n    skipButton.disabled = false;\n\n    skipButton.onclick = function () {\n      moveToNextAction();\n    };\n  } else {\n\n    skipButton.innerHTML = \"&lt;i class='fas fa-forward'&gt;&lt;/i&gt; 等待敌人行动\";\n    skipButton.disabled = true;\n  }\n\n  setupMidActionButton();\n}\n\nfunction setupMidActionButton() {\n  const midActionButton = document.getElementById('mid-action-btn');\n  if (!midActionButton) return;\n\n  midActionButton.onclick = null;\n\n  midActionButton.onclick = function () {\n    showMidActionResult();\n  };\n}\n\nfunction showMidActionResult() {\n\n  let statusInfo = `&lt;h3 style=\"color: var(--accent-color);\"&gt;李白状态&lt;/h3&gt;`;\n\n  statusInfo += `&lt;p&gt;&lt;strong&gt;李白状态：&lt;/strong&gt;血量${battleState.player.hp}/${battleState.player.maxHp}，MP值${battleState.player.mp}/${battleState.player.maxMp}&lt;/p&gt;`;\n\n  if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n    statusInfo += `&lt;p&gt;&lt;strong&gt;队友状态：&lt;/strong&gt;&lt;/p&gt;&lt;div style=\"margin-left: 20px;\"&gt;`;\n    battleState.teammates.forEach(teammate =&gt; {\n      statusInfo += `&lt;p&gt;${teammate.name}：血量${teammate.hp}/${teammate.maxHp}，MP值${teammate.mp}/${teammate.maxMp}&lt;/p&gt;`;\n    });\n    statusInfo += `&lt;/div&gt;`;\n  }\n\n  if (battleState.enemies &amp;&amp; battleState.enemies.length &gt; 0) {\n    statusInfo += `&lt;p&gt;&lt;strong&gt;敌人状态：&lt;/strong&gt;&lt;/p&gt;&lt;div style=\"margin-left: 20px;\"&gt;`;\n    battleState.enemies.forEach(enemy =&gt; {\n      statusInfo += `&lt;p&gt;${enemy.name}：血量${enemy.hp}/${enemy.maxHp}&lt;/p&gt;`;\n    });\n    statusInfo += `&lt;/div&gt;`;\n  }\n\n  resultSummary.innerHTML = statusInfo;\n  resultModal.style.display = 'flex';\n\n  closeResultBtn.removeEventListener('click', closeMidActionHandler);\n  sendResultBtn.removeEventListener('click', sendMidActionHandler);\n\n  closeResultBtn.addEventListener('click', closeMidActionHandler);\n\n  sendResultBtn.addEventListener('click', sendMidActionHandler);\n}\n\nfunction closeMidActionHandler() {\n  resultModal.style.display = 'none';\n\n  extraResultText.value = '';\n}\n\nfunction sendMidActionHandler() {\n\n  const extraText = extraResultText.value.trim();\n\n  let playerStatus = `李白血量${battleState.player.hp}/${battleState.player.maxHp}，MP值${battleState.player.mp}/${battleState.player.maxMp}`;\n\n  let teammatesStatus = '';\n  if (battleState.teammates &amp;&amp; battleState.teammates.length &gt; 0) {\n    teammatesStatus =\n      '，队友状态: ' +\n      battleState.teammates\n        .map(teammate =&gt; `${teammate.name}血量${teammate.hp}/${teammate.maxHp}，MP值${teammate.mp}/${teammate.maxMp}`)\n        .join('；');\n  }\n\n  let enemiesStatus = '';\n  if (battleState.enemies &amp;&amp; battleState.enemies.length &gt; 0) {\n    enemiesStatus =\n      '，敌人状态: ' + battleState.enemies.map(enemy =&gt; `${enemy.name}血量${enemy.hp}/${enemy.maxHp}`).join('；');\n  }\n\n  let battleLogText = '';\n  if (battleState.fullCombatLog &amp;&amp; battleState.fullCombatLog.length &gt; 0) {\n    battleLogText = '，战斗记录：' + battleState.fullCombatLog.join(' → ');\n  }\n\n  const message = `&lt;request:${\n    extraText ? extraText + '，' : ''\n  }李白状态，${playerStatus}${teammatesStatus}${enemiesStatus}${battleLogText}&gt;`;\n\n  sendBattleResult(message)\n    .then(success =&gt; {\n      if (success) {\n        logBattleAction('已发送中途行动状态！');\n      } else {\n        logBattleAction('发送失败，结果已复制到剪贴板！');\n      }\n    })\n    .catch(e =&gt; {\n      console.error('发送中途行动状态失败:', e);\n      logBattleAction('发送失败！');\n    });\n\n  resultModal.style.display = 'none';\n\n  extraResultText.value = '';\n\n  combatInterface.style.display = 'none';\n  document.querySelector('.container').style.display = 'block';\n\n  battleState.isActive = false;\n\n  updatePlayerStatus(battleState.player);\n  createBattleButton();\n\n  autoCollapseAfterSend();\n}\n\nfunction moveToNextAction() {\n\n  const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n  if (currentAction) {\n    logBattleAction(`${currentAction.name} 结束当前行动！`);\n\n    if (currentAction.type === 'teammate') {\n      currentAction.entity.skillUsed = true;\n    }\n  }\n\n  battleState.currentActionIndex++;\n\n  battleState.currentItemUsed = false;\n\n  if (battleState.currentActionIndex &gt;= battleState.actionOrder.length) {\n    startNextRound();\n    return;\n  }\n\n  setTimeout(() =&gt; {\n\n    forceUpdateUI();\n    showCurrentActor();\n  }, 50);\n}\n\nfunction cleanupActionOrder(deadEntityType, deadEntityId) {\n\n  if (!battleState.actionOrder || !deadEntityId) return;\n\n  const currentIndex = battleState.currentActionIndex;\n\n  const newActionOrder = battleState.actionOrder.filter(\n    action =&gt; !(action.type === deadEntityType &amp;&amp; action.id === deadEntityId),\n  );\n\n  if (newActionOrder.length &lt; battleState.actionOrder.length) {\n\n    battleState.actionOrder = newActionOrder;\n\n    if (currentIndex &gt;= battleState.actionOrder.length) {\n      battleState.currentActionIndex = battleState.actionOrder.length - 1;\n    } else {\n\n      let removedBeforeCurrent = 0;\n      for (let i = 0; i &lt;= currentIndex; i++) {\n        const originalAction = battleState.actionOrder[i - removedBeforeCurrent];\n        if (!originalAction || (originalAction.type === deadEntityType &amp;&amp; originalAction.id === deadEntityId)) {\n          removedBeforeCurrent++;\n        }\n      }\n\n      battleState.currentActionIndex = Math.max(0, currentIndex - removedBeforeCurrent);\n    }\n\n    if (battleState.actionOrder.length === 0) {\n      startNextRound();\n      return;\n    }\n\n    updateActionOrderDisplay();\n  }\n}\n\nfunction updateTeammateWeaponsList() {\n  if (!battleState.currentTeammate) return;\n\n  const weapons = battleState.currentTeammate.weapons || [];\n\n  document.getElementById('melee-panel').classList.add('active');\n  document.getElementById('items-panel').classList.remove('active');\n  document.getElementById('stats-panel').classList.remove('active');\n  document.getElementById('melee-toggle').classList.add('active');\n  document.getElementById('items-toggle').classList.remove('active');\n  document.getElementById('stats-toggle').classList.remove('active');\n\n  const currentAction = battleState.actionOrder[battleState.currentActionIndex];\n  if (currentAction &amp;&amp; currentAction.type === 'teammate') {\n        document.getElementById('melee-toggle').innerHTML = `&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; ${currentAction.name}的神通`;\n  } else {\n    document.getElementById('melee-toggle').innerHTML = '&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 队友神通';\n  }\n\n  document.getElementById('items-toggle').style.display = 'block'; \n\n  const meleeWeaponList = document.getElementById('melee-weapon-list');\n\n  if (!battleState.currentTeammate || !battleState.currentTeammate.weapons) {\n    meleeWeaponList.innerHTML = '&lt;div style=\"text-align: center; padding: 10px;\"&gt;该队友没有可用的神通&lt;/div&gt;';\n    return;\n  }\n  meleeWeaponList.innerHTML =\n    battleState.currentTeammate.weapons.length &gt; 0\n      ? battleState.currentTeammate.weapons\n          .map(weapon =&gt; {\n\n            const effectsHtml = weapon.codes ? TooltipGenerator.generateEffectCodeHtml(weapon.codes) : '';\n\n            const isUsed = weapon.used || weapon.currentCooldown &gt; 0 || battleState.currentTeammate.ap &lt;= 0;\n            const usedClass = isUsed ? 'used' : '';\n            const cooldownText = weapon.currentCooldown &gt; 0 ? ` (冷却:${weapon.currentCooldown})` : '';\n            return `\n                        &lt;button class=\"weapon-button teammate-weapon ${usedClass}\" data-weapon-index=\"${battleState.currentTeammate.weapons.indexOf(\n              weapon,\n            )}\" ${isUsed ? 'disabled' : ''}&gt;\n                            &lt;div class=\"weapon-button-name\"&gt;${weapon.name}${cooldownText}&lt;/div&gt;\n                            &lt;div class=\"weapon-button-stats\"&gt;\n                                &lt;div&gt;${weapon.isHealing ? '治疗: ' : '攻击: '}${weapon.attack}&lt;/div&gt;\n                                &lt;div&gt;命中: ${weapon.hitRate}%&lt;/div&gt;\n                                &lt;div&gt;暴击: ${weapon.critRate}%&lt;/div&gt;\n                                &lt;div&gt;次数: ${weapon.attacksPerTurn}&lt;/div&gt;\n                                &lt;div&gt;目标: ${weapon.targetsPerAttack}&lt;/div&gt;\n                                &lt;div&gt;MP: ${weapon.mpCost}&lt;/div&gt;\n                                &lt;div&gt;冷却: ${weapon.cooldown || 0}回合&lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"weapon-effect-codes\"&gt;\n                                ${effectsHtml}\n                            &lt;/div&gt;\n                        &lt;/button&gt;\n                    `;\n          })\n          .join('')\n      : '&lt;div style=\"text-align: center; padding: 10px;\"&gt;该队友没有可用的神通&lt;/div&gt;';\n\n  if (battleState.currentTeammate &amp;&amp; battleState.currentTeammate.weapons) {\n    EventManager.bindWeaponButtons(battleState.currentTeammate.weapons, true);\n  }\n\n  const attackControls = document.querySelector('.attack-controls');\n  attackControls.innerHTML = `\n                &lt;button id=\"attack-btn\" class=\"attack-button\" disabled&gt;&lt;i class=\"fas fa-magic\"&gt;&lt;/i&gt; 队友施展神通&lt;/button&gt;\n                &lt;button id=\"next-round-btn\" class=\"next-round-button\"&gt;&lt;i class=\"fas fa-forward\"&gt;&lt;/i&gt; 跳过当前行动&lt;/button&gt;\n                &lt;button id=\"mid-action-btn\" class=\"mid-action-button\"&gt;&lt;i class=\"fas fa-pause\"&gt;&lt;/i&gt; 中途行动&lt;/button&gt;\n            `;\n\n  const attackBtn = document.getElementById('attack-btn');\n  if (attackBtn) {\n    attackBtn.addEventListener('click', performTeammateAttack);\n  }\n\n  setupSkipButton();\n}\n\nfunction executeTeammateAttackSequence(teammate, weapon) {\n\n  battleState.currentAttackCount = 0;\n\n  function performNextAttack() {\n\n    if (teammate.mp &lt; weapon.mpCost) {\n      logBattleAction(`${teammate.name} 蓝量不足！无法继续攻击。已完成 ${battleState.currentAttackCount} 次攻击。`);\n\n      weapon.used = true;\n\n      battleState.currentWeapon = null;\n\n      battleState.attackInProgress = false;\n\n      updatePlayerPanel();\n      updateEnemyPanel();\n      updateTeammateWeaponsList();\n      return;\n    }\n\n    if (\n      StateValidator.shouldEndAttack(\n        battleState.currentAttackCount,\n        weapon.attacksPerTurn,\n        battleState.selectedEnemies.length &gt; 0,\n      )\n    ) {\n\n      weapon.used = true;\n\n      battleState.currentWeapon = null;\n\n      battleState.attackInProgress = false;\n\n      updatePlayerPanel();\n      updateEnemyPanel();\n      updateTeammateWeaponsList();\n\n      return;\n    }\n\n    battleState.currentAttackCount++;\n\n    const attackNumber = battleState.currentAttackCount;\n\n    if (weapon.attacksPerTurn &gt; 1) {\n      logBattleAction(`${teammate.name} 使用 ${weapon.name} 进行第 ${attackNumber}/${weapon.attacksPerTurn} 次攻击！`);\n    } else {\n      logBattleAction(`${teammate.name} 使用 ${weapon.name} 攻击！`);\n    }\n\n    const teammateElement = document.querySelector(`.combat-entity.teammate[data-teammate-id=\"${teammate.id}\"]`);\n    teammateElement.classList.add('attack-animation-forward');\n\n    setTimeout(() =&gt; {\n\n      for (const enemyId of battleState.selectedEnemies) {\n        const enemy = battleState.enemies.find(e =&gt; e.id === enemyId);\n        if (enemy) {\n\n          const teammateStats = getTeammateActualStats(teammate);\n          const enemyStats = getEnemyActualStats(enemy);\n\n          const finalHitRate = calculateFinalHitRate(weapon.hitRate, teammateStats, enemyStats);\n          const hitRoll = Math.random();\n\n          if (hitRoll &lt;= Math.min(1.0, finalHitRate)) {\n\n            logBattleAction(`攻击命中 ${enemy.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n\n            const enemyElement = document.querySelector(`.combat-entity.enemy[data-enemy-id=\"${enemyId}\"]`);\n            enemyElement.classList.add('shake-animation');\n\n            const finalCritRate = calculateFinalCritRate(weapon.critRate, teammateStats, enemyStats, finalHitRate);\n            const critRoll = Math.random();\n\n            const isCrit = critRoll &lt;= Math.min(1.0, finalCritRate);\n\n            const finalCritMultiplier = isCrit\n              ? calculateFinalCritMultiplier(teammateStats, enemyStats, finalCritRate)\n              : 1.0;\n\n            let damage = calculateFinalDamage(weapon.attack, teammateStats, enemyStats, isCrit, finalCritMultiplier);\n\n            if (isCrit) {\n              logBattleAction(\n                `暴击！造成 ${damage} 点伤害！(暴击率: ${(finalCritRate * 100).toFixed(\n                  1,\n                )}%, 暴击倍率: ${finalCritMultiplier.toFixed(2)}x)`,\n              );\n              showDamageNumber('enemy', damage, true, enemyId);\n            } else {\n              logBattleAction(`造成 ${damage} 点伤害！`);\n              showDamageNumber('enemy', damage, false, enemyId);\n            }\n\n            const extraDamage = processTeammateEnchantmentEffects(weapon, enemy, damage, isCrit, teammate);\n            damage += extraDamage;\n\n            enemy.hp = Math.max(0, enemy.hp - damage);\n\n            addDamageHate(teammate.id, teammate.name, enemyId, damage);\n\n            addHpChangeAnimation('enemy', enemyId);\n\n            if (StateValidator.checkEnemyDeath(enemy)) {\n              return; \n            }\n\n            setTimeout(() =&gt; {\n              if (enemyElement) {\n                enemyElement.classList.remove('shake-animation');\n              }\n            }, 800);\n          } else {\n\n            logBattleAction(`攻击未命中 ${enemy.name}！(最终命中率: ${(finalHitRate * 100).toFixed(1)}%)`);\n          }\n        }\n      }\n\n      teammate.mp = Math.max(0, teammate.mp - weapon.mpCost);\n      if (weapon.mpCost &gt; 0) {\n        logBattleAction(`${teammate.name} 消耗 ${weapon.mpCost} 点灵力值。剩余灵力值: ${teammate.mp}`);\n      }\n\n      teammateElement.classList.remove('attack-animation-forward');\n\n      memoryManager.safeSetTimeout(() =&gt; {\n        updatePlayerPanel();\n        updateEnemyPanel();\n        updateHateDisplay(); \n      }, 1500); \n\n      if (\n        battleState.currentAttackCount &lt; weapon.attacksPerTurn &amp;&amp;\n        battleState.selectedEnemies.length &gt; 0 &amp;&amp;\n        battleState.enemies.length &gt; 0\n      ) {\n\n        setTimeout(performNextAttack, 800);\n      } else {\n\n        weapon.used = true;\n\n        battleState.currentWeapon = null;\n\n        battleState.attackInProgress = false;\n\n        updateTeammateWeaponsList();\n\n      }\n    }, 500); \n  }\n\n  performNextAttack();\n}\n\nlet memoryManager = {\n\n  particlePool: [],\n  damageNumberPool: [],\n  healNumberPool: [],\n  logEntryPool: [],\n\n  activeParticles: new Set(),\n  activeDamageNumbers: new Set(),\n  activeHealNumbers: new Set(),\n  activeTimeouts: new Set(),\n\n  getParticle() {\n    if (this.particlePool.length &gt; 0) {\n      return this.particlePool.pop();\n    }\n    const particle = document.createElement('div');\n    particle.className = 'death-particle';\n    return particle;\n  },\n\n  recycleParticle(particle) {\n    if (particle &amp;&amp; this.particlePool.length &lt; 50) {\n\n      particle.style.cssText = ''; \n      particle.className = 'death-particle';\n      this.particlePool.push(particle);\n      this.activeParticles.delete(particle);\n    }\n  },\n\n  getDamageNumber() {\n    if (this.damageNumberPool.length &gt; 0) {\n      return this.damageNumberPool.pop();\n    }\n    return document.createElement('div');\n  },\n\n  recycleDamageNumber(element) {\n    if (element &amp;&amp; this.damageNumberPool.length &lt; 30) {\n      element.style.cssText = '';\n      element.className = '';\n      element.textContent = '';\n      this.damageNumberPool.push(element);\n      this.activeDamageNumbers.delete(element);\n    }\n  },\n\n  getHealNumber() {\n    if (this.healNumberPool.length &gt; 0) {\n      return this.healNumberPool.pop();\n    }\n    return document.createElement('div');\n  },\n\n  recycleHealNumber(element) {\n    if (element &amp;&amp; this.healNumberPool.length &lt; 30) {\n      element.style.cssText = '';\n      element.className = '';\n      element.textContent = '';\n      this.healNumberPool.push(element);\n      this.activeHealNumbers.delete(element);\n    }\n  },\n\n  safeSetTimeout(callback, delay) {\n    const timeoutId = setTimeout(() =&gt; {\n      this.activeTimeouts.delete(timeoutId);\n      try {\n        callback();\n      } catch (error) {\n\n      }\n    }, delay);\n    this.activeTimeouts.add(timeoutId);\n    return timeoutId;\n  },\n\n  clearSafeTimeout(timeoutId) {\n    if (this.activeTimeouts.has(timeoutId)) {\n      clearTimeout(timeoutId);\n      this.activeTimeouts.delete(timeoutId);\n    }\n  },\n\n  cleanup() {\n\n    this.activeParticles.forEach(particle =&gt; {\n      if (particle.parentNode) {\n        particle.parentNode.removeChild(particle);\n      }\n    });\n\n    this.activeDamageNumbers.forEach(element =&gt; {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    this.activeHealNumbers.forEach(element =&gt; {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    this.activeTimeouts.forEach(timeoutId =&gt; {\n      clearTimeout(timeoutId);\n    });\n\n    this.activeParticles.clear();\n    this.activeDamageNumbers.clear();\n    this.activeHealNumbers.clear();\n    this.activeTimeouts.clear();\n\n    this.particlePool = [];\n    this.damageNumberPool = [];\n    this.healNumberPool = [];\n    this.logEntryPool = [];\n  },\n};\n\nlet lazyRenderManager = {\n  isPreparationRendered: false,\n  isCombatRendered: false,\n  lastRenderTime: {\n    preparation: 0,\n    combat: 0,\n  },\n\n  shouldRenderPreparation() {\n    const preparationDetails = document.getElementById('preparation-details');\n    return preparationDetails &amp;&amp; preparationDetails.open;\n  },\n\n  shouldRenderCombat() {\n    if (!this.isCombatRendered || !battleState || !battleState.isActive) {\n      return false;\n    }\n    const combatInterface = document.getElementById('combat-interface');\n    return combatInterface &amp;&amp; combatInterface.style.display !== 'none';\n  },\n\n  safeUpdateInterface(updateFunction, renderType) {\n    try {\n      const now = Date.now();\n\n      if (now - this.lastRenderTime[renderType] &lt; 16) {\n        return;\n      }\n      if (renderType === 'preparation' &amp;&amp; !this.shouldRenderPreparation()) {\n        return;\n      }\n      if (renderType === 'combat' &amp;&amp; !this.shouldRenderCombat()) {\n        return;\n      }\n      updateFunction();\n      this.lastRenderTime[renderType] = now;\n    } catch (error) {\n\n    }\n  },\n\n  reset() {\n    this.isPreparationRendered = false;\n    this.isCombatRendered = false;\n    this.lastRenderTime.preparation = 0;\n    this.lastRenderTime.combat = 0;\n  },\n};\n\nwindow.addEventListener('beforeunload', () =&gt; {\n  memoryManager.cleanup();\n});\n\nif (window.parent !== window) {\n  window.addEventListener('unload', () =&gt; {\n    memoryManager.cleanup();\n  });\n}\n\nsetInterval(() =&gt; {\n  try {\n\n    memoryManager.activeParticles.forEach(particle =&gt; {\n      if (!particle.parentNode || !document.contains(particle)) {\n        memoryManager.activeParticles.delete(particle);\n      }\n    });\n    memoryManager.activeDamageNumbers.forEach(element =&gt; {\n      if (!element.parentNode || !document.contains(element)) {\n        memoryManager.activeDamageNumbers.delete(element);\n      }\n    });\n    memoryManager.activeHealNumbers.forEach(element =&gt; {\n      if (!element.parentNode || !document.contains(element)) {\n        memoryManager.activeHealNumbers.delete(element);\n      }\n    });\n\n    if (memoryManager.particlePool.length &gt; 100) {\n      memoryManager.particlePool.length = 50;\n    }\n    if (memoryManager.damageNumberPool.length &gt; 60) {\n      memoryManager.damageNumberPool.length = 30;\n    }\n    if (memoryManager.healNumberPool.length &gt; 60) {\n      memoryManager.healNumberPool.length = 30;\n    }\n    if (memoryManager.logEntryPool.length &gt; 40) {\n      memoryManager.logEntryPool.length = 20;\n    }\n\n    if (!lazyRenderManager.shouldRenderPreparation()) {\n      lazyRenderManager.isPreparationRendered = false;\n    }\n    if (!lazyRenderManager.shouldRenderCombat()) {\n      lazyRenderManager.isCombatRendered = false;\n    }\n  } catch (error) {\n\n  }\n}, 60000);\n\nfunction autoCollapseAfterSend() {\n  if (battleState) {\n    try {\n      localStorage.setItem('battleState_backup', JSON.stringify(battleState));\n    } catch (e) {}\n  }\n  const preparationDetails = document.getElementById('preparation-details');\n  if (preparationDetails &amp;&amp; preparationDetails.open) {\n    setTimeout(() =&gt; {\n      preparationDetails.open = false;\n    }, 100);\n\n    setTimeout(() =&gt; {\n      memoryManager.cleanup();\n      lazyRenderManager.reset();\n    }, 60000);\n  }\n}\n\nfunction setupSendDetection() {\n  if (typeof window.triggerSlash === 'function') {\n    const originalTriggerSlash = window.triggerSlash;\n    window.triggerSlash = async function (...args) {\n      const result = await originalTriggerSlash.apply(this, args);\n      autoCollapseAfterSend();\n      return result;\n    };\n  }\n  setTimeout(() =&gt; {\n    const sendButtons = document.querySelectorAll('[id*=\"send\"], [class*=\"send\"], [onclick*=\"send\"]');\n    sendButtons.forEach(button =&gt; {\n      button.addEventListener('click', () =&gt; {\n        setTimeout(autoCollapseAfterSend, 200);\n      });\n    });\n  }, 1000);\n}\nsetupSendDetection();\n\nfunction toggleStats(elementId) {\n  const element = document.getElementById(elementId);\n  const button = document.querySelector(`[onclick=\"toggleStats('${elementId}')\"]`);\n  if (element &amp;&amp; button) {\n    const isExpanded = element.classList.contains('expanded');\n    if (isExpanded) {\n\n      element.classList.remove('expanded');\n      button.classList.remove('expanded');\n    } else {\n\n      element.classList.add('expanded');\n      button.classList.add('expanded');\n    }\n  }\n}\n\nfunction executeHealingSequence(weapon, weaponTemplate) {\n\n  battleState.currentAttackCount = 0;\n\n  function performNextHealing() {\n\n    if (battleState.player.mp &lt; weapon.mpCost) {\n      logBattleAction(`蓝量不足！无法继续使用 ${weapon.name}。已完成 ${battleState.currentAttackCount} 次使用。`);\n\n      weapon.used = true;\n\n      battleState.currentWeapon = null;\n\n      battleState.attackInProgress = false;\n\n      updateBattleUI({ player: true, enemy: true, weapons: true });\n      return;\n    }\n\n    let actualAttacksPerTurn = weapon.attacksPerTurn;\n    if (battleState.sacrificeBoostActive) {\n      actualAttacksPerTurn += battleState.sacrificeBoostActive.attacksPerTurn;\n    }\n\n    if (battleState.currentAttackCount &gt;= actualAttacksPerTurn) {\n\n      weapon.used = true;\n\n      battleState.currentWeapon = null;\n\n      battleState.attackInProgress = false;\n\n      updateBattleUI({ player: true, enemy: true, weapons: true });\n      return;\n    }\n\n    battleState.currentAttackCount++;\n\n    const healingNumber = battleState.currentAttackCount;\n    if (actualAttacksPerTurn &gt; 1) {\n      logBattleAction(\n        `${battleState.player.name || 'User'} 使用 ${\n          weapon.name\n        } 进行第 ${healingNumber}/${actualAttacksPerTurn} 次治疗！`,\n      );\n    }\n\n    executeHealingAction(weapon, weaponTemplate, () =&gt; {\n\n      battleState.player.mp = Math.max(0, battleState.player.mp - weapon.mpCost);\n      if (weapon.mpCost &gt; 0) {\n        logBattleAction(`消耗 ${weapon.mpCost} 点灵力值。剩余灵力值: ${battleState.player.mp}`);\n      }\n\n      if (battleState.currentAttackCount &lt; actualAttacksPerTurn) {\n        setTimeout(performNextHealing, 800);\n      } else {\n\n        weapon.used = true;\n        battleState.currentWeapon = null;\n        battleState.attackInProgress = false;\n        updateBattleUI({ player: true, enemy: true, weapons: true });\n      }\n    });\n  }\n\n  performNextHealing();\n}\n\nfunction executeHealingAction(weapon, weaponTemplate, callback) {\n\n  const targets = getHealingTargets(weapon, weaponTemplate, battleState.player);\n  targets.forEach(target =&gt; {\n    if (weaponTemplate === 'A2') {\n      performSingleHealing(weapon, target);\n    } else if (weaponTemplate === 'A3') {\n      performSingleManaRestore(weapon, target);\n    } else if (weaponTemplate === 'A4') {\n      performSingleSacrificeBoost(weapon, target, battleState.player);\n    } else {\n      performSingleHealing(weapon, target); \n    }\n  });\n\n  setTimeout(callback, 1200);\n}\n\nfunction getHealingTargets(weapon, weaponTemplate, attacker = null) {\n  const targets = [];\n\n  if (battleState.selectedHealTargets &amp;&amp; battleState.selectedHealTargets.length &gt; 0) {\n    battleState.selectedHealTargets.forEach(target =&gt; {\n      targets.push({ type: target.type, entity: target.entity });\n    });\n  } else {\n\n    if (battleState.healTarget === 'player') {\n      targets.push({ type: 'player', entity: battleState.player });\n    } else if (battleState.healTarget &amp;&amp; battleState.healTarget !== 'player') {\n      const targetTeammate = battleState.teammates.find(t =&gt; t.id === battleState.healTarget);\n      if (targetTeammate) {\n        targets.push({ type: 'teammate', entity: targetTeammate });\n      }\n    }\n  }\n\n  return targets.slice(0, weapon.targetsPerAttack);\n}\n\nfunction performSingleHealing(weapon, target) {\n  const targetName = target.type === 'player' ? battleState.player.name || 'User' : target.entity.name;\n\n  let healAmount = weapon.attack;\n\n  const critRoll = Math.random() * 100;\n  const isCrit = critRoll &lt;= weapon.critRate;\n  if (isCrit) {\n    const playerStats = getPlayerActualStats();\n    const critMultiplier = playerStats.baseCritMultiplier;\n    healAmount = Math.floor(healAmount * critMultiplier);\n    logBattleAction(`暴击治疗！对 ${targetName} 恢复 ${healAmount} 点生命值！`);\n  } else {\n    logBattleAction(`对 ${targetName} 恢复 ${healAmount} 点生命值！`);\n  }\n\n  if (target.type === 'player') {\n    const oldHp = battleState.player.hp;\n    battleState.player.hp = Math.min(battleState.player.hp + healAmount, battleState.player.maxHp);\n    const actualHeal = battleState.player.hp - oldHp;\n    showHealNumber(actualHeal);\n  } else if (target.type === 'teammate') {\n    const oldHp = target.entity.hp;\n    target.entity.hp = Math.min(target.entity.hp + healAmount, target.entity.maxHp);\n    const actualHeal = target.entity.hp - oldHp;\n    logBattleAction(`实际恢复了 ${actualHeal} 点生命值！`);\n  } else if (target.type === 'enemy') {\n    const oldHp = target.entity.hp;\n    target.entity.hp = Math.min(target.entity.hp + healAmount, target.entity.maxHp);\n    const actualHeal = target.entity.hp - oldHp;\n    showHealNumberOnEnemy(actualHeal, target.entity.id);\n  }\n\n  addHealHate('player', battleState.player.name || 'User', healAmount);\n}\n\nfunction performSingleManaRestore(weapon, target) {\n  const targetName = target.type === 'player' ? battleState.player.name || 'User' : target.entity.name;\n\n  let manaAmount = weapon.attack;\n\n  const critRoll = Math.random() * 100;\n  const isCrit = critRoll &lt;= weapon.critRate;\n  if (isCrit) {\n    const playerStats = getPlayerActualStats();\n    const critMultiplier = playerStats.baseCritMultiplier;\n    manaAmount = Math.floor(manaAmount * critMultiplier);\n    logBattleAction(`暴击恢复！对 ${targetName} 恢复 ${manaAmount} 点灵力值！`);\n  } else {\n    logBattleAction(`对 ${targetName} 恢复 ${manaAmount} 点灵力值！`);\n  }\n\n  if (target.type === 'player') {\n    const oldMp = battleState.player.mp;\n    battleState.player.mp = Math.min(battleState.player.mp + manaAmount, battleState.player.maxMp);\n    const actualRestore = battleState.player.mp - oldMp;\n    logBattleAction(`实际恢复了 ${actualRestore} 点灵力值！`);\n  } else if (target.type === 'teammate') {\n    const oldMp = target.entity.mp;\n    target.entity.mp = Math.min(target.entity.mp + manaAmount, target.entity.maxMp);\n    const actualRestore = target.entity.mp - oldMp;\n    logBattleAction(`实际恢复了 ${actualRestore} 点灵力值！`);\n  }\n}\n\nfunction performSingleSacrificeBoost(weapon, target, attacker = null) {\n\n  let actualAttacker, attackerName, isPlayerAttacker;\n\n  if (attacker) {\n\n    actualAttacker = attacker;\n    isPlayerAttacker = attacker === battleState.player;\n    attackerName = isPlayerAttacker ? battleState.player.name || 'User' : attacker.name;\n  } else {\n\n    actualAttacker = target.type === 'player' ? battleState.player : target.entity;\n    isPlayerAttacker = target.type === 'player';\n    attackerName = target.type === 'player' ? battleState.player.name || 'User' : target.entity.name;\n  }\n\n  const targetName = target.type === 'player' ? battleState.player.name || 'User' : target.entity.name;\n\n  logBattleAction(`${attackerName} 对 ${targetName} 使用 ${weapon.name} 进行牺牲增益！`);\n\n  const sacrificeDamage = Math.floor(weapon.attack * 0.5);\n  actualAttacker.hp = Math.max(1, actualAttacker.hp - sacrificeDamage);\n  logBattleAction(`${attackerName} 牺牲 ${sacrificeDamage} 点生命值！`);\n\n  if (target.type === 'player') {\n\n    if (!battleState.sacrificeBoostActive) {\n      battleState.sacrificeBoostActive = {\n        attack: weapon.attack,\n        hitRate: weapon.hitRate,\n        critRate: weapon.critRate,\n        attacksPerTurn: weapon.attacksPerTurn,\n        targetsPerAttack: weapon.targetsPerAttack,\n        weaponName: weapon.name,\n      };\n      logBattleAction(`${targetName} 获得强大增益！本回合所有攻击都将获得 ${weapon.name} 的属性加成！`);\n      logBattleAction(\n        `增益效果：攻击+${weapon.attack}，命中+${weapon.hitRate}%，暴击+${weapon.critRate}%，次数+${weapon.attacksPerTurn}，目标+${weapon.targetsPerAttack}`,\n      );\n    }\n  } else {\n\n    const teammate = target.entity;\n    if (!teammate.buffs) teammate.buffs = [];\n\n    const existingSacrificeBoost = teammate.buffs.find(buff =&gt; buff.type === 'sacrificeBoost');\n    if (!existingSacrificeBoost) {\n      const sacrificeBoostBuff = {\n        name: '牺牲增益',\n        type: 'sacrificeBoost',\n        isPositive: true,\n        duration: '本回合',\n        attack: weapon.attack,\n        hitRate: weapon.hitRate,\n        critRate: weapon.critRate,\n        attacksPerTurn: weapon.attacksPerTurn,\n        targetsPerAttack: weapon.targetsPerAttack,\n        weaponName: weapon.name,\n        tooltipText: `攻击+${weapon.attack}，命中+${weapon.hitRate}%，暴击+${weapon.critRate}%，次数+${weapon.attacksPerTurn}，目标+${weapon.targetsPerAttack}`,\n      };\n      teammate.buffs.push(sacrificeBoostBuff);\n\n      logBattleAction(`${targetName} 获得强大增益！本回合所有攻击都将获得 ${weapon.name} 的属性加成！`);\n      logBattleAction(\n        `增益效果：攻击+${weapon.attack}，命中+${weapon.hitRate}%，暴击+${weapon.critRate}%，次数+${weapon.attacksPerTurn}，目标+${weapon.targetsPerAttack}`,\n      );\n    }\n  }\n}\n\nfunction executeTeammateHealingSequence(teammate, weapon, weaponTemplate) {\n\n  battleState.currentAttackCount = 0;\n\n  function performNextHealing() {\n\n    if (teammate.mp &lt; weapon.mpCost) {\n      logBattleAction(\n        `${teammate.name} 蓝量不足！无法继续使用 ${weapon.name}。已完成 ${battleState.currentAttackCount} 次使用。`,\n      );\n\n      weapon.used = true;\n\n      teammate.skillUsed = true;\n\n      battleState.currentWeapon = null;\n\n      battleState.attackInProgress = false;\n\n      updatePlayerPanel();\n      updateEnemyPanel();\n      updateTeammateWeaponsList();\n      return;\n    }\n\n    if (battleState.currentAttackCount &gt;= weapon.attacksPerTurn) {\n\n      weapon.used = true;\n\n      teammate.skillUsed = true;\n\n      battleState.currentWeapon = null;\n\n      battleState.attackInProgress = false;\n\n      updatePlayerPanel();\n      updateEnemyPanel();\n      updateTeammateWeaponsList();\n      return;\n    }\n\n    battleState.currentAttackCount++;\n\n    const healingNumber = battleState.currentAttackCount;\n    if (weapon.attacksPerTurn &gt; 1) {\n      logBattleAction(`${teammate.name} 使用 ${weapon.name} 进行第 ${healingNumber}/${weapon.attacksPerTurn} 次治疗！`);\n    }\n\n    executeTeammateHealingAction(teammate, weapon, weaponTemplate, () =&gt; {\n\n      teammate.mp = Math.max(0, teammate.mp - weapon.mpCost);\n      if (weapon.mpCost &gt; 0) {\n        logBattleAction(`${teammate.name} 消耗 ${weapon.mpCost} 点灵力值。剩余灵力值: ${teammate.mp}`);\n      }\n\n      if (battleState.currentAttackCount &lt; weapon.attacksPerTurn) {\n        setTimeout(performNextHealing, 800);\n      } else {\n\n        weapon.used = true;\n        teammate.skillUsed = true;\n        battleState.currentWeapon = null;\n        battleState.attackInProgress = false;\n        updatePlayerPanel();\n        updateEnemyPanel();\n        updateTeammateWeaponsList();\n      }\n    });\n  }\n\n  performNextHealing();\n}\n\nfunction executeTeammateHealingAction(teammate, weapon, weaponTemplate, callback) {\n\n  const targets = getHealingTargets(weapon, weaponTemplate, teammate);\n  targets.forEach(target =&gt; {\n    if (weaponTemplate === 'A2') {\n      performTeammateSingleHealing(teammate, weapon, target);\n    } else if (weaponTemplate === 'A3') {\n      performTeammateSingleManaRestore(teammate, weapon, target);\n    } else if (weaponTemplate === 'A4') {\n      performSingleSacrificeBoost(weapon, target, teammate);\n    } else {\n      performTeammateSingleHealing(teammate, weapon, target); \n    }\n  });\n\n  setTimeout(callback, 1200);\n}\n\nfunction performTeammateSingleHealing(teammate, weapon, target) {\n  const targetName = target.type === 'player' ? battleState.player.name || 'User' : target.entity.name;\n\n  let healAmount = weapon.attack;\n\n  const critRoll = Math.random() * 100;\n  const isCrit = critRoll &lt;= weapon.critRate;\n  if (isCrit) {\n    const teammateStats = getTeammateActualStats(teammate);\n    const critMultiplier = teammateStats.baseCritMultiplier;\n    healAmount = Math.floor(healAmount * critMultiplier);\n    logBattleAction(`${teammate.name} 暴击治疗！对 ${targetName} 恢复 ${healAmount} 点生命值！`);\n  } else {\n    logBattleAction(`${teammate.name} 对 ${targetName} 恢复 ${healAmount} 点生命值！`);\n  }\n\n  if (target.type === 'player') {\n    const oldHp = battleState.player.hp;\n    battleState.player.hp = Math.min(battleState.player.hp + healAmount, battleState.player.maxHp);\n    const actualHeal = battleState.player.hp - oldHp;\n    showHealNumber(actualHeal);\n  } else if (target.type === 'teammate') {\n    const oldHp = target.entity.hp;\n    target.entity.hp = Math.min(target.entity.hp + healAmount, target.entity.maxHp);\n    const actualHeal = target.entity.hp - oldHp;\n    logBattleAction(`实际恢复了 ${actualHeal} 点生命值！`);\n  } else if (target.type === 'enemy') {\n    const oldHp = target.entity.hp;\n    target.entity.hp = Math.min(target.entity.hp + healAmount, target.entity.maxHp);\n    const actualHeal = target.entity.hp - oldHp;\n    showHealNumberOnEnemy(actualHeal, target.entity.id);\n  }\n\n  addHealHate(teammate.id, teammate.name, healAmount);\n}\n\nfunction performTeammateSingleManaRestore(teammate, weapon, target) {\n  const targetName = target.type === 'player' ? battleState.player.name || 'User' : target.entity.name;\n\n  let manaAmount = weapon.attack;\n\n  const critRoll = Math.random() * 100;\n  const isCrit = critRoll &lt;= weapon.critRate;\n  if (isCrit) {\n    const teammateStats = getTeammateActualStats(teammate);\n    const critMultiplier = teammateStats.baseCritMultiplier;\n    manaAmount = Math.floor(manaAmount * critMultiplier);\n    logBattleAction(`${teammate.name} 暴击恢复！对 ${targetName} 恢复 ${manaAmount} 点灵力值！`);\n  } else {\n    logBattleAction(`${teammate.name} 对 ${targetName} 恢复 ${manaAmount} 点灵力值！`);\n  }\n\n  if (target.type === 'player') {\n    const oldMp = battleState.player.mp;\n    battleState.player.mp = Math.min(battleState.player.mp + manaAmount, battleState.player.maxMp);\n    const actualRestore = battleState.player.mp - oldMp;\n    logBattleAction(`实际恢复了 ${actualRestore} 点灵力值！`);\n  } else if (target.type === 'teammate') {\n    const oldMp = target.entity.mp;\n    target.entity.mp = Math.min(target.entity.mp + manaAmount, target.entity.maxMp);\n    const actualRestore = target.entity.mp - oldMp;\n    logBattleAction(`实际恢复了 ${actualRestore} 点灵力值！`);\n  }\n}\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<div class=\"custom-divine-starmap-wrapper\">\n  \n  <style>/* 主容器样式 - 神圣星图主题 */\n\n.mes_text .custom-divine-starmap-wrapper {\n  background-color: #f5f2e9;\n  /* 象牙白基底 */\n  /* 主体背景 - 模拟发光的圣洁星图 */\n  background-image: radial-gradient(circle at 50% 50%, rgba(255, 230, 180, 0.25) 0%, rgba(255, 230, 180, 0) 60%),\n        linear-gradient(160deg, #fdfcf8 0%, #f5f2e9 100%);\n  /* 核心：神圣光晕与金色双层边框 */\n  border: 1px solid #d4c09a;\n  box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.8), \n        0 0 20px 4px rgba(220, 180, 110, 0.4);\n  /* 外部金色辉光 */\n  border-radius: 8px !important;\n  max-width: 861px !important;\n  margin: 10px auto !important;\n  padding: 0 6px 6px 6px !important;\n  box-sizing: border-box !important;\n  overflow: hidden !important;\n  font-family: 'KaiTi', 'SimSun', 'Segoe UI', 'Times New Roman', serif !important;\n  /* 优先使用更典雅的字体 */\n  color: #5D493A !important;\n  /* 深金色/暖棕色文本 */\n}\n\n/* 全局文字辉光效果 */\n\n.mes_text .custom-divine-starmap-wrapper,\n.mes_text .custom-divine-starmap-wrapper * {\n  text-shadow: 0 1px 1px rgba(255, 240, 215, 0.6) !important;\n}\n\n/* 详情按钮样式 */\n\n.mes_text .custom-details-divine-starmap {\n  border: none !important;\n  margin: 0 !important;\n  padding: 0 !important;\n  color: inherit !important;\n}\n\n/* 基础摘要样式 */\n\n.mes_text .custom-details-divine-starmap > summary {\n  display: flex !important;\n  align-items: center !important;\n  width: 100% !important;\n  cursor: pointer !important;\n  list-style: none !important;\n  outline: none !important;\n  transition: all 0.25s ease-out !important;\n  position: relative !important;\n  font-weight: 600 !important;\n  color: #5D493A !important;\n}\n\n/* 移除默认标记 */\n\n.mes_text .custom-details-divine-starmap > summary::-webkit-details-marker,\n.mes_text .custom-details-divine-starmap > summary::marker {\n  display: none !important;\n  content: '' !important;\n}\n\n/* 核心：SVG神圣八芒星图标容器 */\n\n.mes_text .custom-details-divine-starmap > summary .custom-icon-starmap {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 10px;\n  transition: all 0.3s cubic-bezier(0.2, 0.9, 0.3, 1);\n  /* 默认光晕 */\n  filter: drop-shadow(0 0 3px rgba(220, 180, 110, 0.7));\n}\n\n.mes_text .custom-details-divine-starmap > summary .custom-icon-starmap svg {\n  width: 20px;\n  /* SVG尺寸 */\n  height: 20px;\n  fill: #c8a76a;\n  /* SVG颜色 */\n  transition: all 0.3s ease-out;\n}\n\n/* --- 关闭时状态 --- */\n\n.mes_text .custom-details-divine-starmap:not([open]) > summary {\n  padding: 6px 10px !important;\n  font-size: 16px !important;\n  margin-top: 6px !important;\n  background-color: rgba(250, 245, 230, 0.7);\n  /* 半透明质感 */\n  border: 1px solid rgba(212, 192, 154, 0.6) !important;\n  border-radius: 6px !important;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05) !important;\n}\n\n/* 关闭时悬停效果 */\n\n.mes_text .custom-details-divine-starmap:not([open]) > summary:hover {\n  background-color: rgba(255, 250, 240, 0.9);\n  border-color: rgba(200, 167, 106, 0.8) !important;\n  transform: translateY(-1px);\n}\n\n.mes_text .custom-details-divine-starmap:not([open]) > summary:hover .custom-icon-starmap {\n  filter: drop-shadow(0 0 6px rgba(255, 200, 100, 1));\n  /* 增强光晕 */\n}\n\n.mes_text .custom-details-divine-starmap:not([open]) > summary:hover .custom-icon-starmap svg {\n  fill: #e6c589;\n  /* 提亮图标 */\n}\n\n/* --- 打开时状态 --- */\n\n.mes_text .custom-details-divine-starmap[open] > summary {\n  padding: 12px 10px !important;\n  font-size: 18px !important;\n  margin-top: 6px !important;\n  margin-bottom: 6px !important;\n  border: 1px solid rgba(212, 192, 154, 0.7) !important;\n  border-radius: 6px !important;\n  background-color: rgba(248, 242, 230, 0.8) !important;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.08) !important;\n}\n\n/* 打开时图标效果 */\n\n.mes_text .custom-details-divine-starmap[open] > summary .custom-icon-starmap {\n  transform: rotate(135deg);\n  /* 激活旋转 */\n  filter: drop-shadow(0 0 8px rgba(255, 200, 100, 1));\n}\n\n.mes_text .custom-details-divine-starmap[open] > summary .custom-icon-starmap svg {\n  fill: #f0d6a2;\n}\n\n/* 点击反馈 */\n\n.mes_text .custom-details-divine-starmap > summary:active {\n  transform: translateY(0px);\n  transition-duration: 0.1s;\n}\n\n/* 打开时显示的内容 - 圣洁的象牙白 */\n\n.mes_text .custom-details-divine-starmap > div {\n  padding: 15px !important;\n  margin: 0 !important;\n  font-size: 15px !important;\n  line-height: 1.6 !important;\n  background-color: rgba(253, 252, 248, 0.85) !important;\n  /* 更纯净的象牙白 */\n  color: #5D493A !important;\n  border: 1px solid rgba(212, 192, 154, 0.4) !important;\n  border-radius: 6px !important;\n  font-weight: normal !important;\n  white-space: pre-wrap !important;\n  word-break: break-word !important;\n  overflow-y: auto;\n  /* 内容溢出时滚动 */\n  max-height: 400px;\n  /* 可按需设置 */\n}\n\n/* 定制滚动条 (Webkit内核) */\n\n.mes_text .custom-details-divine-starmap > div::-webkit-scrollbar {\n  width: 10px;\n}\n\n.mes_text .custom-details-divine-starmap > div::-webkit-scrollbar-track {\n  background: rgba(245, 242, 233, 0.5);\n}\n\n.mes_text .custom-details-divine-starmap > div::-webkit-scrollbar-thumb {\n  background-color: #d4c09a;\n  border-radius: 5px;\n  border: 2px solid rgba(253, 252, 248, 0.85);\n}\n\n.mes_text .custom-details-divine-starmap > div::-webkit-scrollbar-thumb:hover {\n  background-color: #c8a76a;\n}</style>\n\n  <details class=\"custom-details-divine-starmap\">\n    <summary>\n      <span class=\"custom-icon-starmap\">\n        \n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 1.5l2.48 5.72 5.92 1.28-4.5 4.14 1.4 6.06L12 15.4l-5.3 3.3 1.4-6.06-4.5-4.14 5.92-1.28L12 1.5z M12 8.5l-1.34 3.08-3.2 0.7 2.43 2.24-0.75 3.28L12 16.1l2.86 1.78-0.75-3.28 2.43-2.24-3.2-0.7L12 8.5z\"></path></svg>\n      </span>\n      天机罗盘\n    </summary>\n    <div>\n      \n      **<q>『天时』</q>**: 【仙逆纪元0014年01月01日 - 09时00分 - 下界-四圣星域-朱雀星-赵国-藤家城 - 晨雾】\n\n---\n\n<q>『当下』</q>- 汝之行 (U-)\n| 当前事件 | 核心目标 | 状态 | 当前地点 |\n| :--- | :--- | :--- | :--- |\n| 获得修仙机会 | 完成李府管家的要求 | ▶️进行中 | 朱雀星-赵国-藤家城-李府 |\n\n<q>『世局』</q>- 四海风云 (W-)\n此乃汝视角之外的天地变迁，其因果亦将汇入汝之命运长河。\n| 纪事 | 状态 | 发生之年 | 关键人物/势力 | 核心地点 |\n| :--- | :--- | :--- | :--- | :--- |\n| W01: 恒岳派收徒 | ⏳ 未发生 | 14年1月 | 王林 / 恒岳派 | 朱雀星-赵国-恒岳派 |\n| W02: 发现天逆珠 | ⏳ 未发生 | 14年6月 | 王林 / 黄鼠狼 | 朱雀星-赵国-恒岳派 |\n| W03: 引气入体 | ⏳ 未发生 | 15年 | 王林 / 孙大柱 | 朱雀星-赵国-恒岳派 |\n| W04: 斩杀黄鼠狼 | ⏳ 未发生 | 16年2月 | 王林 / 张虎 | 朱雀星-赵国-恒岳派 |\n| W05: 后山集训 | ⏳ 未发生 | 18年 | 王林 / 司徒南 | 朱雀星-赵国-恒岳派 |\n\n纪事详述:\nW01-14年1月: 恒岳派招收弟子，资质平庸的王林（凡人）由四叔贿赂长老，得以成为记名弟子。\nW02-14年6月: 王林遭杂役负责人黄鼠狼（凝气五层）刁难，与舍友张虎（凡人）交好，并在打杂时偶然发现天逆珠。\nW03-15年: 孙大柱（凝气五层）为图谋灵液葫芦，收王林为徒。王林借助天逆珠空间内的灵液，成功引气入体。\nW04-16年2月: 张虎（凝气一层）因撞破黄鼠狼受贿而遭追杀，在王林（凝气一层）帮助下反杀对方后逃离。王林接替其职位，苦修至凝气二层。\nW05-18年: 王林在后山集训期间，于天逆空间内，借助灵液及司徒南的指导修炼近三十年，修为达到凝气十四层。\n---\n**<q>『变数』</q>**\n暂无\n    </div>\n  </details>\n</div>\n<pre><code class=\"custom-html custom-language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"zh-CN\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" /&gt;\n  &lt;meta name=\"color-scheme\" content=\"light dark\" /&gt;\n  &lt;title&gt;选项美化 (CSS图标切换)&lt;/title&gt;\n\n  &lt;style&gt;\n  /* 字体 */\n  @import url(\"https://fontsapi.zeoseven.com/7/main/result.css\");/* Zhuque Fangsong (technical preview) */\n  @import url(\"https://fontsapi.zeoseven.com/477/main/result.css\"); /* TsangerXWZ */\n\n  :root{\n    --outer-font: \"TsangerXWZ\",\"Microsoft YaHei\",sans-serif;\n    --container-width: 550px;\n    --border-radius: 16px;\n\n    /* 浅色主题 */\n    --paper-fallback-color:#faf8f3;\n    --text-color:rgba(35,45,60,.86);\n    --divider-color:rgba(120,130,140,.12);\n    --glow-color:rgba(255,205,120,.55);\n    --blend-color:#f4efe6;\n    --item-bg:rgba(255,255,255,.48);\n    --item-hover-bg:rgba(255,255,255,.7);\n    --item-border:rgba(160,165,170,.18);\n    --blend-opacity:.11;\n    --noise-opacity:.035;\n    --fiber-opacity:.06;\n    --base-shadow:0 10px 30px rgba(0,0,0,.08),0 5px 15px rgba(0,0,0,.05);\n    --hover-shadow:0 15px 40px rgba(100,180,220,.15),0 5px 20px rgba(100,180,220,.1);\n    --item-shadow:0 2px 8px rgba(0,0,0,.05);\n    --item-hover-shadow:0 6px 20px rgba(0,0,0,.1);\n    --transition-speed:.35s;\n    --collapse-speed:.6s;\n    --theme-change-speed:.8s;\n    --easing:cubic-bezier(.4,0,.2,1);\n    --paper-bg-image:url('https://i.postimg.cc/DZbjkx5J/meow.png');\n  }\n\n  /* 深色主题 */\n  .post-it-container.dark-mode{\n    --paper-fallback-color:#1e232a;\n    --text-color:rgba(245,240,220,.93);\n    --divider-color:rgba(255,255,255,.09);\n    --glow-color:rgba(240,210,140,.55);\n    --blend-color:#181d23;\n    --item-bg:rgba(255,255,255,.06);\n    --item-hover-bg:rgba(255,255,255,.12);\n    --item-border:rgba(255,255,255,.1);\n    --blend-opacity:.24;\n    --noise-opacity:.032;\n    --fiber-opacity:.07;\n    --base-shadow:0 10px 40px rgba(0,0,0,.32),0 5px 20px rgba(0,0,0,.22);\n    --hover-shadow:0 15px 50px rgba(240,210,140,.10),0 5px 25px rgba(240,210,140,.06);\n    --item-shadow:0 2px 10px rgba(0,0,0,.22);\n    --item-hover-shadow:0 6px 25px rgba(100,230,230,.1);\n  }\n\n  body{\n    display: flex;\n    justify-content: center;\n    font-family:\"Zhuque Fangsong (technical preview)\",\"Microsoft YaHei\",sans-serif;\n    font-size:1.1em;line-height:1.6;color:var(--text-color);\n    transition:color var(--theme-change-speed) ease;\n  }\n\n  .post-it-container{\n    width:var(--container-width);\n    position:relative;margin:16px auto;padding:1em;padding-top:3.5em;\n    color:var(--text-color);\n    background-color:var(--paper-fallback-color);\n    background-image:var(--paper-bg-image);\n    background-position: left top;\n    background-repeat: repeat;\n    background-blend-mode:multiply;\n    border-radius:var(--border-radius);box-shadow:var(--base-shadow);\n    transition:transform var(--transition-speed) var(--easing),\n               box-shadow var(--transition-speed) var(--easing),\n               background-color var(--theme-change-speed) ease,\n               color var(--theme-change-speed) ease;\n    isolation:isolate;overflow:hidden;\n  }\n  .post-it-container.dark-mode{ background-blend-mode:soft-light; }\n\n  .post-it-container::before,\n  .post-it-container::after {\n    content:\"\"; position:absolute; inset:0; z-index:1; border-radius:inherit;\n    pointer-events:none;\n  }\n  .post-it-container::before{\n    background:\n      radial-gradient(120% 100% at 50% 0%, rgba(0,0,0,var(--fiber-opacity)) 0, rgba(0,0,0,0) 70%),\n      radial-gradient(90% 120% at 100% 20%, rgba(0,0,0,calc(var(--fiber-opacity) * .7)) 0, rgba(0,0,0,0) 65%),\n      linear-gradient(180deg, rgba(255,255,255,0) 0%, var(--blend-color) 100%);\n    opacity:var(--blend-opacity);\n    transition:background-color var(--theme-change-speed) ease,opacity var(--theme-change-speed) ease;\n  }\n  .post-it-container::after{\n    background-image:\n      repeating-linear-gradient(0deg,   rgba(0,0,0,.028) 0 1px, transparent 1px 2px),\n      repeating-linear-gradient(90deg,  rgba(0,0,0,.022) 0 1px, transparent 1px 2px);\n    opacity:var(--noise-opacity);\n  }\n\n  .cat-kaomoji{\n    position:absolute; top:20px; left:24px;\n    z-index: 2;\n    font-family:var(--outer-font);\n    font-size:16px; font-weight:600;\n    color:var(--text-color); opacity:.92;\n    text-shadow:0 1px 2px rgba(255,255,255,.22);\n    transition:transform var(--transition-speed) var(--easing),opacity var(--transition-speed) var(--easing);\n    pointer-events: none;\n  }\n  .post-it-container:hover .cat-kaomoji{opacity:1; transform:scale(1.03)}\n\n  .theme-icon{\n    position:absolute; top:8px; right:10px;\n    z-index: 2;\n    font-size:30px; line-height:1;\n    padding:6px; background:transparent; border:none; box-shadow:none; backdrop-filter:none;\n    color:inherit; cursor:pointer; user-select:none; -webkit-tap-highlight-color:transparent;\n    border-radius:8px;\n    transition:transform var(--transition-speed) var(--easing), filter var(--transition-speed) var(--easing);\n  }\n  .theme-icon:hover{ transform:scale(1.06); filter:drop-shadow(0 1px 1px rgba(0,0,0,.2)); }\n  .theme-icon:active{ transform:scale(.96); }\n  .theme-icon:focus-visible{ outline:2px solid rgba(255,215,0,.55); outline-offset:2px; }\n\n  /* --- 新增的 CSS 规则 --- */\n  .theme-icon .icon-moon { display: none; }\n  .theme-icon .icon-sun { display: inline; }\n  .post-it-container.dark-mode .theme-icon .icon-sun { display: none; }\n  .post-it-container.dark-mode .theme-icon .icon-moon { display: inline; }\n  /* --- 新增结束 --- */\n\n  .post-it-collapsible{\n    position: relative;\n    z-index: 2;\n    display:grid; grid-template-rows:0fr;\n    transition:grid-template-rows var(--collapse-speed) var(--easing);\n  }\n\n  .post-it-collapsible.open{grid-template-rows:1fr}\n  .content-wrapper{overflow:hidden; min-height:0; padding-top:1.2em; border-top:1px solid var(--divider-color); position:relative}\n  .content-wrapper::before{\n    content:\"\"; position:absolute; top:0; left:50%; transform:translateX(-50%);\n    width:50px; height:1px; background:linear-gradient(90deg,transparent,var(--glow-color),transparent); opacity:0; transition:opacity var(--transition-speed) ease;\n  }\n  .post-it-collapsible.open .content-wrapper::before{opacity:.6}\n  .post-it-collapsible.open .content-wrapper{overflow:visible; transition:overflow 0s linear var(--collapse-speed)}\n  #options-container{padding:.8em .5em; display:flex; flex-direction:column; gap:.6em}\n\n  .clickable-text{\n    cursor:pointer; padding:.85em 1.2em; border-radius:10px;\n    background:var(--item-bg); border:1px solid var(--item-border);\n    box-shadow:var(--item-shadow); backdrop-filter:blur(5px);\n    opacity:0; transform:translateX(-20px); pointer-events:none;\n    transition:transform var(--transition-speed) var(--easing),\n               box-shadow var(--transition-speed) var(--easing),\n               background-color var(--transition-speed) var(--easing),\n               border-color var(--transition-speed) var(--easing);\n    position:relative; overflow:hidden;\n  }\n  .clickable-text::before{\n    content:\"\"; position:absolute; top:0; left:-100%; width:100%; height:100%;\n    background:linear-gradient(90deg,transparent,rgba(255,255,255,.12),transparent); transition:left .6s ease;\n    pointer-events:none;\n  }\n  .clickable-text:hover::before{left:100%}\n  .clickable-text::after{\n    content:\"\"; position:absolute; left:var(--rx, 50%); top:var(--ry, 50%);\n    width:14px; height:14px; border-radius:50%;\n    background:radial-gradient(circle, rgba(255,202,120,.42) 0%, rgba(255,202,120,.25) 40%, rgba(255,202,120,0) 70%);\n    transform:translate(-50%,-50%) scale(0);\n    opacity:0; pointer-events:none;\n  }\n  .clickable-text.ripple::after{ opacity:1; animation:ripple .7s ease-out forwards; }\n  @keyframes ripple{ to{ transform:translate(-50%,-50%) scale(28); opacity:0; } }\n\n  .clickable-text.is-selected{\n    background:linear-gradient(180deg, rgba(255,255,255,.85), rgba(255,255,255,.6));\n    border-color:#ffcf6a;\n    box-shadow:0 10px 28px rgba(255,174,0,.26), var(--item-hover-shadow);\n    transform:translateX(8px) translateY(-2px) scale(1.015);\n  }\n  .clickable-text.is-selected li::before{ content:'✓'; color:#ffb23e; font-weight:700; }\n\n  .post-it-collapsible.open .clickable-text{opacity:1; transform:translateX(0); pointer-events:auto}\n  .post-it-collapsible.open .clickable-text:nth-child(1){transition-delay:.1s}\n  .post-it-collapsible.open .clickable-text:nth-child(2){transition-delay:.15s}\n  .post-it-collapsible.open .clickable-text:nth-child(3){transition-delay:.2s}\n  .post-it-collapsible.open .clickable-text:nth-child(4){transition-delay:.25s}\n  .post-it-collapsible.open .clickable-text:nth-child(5){transition-delay:.3s}\n\n  .clickable-text:hover{\n    background:var(--item-hover-bg);\n    box-shadow:var(--item-hover-shadow);\n    transform:translateX(8px) translateY(-2px);\n    border-color:var(--glow-color);\n  }\n  .clickable-text:active{ box-shadow:0 0 0 9999px rgba(0,0,0,.02) inset, var(--item-hover-shadow); }\n\n  .clickable-text li{\n    list-style:none; position:relative; padding-left:1.2em;\n    font-size:.95em; line-height:1.4;\n  }\n  .clickable-text li::before{\n    content:'▸'; position:absolute; left:0; color:var(--glow-color);\n    transition:transform var(--transition-speed) ease;\n  }\n  .clickable-text:hover li::before{ transform:translateX(4px); }\n\n  @media (prefers-reduced-motion:reduce){\n    *{animation-duration:.01ms !important; animation-iteration-count:1 !important; transition-duration:.01ms !important}\n  }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"post-it-container\" id=\"post-it-card\"&gt;\n    &lt;div class=\"cat-kaomoji\"&gt;ฅ(^・ω・^)ฅ 点击选择&lt;/div&gt;\n    &lt;!-- HTML 修改处 --&gt;\n    &lt;button id=\"theme-toggle\" class=\"theme-icon\" aria-label=\"切换主题\" title=\"切换主题\"&gt;\n      &lt;span class=\"icon-sun\"&gt;☀️&lt;/span&gt;\n      &lt;span class=\"icon-moon\"&gt;🌙&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;div class=\"post-it-collapsible\" id=\"collapsible-content\"&gt;\n      &lt;div class=\"content-wrapper\"&gt;\n        &lt;div id=\"options-container\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div id=\"raw-options-data\" style=\"display:none\"&gt;&lt;details&gt;&lt;summary&gt;🍊剧情分支&lt;/summary&gt;\n\nA.立刻询问任务详情\nB.尝试拒绝任务\nC.提出更多要求\n\n&lt;/details&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n  document.addEventListener(\"DOMContentLoaded\", function(){\n    function init(){\n      const refs = { card: document.getElementById(\"post-it-card\"), themeToggle: document.getElementById(\"theme-toggle\"), collapsibleContent: document.getElementById(\"collapsible-content\"), optionsContainer: document.getElementById(\"options-container\"), rawData: document.getElementById(\"raw-options-data\") };\n      if(refs.card &amp;&amp; refs.rawData &amp;&amp; refs.optionsContainer){\n        renderOptions(refs.rawData, refs.optionsContainer);\n        setupTheme(refs.card, refs.themeToggle);\n        bindCollapsible(refs);\n      } else { console.error(\"初始化失败：缺少必要的DOM元素。\"); }\n    }\n\n    function renderOptions(rawNode, root){\n      const lines = rawNode.textContent.trim().split(/\\r?\\n/).filter(s=&gt;s.trim()!==\"\");\n      lines.forEach((line)=&gt;{\n        const text = line.trim().replace(/^[A-Z]\\.\\s*/i,\"\");\n        if(!text) return;\n        const item = document.createElement(\"div\");\n        item.className = \"clickable-text\";\n        item.setAttribute(\"data-action\", text);\n        item.innerHTML = `&lt;li&gt;${text}&lt;/li&gt;`;\n        item.addEventListener(\"click\", function(e){\n          e.stopPropagation();\n          const rect = this.getBoundingClientRect();\n          const x = e.clientX - rect.left;\n          const y = e.clientY - rect.top;\n          this.style.setProperty('--rx', x + 'px');\n          this.style.setProperty('--ry', y + 'px');\n          this.classList.remove('ripple'); void this.offsetWidth; this.classList.add('ripple');\n          this.classList.add('is-selected');\n          setTimeout(()=&gt;{ this.classList.remove('is-selected'); }, 700);\n          const payload = this.getAttribute(\"data-action\");\n          try {\n            const t = window.parent.document.querySelector(\"#send_textarea\");\n            const n = window.parent.triggerSlash;\n            if(t){\n              const v = t.value + payload;\n              if(n){ n(`/setinput ${v}`); }\n              else{ t.value = v; t.dispatchEvent(new Event(\"input\",{bubbles:true})); }\n            } else if(n){ n(`/setinput ${payload}`); }\n          } catch(err){ console.error(\"设置输入文本时出错:\", err); }\n        });\n        root.appendChild(item);\n      });\n    }\n\n    // --- JavaScript 修改处 ---\n    function setupTheme(card, btn){\n      const applyTheme = (mode) =&gt; {\n        card.classList.toggle(\"dark-mode\", mode === \"dark\");\n        localStorage.setItem(\"postItTheme\", mode);\n      };\n\n      btn.addEventListener(\"click\", (e)=&gt;{\n        e.stopPropagation();\n        const nextTheme = card.classList.contains(\"dark-mode\") ? \"light\" : \"dark\";\n        applyTheme(nextTheme);\n      });\n\n      const savedTheme = localStorage.getItem(\"postItTheme\") || \"light\";\n      applyTheme(savedTheme);\n    }\n    // --- 修改结束 ---\n\n    function bindCollapsible(refs){\n      const { card, collapsibleContent, themeToggle, optionsContainer } = refs;\n      card.addEventListener(\"click\", e =&gt; {\n        const exceptedElements = [themeToggle, ...optionsContainer.querySelectorAll(\".clickable-text\")];\n        const isClickOnException = exceptedElements.some(el =&gt; el &amp;&amp; el.contains(e.target));\n        if(!isClickOnException){ collapsibleContent.classList.toggle(\"open\"); }\n      });\n    }\n    init();\n  });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>
